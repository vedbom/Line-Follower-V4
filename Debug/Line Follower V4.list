
Line Follower V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000728c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a4  080074a4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080074a4  080074a4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074a4  080074a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080074ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000078  08007524  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08007524  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc67  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207f  00000000  00000000  0002fd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00031d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00032a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012bed  00000000  00000000  00033650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f52c  00000000  00000000  0004623d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000721f0  00000000  00000000  00055769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  000c79ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007334 	.word	0x08007334

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08007334 	.word	0x08007334

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_d2uiz>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <__aeabi_d2uiz+0x38>)
 800024a:	0004      	movs	r4, r0
 800024c:	000d      	movs	r5, r1
 800024e:	f001 fa57 	bl	8001700 <__aeabi_dcmpge>
 8000252:	2800      	cmp	r0, #0
 8000254:	d104      	bne.n	8000260 <__aeabi_d2uiz+0x1c>
 8000256:	0020      	movs	r0, r4
 8000258:	0029      	movs	r1, r5
 800025a:	f001 f979 	bl	8001550 <__aeabi_d2iz>
 800025e:	bd70      	pop	{r4, r5, r6, pc}
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <__aeabi_d2uiz+0x38>)
 8000262:	2200      	movs	r2, #0
 8000264:	0020      	movs	r0, r4
 8000266:	0029      	movs	r1, r5
 8000268:	f000 fde0 	bl	8000e2c <__aeabi_dsub>
 800026c:	f001 f970 	bl	8001550 <__aeabi_d2iz>
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	061b      	lsls	r3, r3, #24
 8000274:	469c      	mov	ip, r3
 8000276:	4460      	add	r0, ip
 8000278:	e7f1      	b.n	800025e <__aeabi_d2uiz+0x1a>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	41e00000 	.word	0x41e00000

08000280 <__aeabi_i2f>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	2800      	cmp	r0, #0
 8000284:	d013      	beq.n	80002ae <__aeabi_i2f+0x2e>
 8000286:	17c3      	asrs	r3, r0, #31
 8000288:	18c5      	adds	r5, r0, r3
 800028a:	405d      	eors	r5, r3
 800028c:	0fc4      	lsrs	r4, r0, #31
 800028e:	0028      	movs	r0, r5
 8000290:	f001 fa40 	bl	8001714 <__clzsi2>
 8000294:	239e      	movs	r3, #158	; 0x9e
 8000296:	0001      	movs	r1, r0
 8000298:	1a1b      	subs	r3, r3, r0
 800029a:	2b96      	cmp	r3, #150	; 0x96
 800029c:	dc0f      	bgt.n	80002be <__aeabi_i2f+0x3e>
 800029e:	2808      	cmp	r0, #8
 80002a0:	dd01      	ble.n	80002a6 <__aeabi_i2f+0x26>
 80002a2:	3908      	subs	r1, #8
 80002a4:	408d      	lsls	r5, r1
 80002a6:	026d      	lsls	r5, r5, #9
 80002a8:	0a6d      	lsrs	r5, r5, #9
 80002aa:	b2d8      	uxtb	r0, r3
 80002ac:	e002      	b.n	80002b4 <__aeabi_i2f+0x34>
 80002ae:	2400      	movs	r4, #0
 80002b0:	2000      	movs	r0, #0
 80002b2:	2500      	movs	r5, #0
 80002b4:	05c0      	lsls	r0, r0, #23
 80002b6:	4328      	orrs	r0, r5
 80002b8:	07e4      	lsls	r4, r4, #31
 80002ba:	4320      	orrs	r0, r4
 80002bc:	bd70      	pop	{r4, r5, r6, pc}
 80002be:	2b99      	cmp	r3, #153	; 0x99
 80002c0:	dd0b      	ble.n	80002da <__aeabi_i2f+0x5a>
 80002c2:	2205      	movs	r2, #5
 80002c4:	002e      	movs	r6, r5
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	40d6      	lsrs	r6, r2
 80002ca:	0002      	movs	r2, r0
 80002cc:	321b      	adds	r2, #27
 80002ce:	4095      	lsls	r5, r2
 80002d0:	0028      	movs	r0, r5
 80002d2:	1e45      	subs	r5, r0, #1
 80002d4:	41a8      	sbcs	r0, r5
 80002d6:	0035      	movs	r5, r6
 80002d8:	4305      	orrs	r5, r0
 80002da:	2905      	cmp	r1, #5
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_i2f+0x62>
 80002de:	1f4a      	subs	r2, r1, #5
 80002e0:	4095      	lsls	r5, r2
 80002e2:	002a      	movs	r2, r5
 80002e4:	4e08      	ldr	r6, [pc, #32]	; (8000308 <__aeabi_i2f+0x88>)
 80002e6:	4032      	ands	r2, r6
 80002e8:	0768      	lsls	r0, r5, #29
 80002ea:	d009      	beq.n	8000300 <__aeabi_i2f+0x80>
 80002ec:	200f      	movs	r0, #15
 80002ee:	4028      	ands	r0, r5
 80002f0:	2804      	cmp	r0, #4
 80002f2:	d005      	beq.n	8000300 <__aeabi_i2f+0x80>
 80002f4:	3204      	adds	r2, #4
 80002f6:	0150      	lsls	r0, r2, #5
 80002f8:	d502      	bpl.n	8000300 <__aeabi_i2f+0x80>
 80002fa:	239f      	movs	r3, #159	; 0x9f
 80002fc:	4032      	ands	r2, r6
 80002fe:	1a5b      	subs	r3, r3, r1
 8000300:	0192      	lsls	r2, r2, #6
 8000302:	0a55      	lsrs	r5, r2, #9
 8000304:	b2d8      	uxtb	r0, r3
 8000306:	e7d5      	b.n	80002b4 <__aeabi_i2f+0x34>
 8000308:	fbffffff 	.word	0xfbffffff

0800030c <__aeabi_ui2f>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	1e05      	subs	r5, r0, #0
 8000310:	d00e      	beq.n	8000330 <__aeabi_ui2f+0x24>
 8000312:	f001 f9ff 	bl	8001714 <__clzsi2>
 8000316:	239e      	movs	r3, #158	; 0x9e
 8000318:	0004      	movs	r4, r0
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	2b96      	cmp	r3, #150	; 0x96
 800031e:	dc0c      	bgt.n	800033a <__aeabi_ui2f+0x2e>
 8000320:	2808      	cmp	r0, #8
 8000322:	dd01      	ble.n	8000328 <__aeabi_ui2f+0x1c>
 8000324:	3c08      	subs	r4, #8
 8000326:	40a5      	lsls	r5, r4
 8000328:	026d      	lsls	r5, r5, #9
 800032a:	0a6d      	lsrs	r5, r5, #9
 800032c:	b2d8      	uxtb	r0, r3
 800032e:	e001      	b.n	8000334 <__aeabi_ui2f+0x28>
 8000330:	2000      	movs	r0, #0
 8000332:	2500      	movs	r5, #0
 8000334:	05c0      	lsls	r0, r0, #23
 8000336:	4328      	orrs	r0, r5
 8000338:	bd70      	pop	{r4, r5, r6, pc}
 800033a:	2b99      	cmp	r3, #153	; 0x99
 800033c:	dd09      	ble.n	8000352 <__aeabi_ui2f+0x46>
 800033e:	0002      	movs	r2, r0
 8000340:	0029      	movs	r1, r5
 8000342:	321b      	adds	r2, #27
 8000344:	4091      	lsls	r1, r2
 8000346:	1e4a      	subs	r2, r1, #1
 8000348:	4191      	sbcs	r1, r2
 800034a:	2205      	movs	r2, #5
 800034c:	1a12      	subs	r2, r2, r0
 800034e:	40d5      	lsrs	r5, r2
 8000350:	430d      	orrs	r5, r1
 8000352:	2c05      	cmp	r4, #5
 8000354:	dd01      	ble.n	800035a <__aeabi_ui2f+0x4e>
 8000356:	1f62      	subs	r2, r4, #5
 8000358:	4095      	lsls	r5, r2
 800035a:	0029      	movs	r1, r5
 800035c:	4e08      	ldr	r6, [pc, #32]	; (8000380 <__aeabi_ui2f+0x74>)
 800035e:	4031      	ands	r1, r6
 8000360:	076a      	lsls	r2, r5, #29
 8000362:	d009      	beq.n	8000378 <__aeabi_ui2f+0x6c>
 8000364:	200f      	movs	r0, #15
 8000366:	4028      	ands	r0, r5
 8000368:	2804      	cmp	r0, #4
 800036a:	d005      	beq.n	8000378 <__aeabi_ui2f+0x6c>
 800036c:	3104      	adds	r1, #4
 800036e:	014a      	lsls	r2, r1, #5
 8000370:	d502      	bpl.n	8000378 <__aeabi_ui2f+0x6c>
 8000372:	239f      	movs	r3, #159	; 0x9f
 8000374:	4031      	ands	r1, r6
 8000376:	1b1b      	subs	r3, r3, r4
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	0a4d      	lsrs	r5, r1, #9
 800037c:	b2d8      	uxtb	r0, r3
 800037e:	e7d9      	b.n	8000334 <__aeabi_ui2f+0x28>
 8000380:	fbffffff 	.word	0xfbffffff

08000384 <__aeabi_ddiv>:
 8000384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000386:	4657      	mov	r7, sl
 8000388:	464e      	mov	r6, r9
 800038a:	4645      	mov	r5, r8
 800038c:	46de      	mov	lr, fp
 800038e:	b5e0      	push	{r5, r6, r7, lr}
 8000390:	4681      	mov	r9, r0
 8000392:	0005      	movs	r5, r0
 8000394:	030c      	lsls	r4, r1, #12
 8000396:	0048      	lsls	r0, r1, #1
 8000398:	4692      	mov	sl, r2
 800039a:	001f      	movs	r7, r3
 800039c:	b085      	sub	sp, #20
 800039e:	0b24      	lsrs	r4, r4, #12
 80003a0:	0d40      	lsrs	r0, r0, #21
 80003a2:	0fce      	lsrs	r6, r1, #31
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d059      	beq.n	800045c <__aeabi_ddiv+0xd8>
 80003a8:	4b87      	ldr	r3, [pc, #540]	; (80005c8 <__aeabi_ddiv+0x244>)
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d100      	bne.n	80003b0 <__aeabi_ddiv+0x2c>
 80003ae:	e098      	b.n	80004e2 <__aeabi_ddiv+0x15e>
 80003b0:	0f6b      	lsrs	r3, r5, #29
 80003b2:	00e4      	lsls	r4, r4, #3
 80003b4:	431c      	orrs	r4, r3
 80003b6:	2380      	movs	r3, #128	; 0x80
 80003b8:	041b      	lsls	r3, r3, #16
 80003ba:	4323      	orrs	r3, r4
 80003bc:	4698      	mov	r8, r3
 80003be:	4b83      	ldr	r3, [pc, #524]	; (80005cc <__aeabi_ddiv+0x248>)
 80003c0:	00ed      	lsls	r5, r5, #3
 80003c2:	469b      	mov	fp, r3
 80003c4:	2300      	movs	r3, #0
 80003c6:	4699      	mov	r9, r3
 80003c8:	4483      	add	fp, r0
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	033c      	lsls	r4, r7, #12
 80003ce:	007b      	lsls	r3, r7, #1
 80003d0:	4650      	mov	r0, sl
 80003d2:	0b24      	lsrs	r4, r4, #12
 80003d4:	0d5b      	lsrs	r3, r3, #21
 80003d6:	0fff      	lsrs	r7, r7, #31
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d067      	beq.n	80004ac <__aeabi_ddiv+0x128>
 80003dc:	4a7a      	ldr	r2, [pc, #488]	; (80005c8 <__aeabi_ddiv+0x244>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d018      	beq.n	8000414 <__aeabi_ddiv+0x90>
 80003e2:	497a      	ldr	r1, [pc, #488]	; (80005cc <__aeabi_ddiv+0x248>)
 80003e4:	0f42      	lsrs	r2, r0, #29
 80003e6:	468c      	mov	ip, r1
 80003e8:	00e4      	lsls	r4, r4, #3
 80003ea:	4659      	mov	r1, fp
 80003ec:	4314      	orrs	r4, r2
 80003ee:	2280      	movs	r2, #128	; 0x80
 80003f0:	4463      	add	r3, ip
 80003f2:	0412      	lsls	r2, r2, #16
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	4314      	orrs	r4, r2
 80003f8:	469b      	mov	fp, r3
 80003fa:	00c2      	lsls	r2, r0, #3
 80003fc:	2000      	movs	r0, #0
 80003fe:	0033      	movs	r3, r6
 8000400:	407b      	eors	r3, r7
 8000402:	469a      	mov	sl, r3
 8000404:	464b      	mov	r3, r9
 8000406:	2b0f      	cmp	r3, #15
 8000408:	d900      	bls.n	800040c <__aeabi_ddiv+0x88>
 800040a:	e0ef      	b.n	80005ec <__aeabi_ddiv+0x268>
 800040c:	4970      	ldr	r1, [pc, #448]	; (80005d0 <__aeabi_ddiv+0x24c>)
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	58cb      	ldr	r3, [r1, r3]
 8000412:	469f      	mov	pc, r3
 8000414:	4b6f      	ldr	r3, [pc, #444]	; (80005d4 <__aeabi_ddiv+0x250>)
 8000416:	4652      	mov	r2, sl
 8000418:	469c      	mov	ip, r3
 800041a:	4322      	orrs	r2, r4
 800041c:	44e3      	add	fp, ip
 800041e:	2a00      	cmp	r2, #0
 8000420:	d000      	beq.n	8000424 <__aeabi_ddiv+0xa0>
 8000422:	e095      	b.n	8000550 <__aeabi_ddiv+0x1cc>
 8000424:	4649      	mov	r1, r9
 8000426:	2302      	movs	r3, #2
 8000428:	4319      	orrs	r1, r3
 800042a:	4689      	mov	r9, r1
 800042c:	2400      	movs	r4, #0
 800042e:	2002      	movs	r0, #2
 8000430:	e7e5      	b.n	80003fe <__aeabi_ddiv+0x7a>
 8000432:	2300      	movs	r3, #0
 8000434:	2400      	movs	r4, #0
 8000436:	2500      	movs	r5, #0
 8000438:	4652      	mov	r2, sl
 800043a:	051b      	lsls	r3, r3, #20
 800043c:	4323      	orrs	r3, r4
 800043e:	07d2      	lsls	r2, r2, #31
 8000440:	4313      	orrs	r3, r2
 8000442:	0028      	movs	r0, r5
 8000444:	0019      	movs	r1, r3
 8000446:	b005      	add	sp, #20
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	46bb      	mov	fp, r7
 800044c:	46b2      	mov	sl, r6
 800044e:	46a9      	mov	r9, r5
 8000450:	46a0      	mov	r8, r4
 8000452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000454:	2400      	movs	r4, #0
 8000456:	2500      	movs	r5, #0
 8000458:	4b5b      	ldr	r3, [pc, #364]	; (80005c8 <__aeabi_ddiv+0x244>)
 800045a:	e7ed      	b.n	8000438 <__aeabi_ddiv+0xb4>
 800045c:	464b      	mov	r3, r9
 800045e:	4323      	orrs	r3, r4
 8000460:	4698      	mov	r8, r3
 8000462:	d100      	bne.n	8000466 <__aeabi_ddiv+0xe2>
 8000464:	e089      	b.n	800057a <__aeabi_ddiv+0x1f6>
 8000466:	2c00      	cmp	r4, #0
 8000468:	d100      	bne.n	800046c <__aeabi_ddiv+0xe8>
 800046a:	e1e0      	b.n	800082e <__aeabi_ddiv+0x4aa>
 800046c:	0020      	movs	r0, r4
 800046e:	f001 f951 	bl	8001714 <__clzsi2>
 8000472:	0001      	movs	r1, r0
 8000474:	0002      	movs	r2, r0
 8000476:	390b      	subs	r1, #11
 8000478:	231d      	movs	r3, #29
 800047a:	1a5b      	subs	r3, r3, r1
 800047c:	4649      	mov	r1, r9
 800047e:	0010      	movs	r0, r2
 8000480:	40d9      	lsrs	r1, r3
 8000482:	3808      	subs	r0, #8
 8000484:	4084      	lsls	r4, r0
 8000486:	000b      	movs	r3, r1
 8000488:	464d      	mov	r5, r9
 800048a:	4323      	orrs	r3, r4
 800048c:	4698      	mov	r8, r3
 800048e:	4085      	lsls	r5, r0
 8000490:	4851      	ldr	r0, [pc, #324]	; (80005d8 <__aeabi_ddiv+0x254>)
 8000492:	033c      	lsls	r4, r7, #12
 8000494:	1a83      	subs	r3, r0, r2
 8000496:	469b      	mov	fp, r3
 8000498:	2300      	movs	r3, #0
 800049a:	4699      	mov	r9, r3
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	007b      	lsls	r3, r7, #1
 80004a0:	4650      	mov	r0, sl
 80004a2:	0b24      	lsrs	r4, r4, #12
 80004a4:	0d5b      	lsrs	r3, r3, #21
 80004a6:	0fff      	lsrs	r7, r7, #31
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d197      	bne.n	80003dc <__aeabi_ddiv+0x58>
 80004ac:	4652      	mov	r2, sl
 80004ae:	4322      	orrs	r2, r4
 80004b0:	d055      	beq.n	800055e <__aeabi_ddiv+0x1da>
 80004b2:	2c00      	cmp	r4, #0
 80004b4:	d100      	bne.n	80004b8 <__aeabi_ddiv+0x134>
 80004b6:	e1ca      	b.n	800084e <__aeabi_ddiv+0x4ca>
 80004b8:	0020      	movs	r0, r4
 80004ba:	f001 f92b 	bl	8001714 <__clzsi2>
 80004be:	0002      	movs	r2, r0
 80004c0:	3a0b      	subs	r2, #11
 80004c2:	231d      	movs	r3, #29
 80004c4:	0001      	movs	r1, r0
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	4652      	mov	r2, sl
 80004ca:	3908      	subs	r1, #8
 80004cc:	40da      	lsrs	r2, r3
 80004ce:	408c      	lsls	r4, r1
 80004d0:	4314      	orrs	r4, r2
 80004d2:	4652      	mov	r2, sl
 80004d4:	408a      	lsls	r2, r1
 80004d6:	4b41      	ldr	r3, [pc, #260]	; (80005dc <__aeabi_ddiv+0x258>)
 80004d8:	4458      	add	r0, fp
 80004da:	469b      	mov	fp, r3
 80004dc:	4483      	add	fp, r0
 80004de:	2000      	movs	r0, #0
 80004e0:	e78d      	b.n	80003fe <__aeabi_ddiv+0x7a>
 80004e2:	464b      	mov	r3, r9
 80004e4:	4323      	orrs	r3, r4
 80004e6:	4698      	mov	r8, r3
 80004e8:	d140      	bne.n	800056c <__aeabi_ddiv+0x1e8>
 80004ea:	2308      	movs	r3, #8
 80004ec:	4699      	mov	r9, r3
 80004ee:	3b06      	subs	r3, #6
 80004f0:	2500      	movs	r5, #0
 80004f2:	4683      	mov	fp, r0
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	e769      	b.n	80003cc <__aeabi_ddiv+0x48>
 80004f8:	46b2      	mov	sl, r6
 80004fa:	9b00      	ldr	r3, [sp, #0]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d0a9      	beq.n	8000454 <__aeabi_ddiv+0xd0>
 8000500:	2b03      	cmp	r3, #3
 8000502:	d100      	bne.n	8000506 <__aeabi_ddiv+0x182>
 8000504:	e211      	b.n	800092a <__aeabi_ddiv+0x5a6>
 8000506:	2b01      	cmp	r3, #1
 8000508:	d093      	beq.n	8000432 <__aeabi_ddiv+0xae>
 800050a:	4a35      	ldr	r2, [pc, #212]	; (80005e0 <__aeabi_ddiv+0x25c>)
 800050c:	445a      	add	r2, fp
 800050e:	2a00      	cmp	r2, #0
 8000510:	dc00      	bgt.n	8000514 <__aeabi_ddiv+0x190>
 8000512:	e13c      	b.n	800078e <__aeabi_ddiv+0x40a>
 8000514:	076b      	lsls	r3, r5, #29
 8000516:	d000      	beq.n	800051a <__aeabi_ddiv+0x196>
 8000518:	e1a7      	b.n	800086a <__aeabi_ddiv+0x4e6>
 800051a:	08ed      	lsrs	r5, r5, #3
 800051c:	4643      	mov	r3, r8
 800051e:	01db      	lsls	r3, r3, #7
 8000520:	d506      	bpl.n	8000530 <__aeabi_ddiv+0x1ac>
 8000522:	4642      	mov	r2, r8
 8000524:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <__aeabi_ddiv+0x260>)
 8000526:	401a      	ands	r2, r3
 8000528:	4690      	mov	r8, r2
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	00d2      	lsls	r2, r2, #3
 800052e:	445a      	add	r2, fp
 8000530:	4b2d      	ldr	r3, [pc, #180]	; (80005e8 <__aeabi_ddiv+0x264>)
 8000532:	429a      	cmp	r2, r3
 8000534:	dc8e      	bgt.n	8000454 <__aeabi_ddiv+0xd0>
 8000536:	4643      	mov	r3, r8
 8000538:	0552      	lsls	r2, r2, #21
 800053a:	0758      	lsls	r0, r3, #29
 800053c:	025c      	lsls	r4, r3, #9
 800053e:	4305      	orrs	r5, r0
 8000540:	0b24      	lsrs	r4, r4, #12
 8000542:	0d53      	lsrs	r3, r2, #21
 8000544:	e778      	b.n	8000438 <__aeabi_ddiv+0xb4>
 8000546:	46ba      	mov	sl, r7
 8000548:	46a0      	mov	r8, r4
 800054a:	0015      	movs	r5, r2
 800054c:	9000      	str	r0, [sp, #0]
 800054e:	e7d4      	b.n	80004fa <__aeabi_ddiv+0x176>
 8000550:	464a      	mov	r2, r9
 8000552:	2303      	movs	r3, #3
 8000554:	431a      	orrs	r2, r3
 8000556:	4691      	mov	r9, r2
 8000558:	2003      	movs	r0, #3
 800055a:	4652      	mov	r2, sl
 800055c:	e74f      	b.n	80003fe <__aeabi_ddiv+0x7a>
 800055e:	4649      	mov	r1, r9
 8000560:	2301      	movs	r3, #1
 8000562:	4319      	orrs	r1, r3
 8000564:	4689      	mov	r9, r1
 8000566:	2400      	movs	r4, #0
 8000568:	2001      	movs	r0, #1
 800056a:	e748      	b.n	80003fe <__aeabi_ddiv+0x7a>
 800056c:	230c      	movs	r3, #12
 800056e:	4699      	mov	r9, r3
 8000570:	3b09      	subs	r3, #9
 8000572:	46a0      	mov	r8, r4
 8000574:	4683      	mov	fp, r0
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	e728      	b.n	80003cc <__aeabi_ddiv+0x48>
 800057a:	2304      	movs	r3, #4
 800057c:	4699      	mov	r9, r3
 800057e:	2300      	movs	r3, #0
 8000580:	469b      	mov	fp, r3
 8000582:	3301      	adds	r3, #1
 8000584:	2500      	movs	r5, #0
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	e720      	b.n	80003cc <__aeabi_ddiv+0x48>
 800058a:	2300      	movs	r3, #0
 800058c:	2480      	movs	r4, #128	; 0x80
 800058e:	469a      	mov	sl, r3
 8000590:	2500      	movs	r5, #0
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <__aeabi_ddiv+0x244>)
 8000594:	0324      	lsls	r4, r4, #12
 8000596:	e74f      	b.n	8000438 <__aeabi_ddiv+0xb4>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	4641      	mov	r1, r8
 800059c:	031b      	lsls	r3, r3, #12
 800059e:	4219      	tst	r1, r3
 80005a0:	d008      	beq.n	80005b4 <__aeabi_ddiv+0x230>
 80005a2:	421c      	tst	r4, r3
 80005a4:	d106      	bne.n	80005b4 <__aeabi_ddiv+0x230>
 80005a6:	431c      	orrs	r4, r3
 80005a8:	0324      	lsls	r4, r4, #12
 80005aa:	46ba      	mov	sl, r7
 80005ac:	0015      	movs	r5, r2
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <__aeabi_ddiv+0x244>)
 80005b0:	0b24      	lsrs	r4, r4, #12
 80005b2:	e741      	b.n	8000438 <__aeabi_ddiv+0xb4>
 80005b4:	2480      	movs	r4, #128	; 0x80
 80005b6:	4643      	mov	r3, r8
 80005b8:	0324      	lsls	r4, r4, #12
 80005ba:	431c      	orrs	r4, r3
 80005bc:	0324      	lsls	r4, r4, #12
 80005be:	46b2      	mov	sl, r6
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <__aeabi_ddiv+0x244>)
 80005c2:	0b24      	lsrs	r4, r4, #12
 80005c4:	e738      	b.n	8000438 <__aeabi_ddiv+0xb4>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	000007ff 	.word	0x000007ff
 80005cc:	fffffc01 	.word	0xfffffc01
 80005d0:	080073a0 	.word	0x080073a0
 80005d4:	fffff801 	.word	0xfffff801
 80005d8:	fffffc0d 	.word	0xfffffc0d
 80005dc:	000003f3 	.word	0x000003f3
 80005e0:	000003ff 	.word	0x000003ff
 80005e4:	feffffff 	.word	0xfeffffff
 80005e8:	000007fe 	.word	0x000007fe
 80005ec:	4544      	cmp	r4, r8
 80005ee:	d200      	bcs.n	80005f2 <__aeabi_ddiv+0x26e>
 80005f0:	e116      	b.n	8000820 <__aeabi_ddiv+0x49c>
 80005f2:	d100      	bne.n	80005f6 <__aeabi_ddiv+0x272>
 80005f4:	e111      	b.n	800081a <__aeabi_ddiv+0x496>
 80005f6:	2301      	movs	r3, #1
 80005f8:	425b      	negs	r3, r3
 80005fa:	469c      	mov	ip, r3
 80005fc:	002e      	movs	r6, r5
 80005fe:	4640      	mov	r0, r8
 8000600:	2500      	movs	r5, #0
 8000602:	44e3      	add	fp, ip
 8000604:	0223      	lsls	r3, r4, #8
 8000606:	0e14      	lsrs	r4, r2, #24
 8000608:	431c      	orrs	r4, r3
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	4699      	mov	r9, r3
 800060e:	0423      	lsls	r3, r4, #16
 8000610:	0c1f      	lsrs	r7, r3, #16
 8000612:	0212      	lsls	r2, r2, #8
 8000614:	4649      	mov	r1, r9
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	9701      	str	r7, [sp, #4]
 800061a:	f7ff fe0d 	bl	8000238 <__aeabi_uidivmod>
 800061e:	0002      	movs	r2, r0
 8000620:	437a      	muls	r2, r7
 8000622:	040b      	lsls	r3, r1, #16
 8000624:	0c31      	lsrs	r1, r6, #16
 8000626:	4680      	mov	r8, r0
 8000628:	4319      	orrs	r1, r3
 800062a:	428a      	cmp	r2, r1
 800062c:	d90b      	bls.n	8000646 <__aeabi_ddiv+0x2c2>
 800062e:	2301      	movs	r3, #1
 8000630:	425b      	negs	r3, r3
 8000632:	469c      	mov	ip, r3
 8000634:	1909      	adds	r1, r1, r4
 8000636:	44e0      	add	r8, ip
 8000638:	428c      	cmp	r4, r1
 800063a:	d804      	bhi.n	8000646 <__aeabi_ddiv+0x2c2>
 800063c:	428a      	cmp	r2, r1
 800063e:	d902      	bls.n	8000646 <__aeabi_ddiv+0x2c2>
 8000640:	1e83      	subs	r3, r0, #2
 8000642:	4698      	mov	r8, r3
 8000644:	1909      	adds	r1, r1, r4
 8000646:	1a88      	subs	r0, r1, r2
 8000648:	4649      	mov	r1, r9
 800064a:	f7ff fdf5 	bl	8000238 <__aeabi_uidivmod>
 800064e:	0409      	lsls	r1, r1, #16
 8000650:	468c      	mov	ip, r1
 8000652:	0431      	lsls	r1, r6, #16
 8000654:	4666      	mov	r6, ip
 8000656:	9a01      	ldr	r2, [sp, #4]
 8000658:	0c09      	lsrs	r1, r1, #16
 800065a:	4342      	muls	r2, r0
 800065c:	0003      	movs	r3, r0
 800065e:	4331      	orrs	r1, r6
 8000660:	428a      	cmp	r2, r1
 8000662:	d904      	bls.n	800066e <__aeabi_ddiv+0x2ea>
 8000664:	1909      	adds	r1, r1, r4
 8000666:	3b01      	subs	r3, #1
 8000668:	428c      	cmp	r4, r1
 800066a:	d800      	bhi.n	800066e <__aeabi_ddiv+0x2ea>
 800066c:	e111      	b.n	8000892 <__aeabi_ddiv+0x50e>
 800066e:	1a89      	subs	r1, r1, r2
 8000670:	4642      	mov	r2, r8
 8000672:	9e00      	ldr	r6, [sp, #0]
 8000674:	0412      	lsls	r2, r2, #16
 8000676:	431a      	orrs	r2, r3
 8000678:	0c33      	lsrs	r3, r6, #16
 800067a:	001f      	movs	r7, r3
 800067c:	0c10      	lsrs	r0, r2, #16
 800067e:	4690      	mov	r8, r2
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	0413      	lsls	r3, r2, #16
 8000684:	0432      	lsls	r2, r6, #16
 8000686:	0c16      	lsrs	r6, r2, #16
 8000688:	0032      	movs	r2, r6
 800068a:	0c1b      	lsrs	r3, r3, #16
 800068c:	435a      	muls	r2, r3
 800068e:	9603      	str	r6, [sp, #12]
 8000690:	437b      	muls	r3, r7
 8000692:	4346      	muls	r6, r0
 8000694:	4378      	muls	r0, r7
 8000696:	0c17      	lsrs	r7, r2, #16
 8000698:	46bc      	mov	ip, r7
 800069a:	199b      	adds	r3, r3, r6
 800069c:	4463      	add	r3, ip
 800069e:	429e      	cmp	r6, r3
 80006a0:	d903      	bls.n	80006aa <__aeabi_ddiv+0x326>
 80006a2:	2680      	movs	r6, #128	; 0x80
 80006a4:	0276      	lsls	r6, r6, #9
 80006a6:	46b4      	mov	ip, r6
 80006a8:	4460      	add	r0, ip
 80006aa:	0c1e      	lsrs	r6, r3, #16
 80006ac:	1830      	adds	r0, r6, r0
 80006ae:	0416      	lsls	r6, r2, #16
 80006b0:	041b      	lsls	r3, r3, #16
 80006b2:	0c36      	lsrs	r6, r6, #16
 80006b4:	199e      	adds	r6, r3, r6
 80006b6:	4281      	cmp	r1, r0
 80006b8:	d200      	bcs.n	80006bc <__aeabi_ddiv+0x338>
 80006ba:	e09c      	b.n	80007f6 <__aeabi_ddiv+0x472>
 80006bc:	d100      	bne.n	80006c0 <__aeabi_ddiv+0x33c>
 80006be:	e097      	b.n	80007f0 <__aeabi_ddiv+0x46c>
 80006c0:	1bae      	subs	r6, r5, r6
 80006c2:	1a09      	subs	r1, r1, r0
 80006c4:	42b5      	cmp	r5, r6
 80006c6:	4180      	sbcs	r0, r0
 80006c8:	4240      	negs	r0, r0
 80006ca:	1a08      	subs	r0, r1, r0
 80006cc:	4284      	cmp	r4, r0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x34e>
 80006d0:	e111      	b.n	80008f6 <__aeabi_ddiv+0x572>
 80006d2:	4649      	mov	r1, r9
 80006d4:	f7ff fdb0 	bl	8000238 <__aeabi_uidivmod>
 80006d8:	9a01      	ldr	r2, [sp, #4]
 80006da:	040b      	lsls	r3, r1, #16
 80006dc:	4342      	muls	r2, r0
 80006de:	0c31      	lsrs	r1, r6, #16
 80006e0:	0005      	movs	r5, r0
 80006e2:	4319      	orrs	r1, r3
 80006e4:	428a      	cmp	r2, r1
 80006e6:	d907      	bls.n	80006f8 <__aeabi_ddiv+0x374>
 80006e8:	1909      	adds	r1, r1, r4
 80006ea:	3d01      	subs	r5, #1
 80006ec:	428c      	cmp	r4, r1
 80006ee:	d803      	bhi.n	80006f8 <__aeabi_ddiv+0x374>
 80006f0:	428a      	cmp	r2, r1
 80006f2:	d901      	bls.n	80006f8 <__aeabi_ddiv+0x374>
 80006f4:	1e85      	subs	r5, r0, #2
 80006f6:	1909      	adds	r1, r1, r4
 80006f8:	1a88      	subs	r0, r1, r2
 80006fa:	4649      	mov	r1, r9
 80006fc:	f7ff fd9c 	bl	8000238 <__aeabi_uidivmod>
 8000700:	0409      	lsls	r1, r1, #16
 8000702:	468c      	mov	ip, r1
 8000704:	0431      	lsls	r1, r6, #16
 8000706:	4666      	mov	r6, ip
 8000708:	9a01      	ldr	r2, [sp, #4]
 800070a:	0c09      	lsrs	r1, r1, #16
 800070c:	4342      	muls	r2, r0
 800070e:	0003      	movs	r3, r0
 8000710:	4331      	orrs	r1, r6
 8000712:	428a      	cmp	r2, r1
 8000714:	d907      	bls.n	8000726 <__aeabi_ddiv+0x3a2>
 8000716:	1909      	adds	r1, r1, r4
 8000718:	3b01      	subs	r3, #1
 800071a:	428c      	cmp	r4, r1
 800071c:	d803      	bhi.n	8000726 <__aeabi_ddiv+0x3a2>
 800071e:	428a      	cmp	r2, r1
 8000720:	d901      	bls.n	8000726 <__aeabi_ddiv+0x3a2>
 8000722:	1e83      	subs	r3, r0, #2
 8000724:	1909      	adds	r1, r1, r4
 8000726:	9e03      	ldr	r6, [sp, #12]
 8000728:	1a89      	subs	r1, r1, r2
 800072a:	0032      	movs	r2, r6
 800072c:	042d      	lsls	r5, r5, #16
 800072e:	431d      	orrs	r5, r3
 8000730:	9f02      	ldr	r7, [sp, #8]
 8000732:	042b      	lsls	r3, r5, #16
 8000734:	0c1b      	lsrs	r3, r3, #16
 8000736:	435a      	muls	r2, r3
 8000738:	437b      	muls	r3, r7
 800073a:	469c      	mov	ip, r3
 800073c:	0c28      	lsrs	r0, r5, #16
 800073e:	4346      	muls	r6, r0
 8000740:	0c13      	lsrs	r3, r2, #16
 8000742:	44b4      	add	ip, r6
 8000744:	4463      	add	r3, ip
 8000746:	4378      	muls	r0, r7
 8000748:	429e      	cmp	r6, r3
 800074a:	d903      	bls.n	8000754 <__aeabi_ddiv+0x3d0>
 800074c:	2680      	movs	r6, #128	; 0x80
 800074e:	0276      	lsls	r6, r6, #9
 8000750:	46b4      	mov	ip, r6
 8000752:	4460      	add	r0, ip
 8000754:	0c1e      	lsrs	r6, r3, #16
 8000756:	0412      	lsls	r2, r2, #16
 8000758:	041b      	lsls	r3, r3, #16
 800075a:	0c12      	lsrs	r2, r2, #16
 800075c:	1830      	adds	r0, r6, r0
 800075e:	189b      	adds	r3, r3, r2
 8000760:	4281      	cmp	r1, r0
 8000762:	d306      	bcc.n	8000772 <__aeabi_ddiv+0x3ee>
 8000764:	d002      	beq.n	800076c <__aeabi_ddiv+0x3e8>
 8000766:	2301      	movs	r3, #1
 8000768:	431d      	orrs	r5, r3
 800076a:	e6ce      	b.n	800050a <__aeabi_ddiv+0x186>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_ddiv+0x3ee>
 8000770:	e6cb      	b.n	800050a <__aeabi_ddiv+0x186>
 8000772:	1861      	adds	r1, r4, r1
 8000774:	1e6e      	subs	r6, r5, #1
 8000776:	42a1      	cmp	r1, r4
 8000778:	d200      	bcs.n	800077c <__aeabi_ddiv+0x3f8>
 800077a:	e0a4      	b.n	80008c6 <__aeabi_ddiv+0x542>
 800077c:	4281      	cmp	r1, r0
 800077e:	d200      	bcs.n	8000782 <__aeabi_ddiv+0x3fe>
 8000780:	e0c9      	b.n	8000916 <__aeabi_ddiv+0x592>
 8000782:	d100      	bne.n	8000786 <__aeabi_ddiv+0x402>
 8000784:	e0d9      	b.n	800093a <__aeabi_ddiv+0x5b6>
 8000786:	0035      	movs	r5, r6
 8000788:	e7ed      	b.n	8000766 <__aeabi_ddiv+0x3e2>
 800078a:	2501      	movs	r5, #1
 800078c:	426d      	negs	r5, r5
 800078e:	2101      	movs	r1, #1
 8000790:	1a89      	subs	r1, r1, r2
 8000792:	2938      	cmp	r1, #56	; 0x38
 8000794:	dd00      	ble.n	8000798 <__aeabi_ddiv+0x414>
 8000796:	e64c      	b.n	8000432 <__aeabi_ddiv+0xae>
 8000798:	291f      	cmp	r1, #31
 800079a:	dc00      	bgt.n	800079e <__aeabi_ddiv+0x41a>
 800079c:	e07f      	b.n	800089e <__aeabi_ddiv+0x51a>
 800079e:	231f      	movs	r3, #31
 80007a0:	425b      	negs	r3, r3
 80007a2:	1a9a      	subs	r2, r3, r2
 80007a4:	4643      	mov	r3, r8
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2920      	cmp	r1, #32
 80007aa:	d004      	beq.n	80007b6 <__aeabi_ddiv+0x432>
 80007ac:	4644      	mov	r4, r8
 80007ae:	4a65      	ldr	r2, [pc, #404]	; (8000944 <__aeabi_ddiv+0x5c0>)
 80007b0:	445a      	add	r2, fp
 80007b2:	4094      	lsls	r4, r2
 80007b4:	4325      	orrs	r5, r4
 80007b6:	1e6a      	subs	r2, r5, #1
 80007b8:	4195      	sbcs	r5, r2
 80007ba:	2207      	movs	r2, #7
 80007bc:	432b      	orrs	r3, r5
 80007be:	0015      	movs	r5, r2
 80007c0:	2400      	movs	r4, #0
 80007c2:	401d      	ands	r5, r3
 80007c4:	421a      	tst	r2, r3
 80007c6:	d100      	bne.n	80007ca <__aeabi_ddiv+0x446>
 80007c8:	e0a1      	b.n	800090e <__aeabi_ddiv+0x58a>
 80007ca:	220f      	movs	r2, #15
 80007cc:	2400      	movs	r4, #0
 80007ce:	401a      	ands	r2, r3
 80007d0:	2a04      	cmp	r2, #4
 80007d2:	d100      	bne.n	80007d6 <__aeabi_ddiv+0x452>
 80007d4:	e098      	b.n	8000908 <__aeabi_ddiv+0x584>
 80007d6:	1d1a      	adds	r2, r3, #4
 80007d8:	429a      	cmp	r2, r3
 80007da:	419b      	sbcs	r3, r3
 80007dc:	425b      	negs	r3, r3
 80007de:	18e4      	adds	r4, r4, r3
 80007e0:	0013      	movs	r3, r2
 80007e2:	0222      	lsls	r2, r4, #8
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_ddiv+0x464>
 80007e6:	e08f      	b.n	8000908 <__aeabi_ddiv+0x584>
 80007e8:	2301      	movs	r3, #1
 80007ea:	2400      	movs	r4, #0
 80007ec:	2500      	movs	r5, #0
 80007ee:	e623      	b.n	8000438 <__aeabi_ddiv+0xb4>
 80007f0:	42b5      	cmp	r5, r6
 80007f2:	d300      	bcc.n	80007f6 <__aeabi_ddiv+0x472>
 80007f4:	e764      	b.n	80006c0 <__aeabi_ddiv+0x33c>
 80007f6:	4643      	mov	r3, r8
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	9b00      	ldr	r3, [sp, #0]
 80007fc:	469c      	mov	ip, r3
 80007fe:	4465      	add	r5, ip
 8000800:	001f      	movs	r7, r3
 8000802:	429d      	cmp	r5, r3
 8000804:	419b      	sbcs	r3, r3
 8000806:	425b      	negs	r3, r3
 8000808:	191b      	adds	r3, r3, r4
 800080a:	18c9      	adds	r1, r1, r3
 800080c:	428c      	cmp	r4, r1
 800080e:	d23a      	bcs.n	8000886 <__aeabi_ddiv+0x502>
 8000810:	4288      	cmp	r0, r1
 8000812:	d863      	bhi.n	80008dc <__aeabi_ddiv+0x558>
 8000814:	d060      	beq.n	80008d8 <__aeabi_ddiv+0x554>
 8000816:	4690      	mov	r8, r2
 8000818:	e752      	b.n	80006c0 <__aeabi_ddiv+0x33c>
 800081a:	42aa      	cmp	r2, r5
 800081c:	d900      	bls.n	8000820 <__aeabi_ddiv+0x49c>
 800081e:	e6ea      	b.n	80005f6 <__aeabi_ddiv+0x272>
 8000820:	4643      	mov	r3, r8
 8000822:	07de      	lsls	r6, r3, #31
 8000824:	0858      	lsrs	r0, r3, #1
 8000826:	086b      	lsrs	r3, r5, #1
 8000828:	431e      	orrs	r6, r3
 800082a:	07ed      	lsls	r5, r5, #31
 800082c:	e6ea      	b.n	8000604 <__aeabi_ddiv+0x280>
 800082e:	4648      	mov	r0, r9
 8000830:	f000 ff70 	bl	8001714 <__clzsi2>
 8000834:	0001      	movs	r1, r0
 8000836:	0002      	movs	r2, r0
 8000838:	3115      	adds	r1, #21
 800083a:	3220      	adds	r2, #32
 800083c:	291c      	cmp	r1, #28
 800083e:	dc00      	bgt.n	8000842 <__aeabi_ddiv+0x4be>
 8000840:	e61a      	b.n	8000478 <__aeabi_ddiv+0xf4>
 8000842:	464b      	mov	r3, r9
 8000844:	3808      	subs	r0, #8
 8000846:	4083      	lsls	r3, r0
 8000848:	2500      	movs	r5, #0
 800084a:	4698      	mov	r8, r3
 800084c:	e620      	b.n	8000490 <__aeabi_ddiv+0x10c>
 800084e:	f000 ff61 	bl	8001714 <__clzsi2>
 8000852:	0003      	movs	r3, r0
 8000854:	001a      	movs	r2, r3
 8000856:	3215      	adds	r2, #21
 8000858:	3020      	adds	r0, #32
 800085a:	2a1c      	cmp	r2, #28
 800085c:	dc00      	bgt.n	8000860 <__aeabi_ddiv+0x4dc>
 800085e:	e630      	b.n	80004c2 <__aeabi_ddiv+0x13e>
 8000860:	4654      	mov	r4, sl
 8000862:	3b08      	subs	r3, #8
 8000864:	2200      	movs	r2, #0
 8000866:	409c      	lsls	r4, r3
 8000868:	e635      	b.n	80004d6 <__aeabi_ddiv+0x152>
 800086a:	230f      	movs	r3, #15
 800086c:	402b      	ands	r3, r5
 800086e:	2b04      	cmp	r3, #4
 8000870:	d100      	bne.n	8000874 <__aeabi_ddiv+0x4f0>
 8000872:	e652      	b.n	800051a <__aeabi_ddiv+0x196>
 8000874:	2305      	movs	r3, #5
 8000876:	425b      	negs	r3, r3
 8000878:	42ab      	cmp	r3, r5
 800087a:	419b      	sbcs	r3, r3
 800087c:	3504      	adds	r5, #4
 800087e:	425b      	negs	r3, r3
 8000880:	08ed      	lsrs	r5, r5, #3
 8000882:	4498      	add	r8, r3
 8000884:	e64a      	b.n	800051c <__aeabi_ddiv+0x198>
 8000886:	428c      	cmp	r4, r1
 8000888:	d1c5      	bne.n	8000816 <__aeabi_ddiv+0x492>
 800088a:	42af      	cmp	r7, r5
 800088c:	d9c0      	bls.n	8000810 <__aeabi_ddiv+0x48c>
 800088e:	4690      	mov	r8, r2
 8000890:	e716      	b.n	80006c0 <__aeabi_ddiv+0x33c>
 8000892:	428a      	cmp	r2, r1
 8000894:	d800      	bhi.n	8000898 <__aeabi_ddiv+0x514>
 8000896:	e6ea      	b.n	800066e <__aeabi_ddiv+0x2ea>
 8000898:	1e83      	subs	r3, r0, #2
 800089a:	1909      	adds	r1, r1, r4
 800089c:	e6e7      	b.n	800066e <__aeabi_ddiv+0x2ea>
 800089e:	4a2a      	ldr	r2, [pc, #168]	; (8000948 <__aeabi_ddiv+0x5c4>)
 80008a0:	0028      	movs	r0, r5
 80008a2:	445a      	add	r2, fp
 80008a4:	4643      	mov	r3, r8
 80008a6:	4095      	lsls	r5, r2
 80008a8:	4093      	lsls	r3, r2
 80008aa:	40c8      	lsrs	r0, r1
 80008ac:	1e6a      	subs	r2, r5, #1
 80008ae:	4195      	sbcs	r5, r2
 80008b0:	4644      	mov	r4, r8
 80008b2:	4303      	orrs	r3, r0
 80008b4:	432b      	orrs	r3, r5
 80008b6:	40cc      	lsrs	r4, r1
 80008b8:	075a      	lsls	r2, r3, #29
 80008ba:	d092      	beq.n	80007e2 <__aeabi_ddiv+0x45e>
 80008bc:	220f      	movs	r2, #15
 80008be:	401a      	ands	r2, r3
 80008c0:	2a04      	cmp	r2, #4
 80008c2:	d188      	bne.n	80007d6 <__aeabi_ddiv+0x452>
 80008c4:	e78d      	b.n	80007e2 <__aeabi_ddiv+0x45e>
 80008c6:	0035      	movs	r5, r6
 80008c8:	4281      	cmp	r1, r0
 80008ca:	d000      	beq.n	80008ce <__aeabi_ddiv+0x54a>
 80008cc:	e74b      	b.n	8000766 <__aeabi_ddiv+0x3e2>
 80008ce:	9a00      	ldr	r2, [sp, #0]
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d000      	beq.n	80008d6 <__aeabi_ddiv+0x552>
 80008d4:	e747      	b.n	8000766 <__aeabi_ddiv+0x3e2>
 80008d6:	e618      	b.n	800050a <__aeabi_ddiv+0x186>
 80008d8:	42ae      	cmp	r6, r5
 80008da:	d99c      	bls.n	8000816 <__aeabi_ddiv+0x492>
 80008dc:	2302      	movs	r3, #2
 80008de:	425b      	negs	r3, r3
 80008e0:	469c      	mov	ip, r3
 80008e2:	9b00      	ldr	r3, [sp, #0]
 80008e4:	44e0      	add	r8, ip
 80008e6:	469c      	mov	ip, r3
 80008e8:	4465      	add	r5, ip
 80008ea:	429d      	cmp	r5, r3
 80008ec:	419b      	sbcs	r3, r3
 80008ee:	425b      	negs	r3, r3
 80008f0:	191b      	adds	r3, r3, r4
 80008f2:	18c9      	adds	r1, r1, r3
 80008f4:	e6e4      	b.n	80006c0 <__aeabi_ddiv+0x33c>
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <__aeabi_ddiv+0x5c8>)
 80008f8:	445a      	add	r2, fp
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	dc00      	bgt.n	8000900 <__aeabi_ddiv+0x57c>
 80008fe:	e744      	b.n	800078a <__aeabi_ddiv+0x406>
 8000900:	2301      	movs	r3, #1
 8000902:	2500      	movs	r5, #0
 8000904:	4498      	add	r8, r3
 8000906:	e609      	b.n	800051c <__aeabi_ddiv+0x198>
 8000908:	0765      	lsls	r5, r4, #29
 800090a:	0264      	lsls	r4, r4, #9
 800090c:	0b24      	lsrs	r4, r4, #12
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	431d      	orrs	r5, r3
 8000912:	2300      	movs	r3, #0
 8000914:	e590      	b.n	8000438 <__aeabi_ddiv+0xb4>
 8000916:	9e00      	ldr	r6, [sp, #0]
 8000918:	3d02      	subs	r5, #2
 800091a:	0072      	lsls	r2, r6, #1
 800091c:	42b2      	cmp	r2, r6
 800091e:	41bf      	sbcs	r7, r7
 8000920:	427f      	negs	r7, r7
 8000922:	193c      	adds	r4, r7, r4
 8000924:	1909      	adds	r1, r1, r4
 8000926:	9200      	str	r2, [sp, #0]
 8000928:	e7ce      	b.n	80008c8 <__aeabi_ddiv+0x544>
 800092a:	2480      	movs	r4, #128	; 0x80
 800092c:	4643      	mov	r3, r8
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	431c      	orrs	r4, r3
 8000932:	0324      	lsls	r4, r4, #12
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <__aeabi_ddiv+0x5cc>)
 8000936:	0b24      	lsrs	r4, r4, #12
 8000938:	e57e      	b.n	8000438 <__aeabi_ddiv+0xb4>
 800093a:	9a00      	ldr	r2, [sp, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d3ea      	bcc.n	8000916 <__aeabi_ddiv+0x592>
 8000940:	0035      	movs	r5, r6
 8000942:	e7c4      	b.n	80008ce <__aeabi_ddiv+0x54a>
 8000944:	0000043e 	.word	0x0000043e
 8000948:	0000041e 	.word	0x0000041e
 800094c:	000003ff 	.word	0x000003ff
 8000950:	000007ff 	.word	0x000007ff

08000954 <__aeabi_dmul>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	4657      	mov	r7, sl
 8000958:	464e      	mov	r6, r9
 800095a:	4645      	mov	r5, r8
 800095c:	46de      	mov	lr, fp
 800095e:	b5e0      	push	{r5, r6, r7, lr}
 8000960:	4698      	mov	r8, r3
 8000962:	030c      	lsls	r4, r1, #12
 8000964:	004b      	lsls	r3, r1, #1
 8000966:	0006      	movs	r6, r0
 8000968:	4692      	mov	sl, r2
 800096a:	b087      	sub	sp, #28
 800096c:	0b24      	lsrs	r4, r4, #12
 800096e:	0d5b      	lsrs	r3, r3, #21
 8000970:	0fcf      	lsrs	r7, r1, #31
 8000972:	2b00      	cmp	r3, #0
 8000974:	d06c      	beq.n	8000a50 <__aeabi_dmul+0xfc>
 8000976:	4add      	ldr	r2, [pc, #884]	; (8000cec <__aeabi_dmul+0x398>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d100      	bne.n	800097e <__aeabi_dmul+0x2a>
 800097c:	e086      	b.n	8000a8c <__aeabi_dmul+0x138>
 800097e:	0f42      	lsrs	r2, r0, #29
 8000980:	00e4      	lsls	r4, r4, #3
 8000982:	4314      	orrs	r4, r2
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0412      	lsls	r2, r2, #16
 8000988:	4314      	orrs	r4, r2
 800098a:	4ad9      	ldr	r2, [pc, #868]	; (8000cf0 <__aeabi_dmul+0x39c>)
 800098c:	00c5      	lsls	r5, r0, #3
 800098e:	4694      	mov	ip, r2
 8000990:	4463      	add	r3, ip
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2300      	movs	r3, #0
 8000996:	4699      	mov	r9, r3
 8000998:	469b      	mov	fp, r3
 800099a:	4643      	mov	r3, r8
 800099c:	4642      	mov	r2, r8
 800099e:	031e      	lsls	r6, r3, #12
 80009a0:	0fd2      	lsrs	r2, r2, #31
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4650      	mov	r0, sl
 80009a6:	4690      	mov	r8, r2
 80009a8:	0b36      	lsrs	r6, r6, #12
 80009aa:	0d5b      	lsrs	r3, r3, #21
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dmul+0x5c>
 80009ae:	e078      	b.n	8000aa2 <__aeabi_dmul+0x14e>
 80009b0:	4ace      	ldr	r2, [pc, #824]	; (8000cec <__aeabi_dmul+0x398>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d01d      	beq.n	80009f2 <__aeabi_dmul+0x9e>
 80009b6:	49ce      	ldr	r1, [pc, #824]	; (8000cf0 <__aeabi_dmul+0x39c>)
 80009b8:	0f42      	lsrs	r2, r0, #29
 80009ba:	468c      	mov	ip, r1
 80009bc:	9900      	ldr	r1, [sp, #0]
 80009be:	4463      	add	r3, ip
 80009c0:	00f6      	lsls	r6, r6, #3
 80009c2:	468c      	mov	ip, r1
 80009c4:	4316      	orrs	r6, r2
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	449c      	add	ip, r3
 80009ca:	0412      	lsls	r2, r2, #16
 80009cc:	4663      	mov	r3, ip
 80009ce:	4316      	orrs	r6, r2
 80009d0:	00c2      	lsls	r2, r0, #3
 80009d2:	2000      	movs	r0, #0
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	9900      	ldr	r1, [sp, #0]
 80009d8:	4643      	mov	r3, r8
 80009da:	3101      	adds	r1, #1
 80009dc:	468c      	mov	ip, r1
 80009de:	4649      	mov	r1, r9
 80009e0:	407b      	eors	r3, r7
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	290f      	cmp	r1, #15
 80009e6:	d900      	bls.n	80009ea <__aeabi_dmul+0x96>
 80009e8:	e07e      	b.n	8000ae8 <__aeabi_dmul+0x194>
 80009ea:	4bc2      	ldr	r3, [pc, #776]	; (8000cf4 <__aeabi_dmul+0x3a0>)
 80009ec:	0089      	lsls	r1, r1, #2
 80009ee:	5859      	ldr	r1, [r3, r1]
 80009f0:	468f      	mov	pc, r1
 80009f2:	4652      	mov	r2, sl
 80009f4:	9b00      	ldr	r3, [sp, #0]
 80009f6:	4332      	orrs	r2, r6
 80009f8:	d000      	beq.n	80009fc <__aeabi_dmul+0xa8>
 80009fa:	e156      	b.n	8000caa <__aeabi_dmul+0x356>
 80009fc:	49bb      	ldr	r1, [pc, #748]	; (8000cec <__aeabi_dmul+0x398>)
 80009fe:	2600      	movs	r6, #0
 8000a00:	468c      	mov	ip, r1
 8000a02:	4463      	add	r3, ip
 8000a04:	4649      	mov	r1, r9
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2302      	movs	r3, #2
 8000a0a:	4319      	orrs	r1, r3
 8000a0c:	4689      	mov	r9, r1
 8000a0e:	2002      	movs	r0, #2
 8000a10:	e7e1      	b.n	80009d6 <__aeabi_dmul+0x82>
 8000a12:	4643      	mov	r3, r8
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	0034      	movs	r4, r6
 8000a18:	0015      	movs	r5, r2
 8000a1a:	4683      	mov	fp, r0
 8000a1c:	465b      	mov	r3, fp
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d05e      	beq.n	8000ae0 <__aeabi_dmul+0x18c>
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dmul+0xd4>
 8000a26:	e1f3      	b.n	8000e10 <__aeabi_dmul+0x4bc>
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_dmul+0xda>
 8000a2c:	e118      	b.n	8000c60 <__aeabi_dmul+0x30c>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2400      	movs	r4, #0
 8000a32:	2500      	movs	r5, #0
 8000a34:	9b01      	ldr	r3, [sp, #4]
 8000a36:	0512      	lsls	r2, r2, #20
 8000a38:	4322      	orrs	r2, r4
 8000a3a:	07db      	lsls	r3, r3, #31
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	0028      	movs	r0, r5
 8000a40:	0011      	movs	r1, r2
 8000a42:	b007      	add	sp, #28
 8000a44:	bcf0      	pop	{r4, r5, r6, r7}
 8000a46:	46bb      	mov	fp, r7
 8000a48:	46b2      	mov	sl, r6
 8000a4a:	46a9      	mov	r9, r5
 8000a4c:	46a0      	mov	r8, r4
 8000a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a50:	0025      	movs	r5, r4
 8000a52:	4305      	orrs	r5, r0
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dmul+0x104>
 8000a56:	e141      	b.n	8000cdc <__aeabi_dmul+0x388>
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dmul+0x10a>
 8000a5c:	e1ad      	b.n	8000dba <__aeabi_dmul+0x466>
 8000a5e:	0020      	movs	r0, r4
 8000a60:	f000 fe58 	bl	8001714 <__clzsi2>
 8000a64:	0001      	movs	r1, r0
 8000a66:	0002      	movs	r2, r0
 8000a68:	390b      	subs	r1, #11
 8000a6a:	231d      	movs	r3, #29
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	1a5b      	subs	r3, r3, r1
 8000a70:	0031      	movs	r1, r6
 8000a72:	0035      	movs	r5, r6
 8000a74:	3808      	subs	r0, #8
 8000a76:	4084      	lsls	r4, r0
 8000a78:	40d9      	lsrs	r1, r3
 8000a7a:	4085      	lsls	r5, r0
 8000a7c:	430c      	orrs	r4, r1
 8000a7e:	489e      	ldr	r0, [pc, #632]	; (8000cf8 <__aeabi_dmul+0x3a4>)
 8000a80:	1a83      	subs	r3, r0, r2
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2300      	movs	r3, #0
 8000a86:	4699      	mov	r9, r3
 8000a88:	469b      	mov	fp, r3
 8000a8a:	e786      	b.n	800099a <__aeabi_dmul+0x46>
 8000a8c:	0005      	movs	r5, r0
 8000a8e:	4325      	orrs	r5, r4
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dmul+0x140>
 8000a92:	e11c      	b.n	8000cce <__aeabi_dmul+0x37a>
 8000a94:	2208      	movs	r2, #8
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	4691      	mov	r9, r2
 8000a9e:	469b      	mov	fp, r3
 8000aa0:	e77b      	b.n	800099a <__aeabi_dmul+0x46>
 8000aa2:	4652      	mov	r2, sl
 8000aa4:	4332      	orrs	r2, r6
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dmul+0x156>
 8000aa8:	e10a      	b.n	8000cc0 <__aeabi_dmul+0x36c>
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dmul+0x15c>
 8000aae:	e176      	b.n	8000d9e <__aeabi_dmul+0x44a>
 8000ab0:	0030      	movs	r0, r6
 8000ab2:	f000 fe2f 	bl	8001714 <__clzsi2>
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	3a0b      	subs	r2, #11
 8000aba:	231d      	movs	r3, #29
 8000abc:	0001      	movs	r1, r0
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	4652      	mov	r2, sl
 8000ac2:	3908      	subs	r1, #8
 8000ac4:	40da      	lsrs	r2, r3
 8000ac6:	408e      	lsls	r6, r1
 8000ac8:	4316      	orrs	r6, r2
 8000aca:	4652      	mov	r2, sl
 8000acc:	408a      	lsls	r2, r1
 8000ace:	9b00      	ldr	r3, [sp, #0]
 8000ad0:	4989      	ldr	r1, [pc, #548]	; (8000cf8 <__aeabi_dmul+0x3a4>)
 8000ad2:	1a18      	subs	r0, r3, r0
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4463      	add	r3, ip
 8000ada:	2000      	movs	r0, #0
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	e77a      	b.n	80009d6 <__aeabi_dmul+0x82>
 8000ae0:	2400      	movs	r4, #0
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	4a81      	ldr	r2, [pc, #516]	; (8000cec <__aeabi_dmul+0x398>)
 8000ae6:	e7a5      	b.n	8000a34 <__aeabi_dmul+0xe0>
 8000ae8:	0c2f      	lsrs	r7, r5, #16
 8000aea:	042d      	lsls	r5, r5, #16
 8000aec:	0c2d      	lsrs	r5, r5, #16
 8000aee:	002b      	movs	r3, r5
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	0412      	lsls	r2, r2, #16
 8000af4:	0c12      	lsrs	r2, r2, #16
 8000af6:	4353      	muls	r3, r2
 8000af8:	4698      	mov	r8, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	0028      	movs	r0, r5
 8000afe:	437b      	muls	r3, r7
 8000b00:	4699      	mov	r9, r3
 8000b02:	4348      	muls	r0, r1
 8000b04:	4448      	add	r0, r9
 8000b06:	4683      	mov	fp, r0
 8000b08:	4640      	mov	r0, r8
 8000b0a:	000b      	movs	r3, r1
 8000b0c:	0c00      	lsrs	r0, r0, #16
 8000b0e:	4682      	mov	sl, r0
 8000b10:	4658      	mov	r0, fp
 8000b12:	437b      	muls	r3, r7
 8000b14:	4450      	add	r0, sl
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	4581      	cmp	r9, r0
 8000b1a:	d906      	bls.n	8000b2a <__aeabi_dmul+0x1d6>
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	4699      	mov	r9, r3
 8000b24:	44ca      	add	sl, r9
 8000b26:	4653      	mov	r3, sl
 8000b28:	9302      	str	r3, [sp, #8]
 8000b2a:	0c03      	lsrs	r3, r0, #16
 8000b2c:	469b      	mov	fp, r3
 8000b2e:	4643      	mov	r3, r8
 8000b30:	041b      	lsls	r3, r3, #16
 8000b32:	0400      	lsls	r0, r0, #16
 8000b34:	0c1b      	lsrs	r3, r3, #16
 8000b36:	4698      	mov	r8, r3
 8000b38:	0003      	movs	r3, r0
 8000b3a:	4443      	add	r3, r8
 8000b3c:	9304      	str	r3, [sp, #16]
 8000b3e:	0c33      	lsrs	r3, r6, #16
 8000b40:	4699      	mov	r9, r3
 8000b42:	002b      	movs	r3, r5
 8000b44:	0436      	lsls	r6, r6, #16
 8000b46:	0c36      	lsrs	r6, r6, #16
 8000b48:	4373      	muls	r3, r6
 8000b4a:	4698      	mov	r8, r3
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	437b      	muls	r3, r7
 8000b50:	469a      	mov	sl, r3
 8000b52:	464b      	mov	r3, r9
 8000b54:	435d      	muls	r5, r3
 8000b56:	435f      	muls	r7, r3
 8000b58:	4643      	mov	r3, r8
 8000b5a:	4455      	add	r5, sl
 8000b5c:	0c18      	lsrs	r0, r3, #16
 8000b5e:	1940      	adds	r0, r0, r5
 8000b60:	4582      	cmp	sl, r0
 8000b62:	d903      	bls.n	8000b6c <__aeabi_dmul+0x218>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	025b      	lsls	r3, r3, #9
 8000b68:	469a      	mov	sl, r3
 8000b6a:	4457      	add	r7, sl
 8000b6c:	0c05      	lsrs	r5, r0, #16
 8000b6e:	19eb      	adds	r3, r5, r7
 8000b70:	9305      	str	r3, [sp, #20]
 8000b72:	4643      	mov	r3, r8
 8000b74:	041d      	lsls	r5, r3, #16
 8000b76:	0c2d      	lsrs	r5, r5, #16
 8000b78:	0400      	lsls	r0, r0, #16
 8000b7a:	1940      	adds	r0, r0, r5
 8000b7c:	0c25      	lsrs	r5, r4, #16
 8000b7e:	0424      	lsls	r4, r4, #16
 8000b80:	0c24      	lsrs	r4, r4, #16
 8000b82:	0027      	movs	r7, r4
 8000b84:	4357      	muls	r7, r2
 8000b86:	436a      	muls	r2, r5
 8000b88:	4690      	mov	r8, r2
 8000b8a:	002a      	movs	r2, r5
 8000b8c:	0c3b      	lsrs	r3, r7, #16
 8000b8e:	469a      	mov	sl, r3
 8000b90:	434a      	muls	r2, r1
 8000b92:	4361      	muls	r1, r4
 8000b94:	4441      	add	r1, r8
 8000b96:	4451      	add	r1, sl
 8000b98:	4483      	add	fp, r0
 8000b9a:	4588      	cmp	r8, r1
 8000b9c:	d903      	bls.n	8000ba6 <__aeabi_dmul+0x252>
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	025b      	lsls	r3, r3, #9
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	4442      	add	r2, r8
 8000ba6:	043f      	lsls	r7, r7, #16
 8000ba8:	0c0b      	lsrs	r3, r1, #16
 8000baa:	0c3f      	lsrs	r7, r7, #16
 8000bac:	0409      	lsls	r1, r1, #16
 8000bae:	19c9      	adds	r1, r1, r7
 8000bb0:	0027      	movs	r7, r4
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	464b      	mov	r3, r9
 8000bb6:	4377      	muls	r7, r6
 8000bb8:	435c      	muls	r4, r3
 8000bba:	436e      	muls	r6, r5
 8000bbc:	435d      	muls	r5, r3
 8000bbe:	0c3b      	lsrs	r3, r7, #16
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	19a4      	adds	r4, r4, r6
 8000bc4:	444c      	add	r4, r9
 8000bc6:	4442      	add	r2, r8
 8000bc8:	9503      	str	r5, [sp, #12]
 8000bca:	42a6      	cmp	r6, r4
 8000bcc:	d904      	bls.n	8000bd8 <__aeabi_dmul+0x284>
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	4698      	mov	r8, r3
 8000bd4:	4445      	add	r5, r8
 8000bd6:	9503      	str	r5, [sp, #12]
 8000bd8:	9b02      	ldr	r3, [sp, #8]
 8000bda:	043f      	lsls	r7, r7, #16
 8000bdc:	445b      	add	r3, fp
 8000bde:	001e      	movs	r6, r3
 8000be0:	4283      	cmp	r3, r0
 8000be2:	4180      	sbcs	r0, r0
 8000be4:	0423      	lsls	r3, r4, #16
 8000be6:	4698      	mov	r8, r3
 8000be8:	9b05      	ldr	r3, [sp, #20]
 8000bea:	0c3f      	lsrs	r7, r7, #16
 8000bec:	4447      	add	r7, r8
 8000bee:	4698      	mov	r8, r3
 8000bf0:	1876      	adds	r6, r6, r1
 8000bf2:	428e      	cmp	r6, r1
 8000bf4:	4189      	sbcs	r1, r1
 8000bf6:	4447      	add	r7, r8
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	183d      	adds	r5, r7, r0
 8000bfc:	46a8      	mov	r8, r5
 8000bfe:	4693      	mov	fp, r2
 8000c00:	4249      	negs	r1, r1
 8000c02:	468a      	mov	sl, r1
 8000c04:	44c3      	add	fp, r8
 8000c06:	429f      	cmp	r7, r3
 8000c08:	41bf      	sbcs	r7, r7
 8000c0a:	4580      	cmp	r8, r0
 8000c0c:	4180      	sbcs	r0, r0
 8000c0e:	9b03      	ldr	r3, [sp, #12]
 8000c10:	44da      	add	sl, fp
 8000c12:	4698      	mov	r8, r3
 8000c14:	4653      	mov	r3, sl
 8000c16:	4240      	negs	r0, r0
 8000c18:	427f      	negs	r7, r7
 8000c1a:	4307      	orrs	r7, r0
 8000c1c:	0c24      	lsrs	r4, r4, #16
 8000c1e:	4593      	cmp	fp, r2
 8000c20:	4192      	sbcs	r2, r2
 8000c22:	458a      	cmp	sl, r1
 8000c24:	4189      	sbcs	r1, r1
 8000c26:	193f      	adds	r7, r7, r4
 8000c28:	0ddc      	lsrs	r4, r3, #23
 8000c2a:	9b04      	ldr	r3, [sp, #16]
 8000c2c:	0275      	lsls	r5, r6, #9
 8000c2e:	431d      	orrs	r5, r3
 8000c30:	1e68      	subs	r0, r5, #1
 8000c32:	4185      	sbcs	r5, r0
 8000c34:	4653      	mov	r3, sl
 8000c36:	4252      	negs	r2, r2
 8000c38:	4249      	negs	r1, r1
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	18bf      	adds	r7, r7, r2
 8000c3e:	4447      	add	r7, r8
 8000c40:	0df6      	lsrs	r6, r6, #23
 8000c42:	027f      	lsls	r7, r7, #9
 8000c44:	4335      	orrs	r5, r6
 8000c46:	025a      	lsls	r2, r3, #9
 8000c48:	433c      	orrs	r4, r7
 8000c4a:	4315      	orrs	r5, r2
 8000c4c:	01fb      	lsls	r3, r7, #7
 8000c4e:	d400      	bmi.n	8000c52 <__aeabi_dmul+0x2fe>
 8000c50:	e0c1      	b.n	8000dd6 <__aeabi_dmul+0x482>
 8000c52:	2101      	movs	r1, #1
 8000c54:	086a      	lsrs	r2, r5, #1
 8000c56:	400d      	ands	r5, r1
 8000c58:	4315      	orrs	r5, r2
 8000c5a:	07e2      	lsls	r2, r4, #31
 8000c5c:	4315      	orrs	r5, r2
 8000c5e:	0864      	lsrs	r4, r4, #1
 8000c60:	4926      	ldr	r1, [pc, #152]	; (8000cfc <__aeabi_dmul+0x3a8>)
 8000c62:	4461      	add	r1, ip
 8000c64:	2900      	cmp	r1, #0
 8000c66:	dd56      	ble.n	8000d16 <__aeabi_dmul+0x3c2>
 8000c68:	076b      	lsls	r3, r5, #29
 8000c6a:	d009      	beq.n	8000c80 <__aeabi_dmul+0x32c>
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	402a      	ands	r2, r5
 8000c70:	2a04      	cmp	r2, #4
 8000c72:	d005      	beq.n	8000c80 <__aeabi_dmul+0x32c>
 8000c74:	1d2a      	adds	r2, r5, #4
 8000c76:	42aa      	cmp	r2, r5
 8000c78:	41ad      	sbcs	r5, r5
 8000c7a:	426d      	negs	r5, r5
 8000c7c:	1964      	adds	r4, r4, r5
 8000c7e:	0015      	movs	r5, r2
 8000c80:	01e3      	lsls	r3, r4, #7
 8000c82:	d504      	bpl.n	8000c8e <__aeabi_dmul+0x33a>
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <__aeabi_dmul+0x3ac>)
 8000c88:	00c9      	lsls	r1, r1, #3
 8000c8a:	4014      	ands	r4, r2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <__aeabi_dmul+0x3b0>)
 8000c90:	4291      	cmp	r1, r2
 8000c92:	dd00      	ble.n	8000c96 <__aeabi_dmul+0x342>
 8000c94:	e724      	b.n	8000ae0 <__aeabi_dmul+0x18c>
 8000c96:	0762      	lsls	r2, r4, #29
 8000c98:	08ed      	lsrs	r5, r5, #3
 8000c9a:	0264      	lsls	r4, r4, #9
 8000c9c:	0549      	lsls	r1, r1, #21
 8000c9e:	4315      	orrs	r5, r2
 8000ca0:	0b24      	lsrs	r4, r4, #12
 8000ca2:	0d4a      	lsrs	r2, r1, #21
 8000ca4:	e6c6      	b.n	8000a34 <__aeabi_dmul+0xe0>
 8000ca6:	9701      	str	r7, [sp, #4]
 8000ca8:	e6b8      	b.n	8000a1c <__aeabi_dmul+0xc8>
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <__aeabi_dmul+0x398>)
 8000cac:	2003      	movs	r0, #3
 8000cae:	4694      	mov	ip, r2
 8000cb0:	4463      	add	r3, ip
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	4691      	mov	r9, r2
 8000cbc:	4652      	mov	r2, sl
 8000cbe:	e68a      	b.n	80009d6 <__aeabi_dmul+0x82>
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4319      	orrs	r1, r3
 8000cc6:	4689      	mov	r9, r1
 8000cc8:	2600      	movs	r6, #0
 8000cca:	2001      	movs	r0, #1
 8000ccc:	e683      	b.n	80009d6 <__aeabi_dmul+0x82>
 8000cce:	220c      	movs	r2, #12
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	0005      	movs	r5, r0
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e65e      	b.n	800099a <__aeabi_dmul+0x46>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	4699      	mov	r9, r3
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	469b      	mov	fp, r3
 8000cea:	e656      	b.n	800099a <__aeabi_dmul+0x46>
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	fffffc01 	.word	0xfffffc01
 8000cf4:	080073e0 	.word	0x080073e0
 8000cf8:	fffffc0d 	.word	0xfffffc0d
 8000cfc:	000003ff 	.word	0x000003ff
 8000d00:	feffffff 	.word	0xfeffffff
 8000d04:	000007fe 	.word	0x000007fe
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2480      	movs	r4, #128	; 0x80
 8000d0c:	2500      	movs	r5, #0
 8000d0e:	4a44      	ldr	r2, [pc, #272]	; (8000e20 <__aeabi_dmul+0x4cc>)
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	0324      	lsls	r4, r4, #12
 8000d14:	e68e      	b.n	8000a34 <__aeabi_dmul+0xe0>
 8000d16:	2001      	movs	r0, #1
 8000d18:	1a40      	subs	r0, r0, r1
 8000d1a:	2838      	cmp	r0, #56	; 0x38
 8000d1c:	dd00      	ble.n	8000d20 <__aeabi_dmul+0x3cc>
 8000d1e:	e686      	b.n	8000a2e <__aeabi_dmul+0xda>
 8000d20:	281f      	cmp	r0, #31
 8000d22:	dd5b      	ble.n	8000ddc <__aeabi_dmul+0x488>
 8000d24:	221f      	movs	r2, #31
 8000d26:	0023      	movs	r3, r4
 8000d28:	4252      	negs	r2, r2
 8000d2a:	1a51      	subs	r1, r2, r1
 8000d2c:	40cb      	lsrs	r3, r1
 8000d2e:	0019      	movs	r1, r3
 8000d30:	2820      	cmp	r0, #32
 8000d32:	d003      	beq.n	8000d3c <__aeabi_dmul+0x3e8>
 8000d34:	4a3b      	ldr	r2, [pc, #236]	; (8000e24 <__aeabi_dmul+0x4d0>)
 8000d36:	4462      	add	r2, ip
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	4325      	orrs	r5, r4
 8000d3c:	1e6a      	subs	r2, r5, #1
 8000d3e:	4195      	sbcs	r5, r2
 8000d40:	002a      	movs	r2, r5
 8000d42:	430a      	orrs	r2, r1
 8000d44:	2107      	movs	r1, #7
 8000d46:	000d      	movs	r5, r1
 8000d48:	2400      	movs	r4, #0
 8000d4a:	4015      	ands	r5, r2
 8000d4c:	4211      	tst	r1, r2
 8000d4e:	d05b      	beq.n	8000e08 <__aeabi_dmul+0x4b4>
 8000d50:	210f      	movs	r1, #15
 8000d52:	2400      	movs	r4, #0
 8000d54:	4011      	ands	r1, r2
 8000d56:	2904      	cmp	r1, #4
 8000d58:	d053      	beq.n	8000e02 <__aeabi_dmul+0x4ae>
 8000d5a:	1d11      	adds	r1, r2, #4
 8000d5c:	4291      	cmp	r1, r2
 8000d5e:	4192      	sbcs	r2, r2
 8000d60:	4252      	negs	r2, r2
 8000d62:	18a4      	adds	r4, r4, r2
 8000d64:	000a      	movs	r2, r1
 8000d66:	0223      	lsls	r3, r4, #8
 8000d68:	d54b      	bpl.n	8000e02 <__aeabi_dmul+0x4ae>
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2400      	movs	r4, #0
 8000d6e:	2500      	movs	r5, #0
 8000d70:	e660      	b.n	8000a34 <__aeabi_dmul+0xe0>
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	031b      	lsls	r3, r3, #12
 8000d76:	421c      	tst	r4, r3
 8000d78:	d009      	beq.n	8000d8e <__aeabi_dmul+0x43a>
 8000d7a:	421e      	tst	r6, r3
 8000d7c:	d107      	bne.n	8000d8e <__aeabi_dmul+0x43a>
 8000d7e:	4333      	orrs	r3, r6
 8000d80:	031c      	lsls	r4, r3, #12
 8000d82:	4643      	mov	r3, r8
 8000d84:	0015      	movs	r5, r2
 8000d86:	0b24      	lsrs	r4, r4, #12
 8000d88:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <__aeabi_dmul+0x4cc>)
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	e652      	b.n	8000a34 <__aeabi_dmul+0xe0>
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	0312      	lsls	r2, r2, #12
 8000d92:	4314      	orrs	r4, r2
 8000d94:	0324      	lsls	r4, r4, #12
 8000d96:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <__aeabi_dmul+0x4cc>)
 8000d98:	0b24      	lsrs	r4, r4, #12
 8000d9a:	9701      	str	r7, [sp, #4]
 8000d9c:	e64a      	b.n	8000a34 <__aeabi_dmul+0xe0>
 8000d9e:	f000 fcb9 	bl	8001714 <__clzsi2>
 8000da2:	0003      	movs	r3, r0
 8000da4:	001a      	movs	r2, r3
 8000da6:	3215      	adds	r2, #21
 8000da8:	3020      	adds	r0, #32
 8000daa:	2a1c      	cmp	r2, #28
 8000dac:	dc00      	bgt.n	8000db0 <__aeabi_dmul+0x45c>
 8000dae:	e684      	b.n	8000aba <__aeabi_dmul+0x166>
 8000db0:	4656      	mov	r6, sl
 8000db2:	3b08      	subs	r3, #8
 8000db4:	2200      	movs	r2, #0
 8000db6:	409e      	lsls	r6, r3
 8000db8:	e689      	b.n	8000ace <__aeabi_dmul+0x17a>
 8000dba:	f000 fcab 	bl	8001714 <__clzsi2>
 8000dbe:	0001      	movs	r1, r0
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	3115      	adds	r1, #21
 8000dc4:	3220      	adds	r2, #32
 8000dc6:	291c      	cmp	r1, #28
 8000dc8:	dc00      	bgt.n	8000dcc <__aeabi_dmul+0x478>
 8000dca:	e64e      	b.n	8000a6a <__aeabi_dmul+0x116>
 8000dcc:	0034      	movs	r4, r6
 8000dce:	3808      	subs	r0, #8
 8000dd0:	2500      	movs	r5, #0
 8000dd2:	4084      	lsls	r4, r0
 8000dd4:	e653      	b.n	8000a7e <__aeabi_dmul+0x12a>
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	469c      	mov	ip, r3
 8000dda:	e741      	b.n	8000c60 <__aeabi_dmul+0x30c>
 8000ddc:	4912      	ldr	r1, [pc, #72]	; (8000e28 <__aeabi_dmul+0x4d4>)
 8000dde:	0022      	movs	r2, r4
 8000de0:	4461      	add	r1, ip
 8000de2:	002e      	movs	r6, r5
 8000de4:	408d      	lsls	r5, r1
 8000de6:	408a      	lsls	r2, r1
 8000de8:	40c6      	lsrs	r6, r0
 8000dea:	1e69      	subs	r1, r5, #1
 8000dec:	418d      	sbcs	r5, r1
 8000dee:	4332      	orrs	r2, r6
 8000df0:	432a      	orrs	r2, r5
 8000df2:	40c4      	lsrs	r4, r0
 8000df4:	0753      	lsls	r3, r2, #29
 8000df6:	d0b6      	beq.n	8000d66 <__aeabi_dmul+0x412>
 8000df8:	210f      	movs	r1, #15
 8000dfa:	4011      	ands	r1, r2
 8000dfc:	2904      	cmp	r1, #4
 8000dfe:	d1ac      	bne.n	8000d5a <__aeabi_dmul+0x406>
 8000e00:	e7b1      	b.n	8000d66 <__aeabi_dmul+0x412>
 8000e02:	0765      	lsls	r5, r4, #29
 8000e04:	0264      	lsls	r4, r4, #9
 8000e06:	0b24      	lsrs	r4, r4, #12
 8000e08:	08d2      	lsrs	r2, r2, #3
 8000e0a:	4315      	orrs	r5, r2
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	e611      	b.n	8000a34 <__aeabi_dmul+0xe0>
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	0312      	lsls	r2, r2, #12
 8000e14:	4314      	orrs	r4, r2
 8000e16:	0324      	lsls	r4, r4, #12
 8000e18:	4a01      	ldr	r2, [pc, #4]	; (8000e20 <__aeabi_dmul+0x4cc>)
 8000e1a:	0b24      	lsrs	r4, r4, #12
 8000e1c:	e60a      	b.n	8000a34 <__aeabi_dmul+0xe0>
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	000007ff 	.word	0x000007ff
 8000e24:	0000043e 	.word	0x0000043e
 8000e28:	0000041e 	.word	0x0000041e

08000e2c <__aeabi_dsub>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	4657      	mov	r7, sl
 8000e30:	464e      	mov	r6, r9
 8000e32:	4645      	mov	r5, r8
 8000e34:	46de      	mov	lr, fp
 8000e36:	0004      	movs	r4, r0
 8000e38:	b5e0      	push	{r5, r6, r7, lr}
 8000e3a:	001f      	movs	r7, r3
 8000e3c:	0010      	movs	r0, r2
 8000e3e:	030b      	lsls	r3, r1, #12
 8000e40:	0f62      	lsrs	r2, r4, #29
 8000e42:	004e      	lsls	r6, r1, #1
 8000e44:	0fcd      	lsrs	r5, r1, #31
 8000e46:	0a5b      	lsrs	r3, r3, #9
 8000e48:	0339      	lsls	r1, r7, #12
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	0a49      	lsrs	r1, r1, #9
 8000e4e:	00e2      	lsls	r2, r4, #3
 8000e50:	0f44      	lsrs	r4, r0, #29
 8000e52:	4321      	orrs	r1, r4
 8000e54:	4cc2      	ldr	r4, [pc, #776]	; (8001160 <__aeabi_dsub+0x334>)
 8000e56:	4691      	mov	r9, r2
 8000e58:	4692      	mov	sl, r2
 8000e5a:	00c0      	lsls	r0, r0, #3
 8000e5c:	007a      	lsls	r2, r7, #1
 8000e5e:	4680      	mov	r8, r0
 8000e60:	0d76      	lsrs	r6, r6, #21
 8000e62:	0d52      	lsrs	r2, r2, #21
 8000e64:	0fff      	lsrs	r7, r7, #31
 8000e66:	42a2      	cmp	r2, r4
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dsub+0x40>
 8000e6a:	e0b4      	b.n	8000fd6 <__aeabi_dsub+0x1aa>
 8000e6c:	2401      	movs	r4, #1
 8000e6e:	4067      	eors	r7, r4
 8000e70:	46bb      	mov	fp, r7
 8000e72:	42bd      	cmp	r5, r7
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dsub+0x4c>
 8000e76:	e088      	b.n	8000f8a <__aeabi_dsub+0x15e>
 8000e78:	1ab4      	subs	r4, r6, r2
 8000e7a:	46a4      	mov	ip, r4
 8000e7c:	2c00      	cmp	r4, #0
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_dsub+0x56>
 8000e80:	e0b2      	b.n	8000fe8 <__aeabi_dsub+0x1bc>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dsub+0x5c>
 8000e86:	e0c5      	b.n	8001014 <__aeabi_dsub+0x1e8>
 8000e88:	4ab5      	ldr	r2, [pc, #724]	; (8001160 <__aeabi_dsub+0x334>)
 8000e8a:	4296      	cmp	r6, r2
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dsub+0x64>
 8000e8e:	e28b      	b.n	80013a8 <__aeabi_dsub+0x57c>
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	0412      	lsls	r2, r2, #16
 8000e94:	4311      	orrs	r1, r2
 8000e96:	4662      	mov	r2, ip
 8000e98:	2a38      	cmp	r2, #56	; 0x38
 8000e9a:	dd00      	ble.n	8000e9e <__aeabi_dsub+0x72>
 8000e9c:	e1a1      	b.n	80011e2 <__aeabi_dsub+0x3b6>
 8000e9e:	2a1f      	cmp	r2, #31
 8000ea0:	dd00      	ble.n	8000ea4 <__aeabi_dsub+0x78>
 8000ea2:	e216      	b.n	80012d2 <__aeabi_dsub+0x4a6>
 8000ea4:	2720      	movs	r7, #32
 8000ea6:	000c      	movs	r4, r1
 8000ea8:	1abf      	subs	r7, r7, r2
 8000eaa:	40bc      	lsls	r4, r7
 8000eac:	0002      	movs	r2, r0
 8000eae:	46a0      	mov	r8, r4
 8000eb0:	4664      	mov	r4, ip
 8000eb2:	40b8      	lsls	r0, r7
 8000eb4:	40e2      	lsrs	r2, r4
 8000eb6:	4644      	mov	r4, r8
 8000eb8:	4314      	orrs	r4, r2
 8000eba:	0002      	movs	r2, r0
 8000ebc:	1e50      	subs	r0, r2, #1
 8000ebe:	4182      	sbcs	r2, r0
 8000ec0:	4660      	mov	r0, ip
 8000ec2:	40c1      	lsrs	r1, r0
 8000ec4:	4322      	orrs	r2, r4
 8000ec6:	1a5b      	subs	r3, r3, r1
 8000ec8:	4649      	mov	r1, r9
 8000eca:	1a8c      	subs	r4, r1, r2
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	4192      	sbcs	r2, r2
 8000ed0:	4252      	negs	r2, r2
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	d400      	bmi.n	8000ede <__aeabi_dsub+0xb2>
 8000edc:	e117      	b.n	800110e <__aeabi_dsub+0x2e2>
 8000ede:	4643      	mov	r3, r8
 8000ee0:	025b      	lsls	r3, r3, #9
 8000ee2:	0a5b      	lsrs	r3, r3, #9
 8000ee4:	4698      	mov	r8, r3
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_dsub+0xc2>
 8000eec:	e16c      	b.n	80011c8 <__aeabi_dsub+0x39c>
 8000eee:	4640      	mov	r0, r8
 8000ef0:	f000 fc10 	bl	8001714 <__clzsi2>
 8000ef4:	0002      	movs	r2, r0
 8000ef6:	3a08      	subs	r2, #8
 8000ef8:	2120      	movs	r1, #32
 8000efa:	0020      	movs	r0, r4
 8000efc:	4643      	mov	r3, r8
 8000efe:	1a89      	subs	r1, r1, r2
 8000f00:	4093      	lsls	r3, r2
 8000f02:	40c8      	lsrs	r0, r1
 8000f04:	4094      	lsls	r4, r2
 8000f06:	4303      	orrs	r3, r0
 8000f08:	4296      	cmp	r6, r2
 8000f0a:	dd00      	ble.n	8000f0e <__aeabi_dsub+0xe2>
 8000f0c:	e157      	b.n	80011be <__aeabi_dsub+0x392>
 8000f0e:	1b96      	subs	r6, r2, r6
 8000f10:	1c71      	adds	r1, r6, #1
 8000f12:	291f      	cmp	r1, #31
 8000f14:	dd00      	ble.n	8000f18 <__aeabi_dsub+0xec>
 8000f16:	e1cb      	b.n	80012b0 <__aeabi_dsub+0x484>
 8000f18:	2220      	movs	r2, #32
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	0026      	movs	r6, r4
 8000f1e:	1a52      	subs	r2, r2, r1
 8000f20:	4094      	lsls	r4, r2
 8000f22:	4090      	lsls	r0, r2
 8000f24:	40ce      	lsrs	r6, r1
 8000f26:	40cb      	lsrs	r3, r1
 8000f28:	1e62      	subs	r2, r4, #1
 8000f2a:	4194      	sbcs	r4, r2
 8000f2c:	4330      	orrs	r0, r6
 8000f2e:	4698      	mov	r8, r3
 8000f30:	2600      	movs	r6, #0
 8000f32:	4304      	orrs	r4, r0
 8000f34:	0763      	lsls	r3, r4, #29
 8000f36:	d009      	beq.n	8000f4c <__aeabi_dsub+0x120>
 8000f38:	230f      	movs	r3, #15
 8000f3a:	4023      	ands	r3, r4
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d005      	beq.n	8000f4c <__aeabi_dsub+0x120>
 8000f40:	1d23      	adds	r3, r4, #4
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	41a4      	sbcs	r4, r4
 8000f46:	4264      	negs	r4, r4
 8000f48:	44a0      	add	r8, r4
 8000f4a:	001c      	movs	r4, r3
 8000f4c:	4643      	mov	r3, r8
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	d400      	bmi.n	8000f54 <__aeabi_dsub+0x128>
 8000f52:	e0df      	b.n	8001114 <__aeabi_dsub+0x2e8>
 8000f54:	4b82      	ldr	r3, [pc, #520]	; (8001160 <__aeabi_dsub+0x334>)
 8000f56:	3601      	adds	r6, #1
 8000f58:	429e      	cmp	r6, r3
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dsub+0x132>
 8000f5c:	e0fb      	b.n	8001156 <__aeabi_dsub+0x32a>
 8000f5e:	4642      	mov	r2, r8
 8000f60:	4b80      	ldr	r3, [pc, #512]	; (8001164 <__aeabi_dsub+0x338>)
 8000f62:	08e4      	lsrs	r4, r4, #3
 8000f64:	401a      	ands	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	0571      	lsls	r1, r6, #21
 8000f6a:	0752      	lsls	r2, r2, #29
 8000f6c:	025b      	lsls	r3, r3, #9
 8000f6e:	4322      	orrs	r2, r4
 8000f70:	0b1b      	lsrs	r3, r3, #12
 8000f72:	0d49      	lsrs	r1, r1, #21
 8000f74:	0509      	lsls	r1, r1, #20
 8000f76:	07ed      	lsls	r5, r5, #31
 8000f78:	4319      	orrs	r1, r3
 8000f7a:	4329      	orrs	r1, r5
 8000f7c:	0010      	movs	r0, r2
 8000f7e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f80:	46bb      	mov	fp, r7
 8000f82:	46b2      	mov	sl, r6
 8000f84:	46a9      	mov	r9, r5
 8000f86:	46a0      	mov	r8, r4
 8000f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8a:	1ab4      	subs	r4, r6, r2
 8000f8c:	46a4      	mov	ip, r4
 8000f8e:	2c00      	cmp	r4, #0
 8000f90:	dd58      	ble.n	8001044 <__aeabi_dsub+0x218>
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dsub+0x16c>
 8000f96:	e09e      	b.n	80010d6 <__aeabi_dsub+0x2aa>
 8000f98:	4a71      	ldr	r2, [pc, #452]	; (8001160 <__aeabi_dsub+0x334>)
 8000f9a:	4296      	cmp	r6, r2
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dsub+0x174>
 8000f9e:	e13b      	b.n	8001218 <__aeabi_dsub+0x3ec>
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	0412      	lsls	r2, r2, #16
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	4662      	mov	r2, ip
 8000fa8:	2a38      	cmp	r2, #56	; 0x38
 8000faa:	dd00      	ble.n	8000fae <__aeabi_dsub+0x182>
 8000fac:	e0c1      	b.n	8001132 <__aeabi_dsub+0x306>
 8000fae:	2a1f      	cmp	r2, #31
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_dsub+0x188>
 8000fb2:	e1bb      	b.n	800132c <__aeabi_dsub+0x500>
 8000fb4:	000c      	movs	r4, r1
 8000fb6:	3a20      	subs	r2, #32
 8000fb8:	40d4      	lsrs	r4, r2
 8000fba:	0022      	movs	r2, r4
 8000fbc:	4664      	mov	r4, ip
 8000fbe:	2c20      	cmp	r4, #32
 8000fc0:	d004      	beq.n	8000fcc <__aeabi_dsub+0x1a0>
 8000fc2:	2740      	movs	r7, #64	; 0x40
 8000fc4:	1b3f      	subs	r7, r7, r4
 8000fc6:	40b9      	lsls	r1, r7
 8000fc8:	4308      	orrs	r0, r1
 8000fca:	4680      	mov	r8, r0
 8000fcc:	4644      	mov	r4, r8
 8000fce:	1e61      	subs	r1, r4, #1
 8000fd0:	418c      	sbcs	r4, r1
 8000fd2:	4314      	orrs	r4, r2
 8000fd4:	e0b1      	b.n	800113a <__aeabi_dsub+0x30e>
 8000fd6:	000c      	movs	r4, r1
 8000fd8:	4304      	orrs	r4, r0
 8000fda:	d02a      	beq.n	8001032 <__aeabi_dsub+0x206>
 8000fdc:	46bb      	mov	fp, r7
 8000fde:	42bd      	cmp	r5, r7
 8000fe0:	d02d      	beq.n	800103e <__aeabi_dsub+0x212>
 8000fe2:	4c61      	ldr	r4, [pc, #388]	; (8001168 <__aeabi_dsub+0x33c>)
 8000fe4:	46a4      	mov	ip, r4
 8000fe6:	44b4      	add	ip, r6
 8000fe8:	4664      	mov	r4, ip
 8000fea:	2c00      	cmp	r4, #0
 8000fec:	d05c      	beq.n	80010a8 <__aeabi_dsub+0x27c>
 8000fee:	1b94      	subs	r4, r2, r6
 8000ff0:	46a4      	mov	ip, r4
 8000ff2:	2e00      	cmp	r6, #0
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_dsub+0x1cc>
 8000ff6:	e115      	b.n	8001224 <__aeabi_dsub+0x3f8>
 8000ff8:	464d      	mov	r5, r9
 8000ffa:	431d      	orrs	r5, r3
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dsub+0x1d4>
 8000ffe:	e1c3      	b.n	8001388 <__aeabi_dsub+0x55c>
 8001000:	1e65      	subs	r5, r4, #1
 8001002:	2c01      	cmp	r4, #1
 8001004:	d100      	bne.n	8001008 <__aeabi_dsub+0x1dc>
 8001006:	e20c      	b.n	8001422 <__aeabi_dsub+0x5f6>
 8001008:	4e55      	ldr	r6, [pc, #340]	; (8001160 <__aeabi_dsub+0x334>)
 800100a:	42b4      	cmp	r4, r6
 800100c:	d100      	bne.n	8001010 <__aeabi_dsub+0x1e4>
 800100e:	e1f8      	b.n	8001402 <__aeabi_dsub+0x5d6>
 8001010:	46ac      	mov	ip, r5
 8001012:	e10e      	b.n	8001232 <__aeabi_dsub+0x406>
 8001014:	000a      	movs	r2, r1
 8001016:	4302      	orrs	r2, r0
 8001018:	d100      	bne.n	800101c <__aeabi_dsub+0x1f0>
 800101a:	e136      	b.n	800128a <__aeabi_dsub+0x45e>
 800101c:	0022      	movs	r2, r4
 800101e:	3a01      	subs	r2, #1
 8001020:	2c01      	cmp	r4, #1
 8001022:	d100      	bne.n	8001026 <__aeabi_dsub+0x1fa>
 8001024:	e1c6      	b.n	80013b4 <__aeabi_dsub+0x588>
 8001026:	4c4e      	ldr	r4, [pc, #312]	; (8001160 <__aeabi_dsub+0x334>)
 8001028:	45a4      	cmp	ip, r4
 800102a:	d100      	bne.n	800102e <__aeabi_dsub+0x202>
 800102c:	e0f4      	b.n	8001218 <__aeabi_dsub+0x3ec>
 800102e:	4694      	mov	ip, r2
 8001030:	e731      	b.n	8000e96 <__aeabi_dsub+0x6a>
 8001032:	2401      	movs	r4, #1
 8001034:	4067      	eors	r7, r4
 8001036:	46bb      	mov	fp, r7
 8001038:	42bd      	cmp	r5, r7
 800103a:	d000      	beq.n	800103e <__aeabi_dsub+0x212>
 800103c:	e71c      	b.n	8000e78 <__aeabi_dsub+0x4c>
 800103e:	4c4a      	ldr	r4, [pc, #296]	; (8001168 <__aeabi_dsub+0x33c>)
 8001040:	46a4      	mov	ip, r4
 8001042:	44b4      	add	ip, r6
 8001044:	4664      	mov	r4, ip
 8001046:	2c00      	cmp	r4, #0
 8001048:	d100      	bne.n	800104c <__aeabi_dsub+0x220>
 800104a:	e0cf      	b.n	80011ec <__aeabi_dsub+0x3c0>
 800104c:	1b94      	subs	r4, r2, r6
 800104e:	46a4      	mov	ip, r4
 8001050:	2e00      	cmp	r6, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_dsub+0x22a>
 8001054:	e15c      	b.n	8001310 <__aeabi_dsub+0x4e4>
 8001056:	4e42      	ldr	r6, [pc, #264]	; (8001160 <__aeabi_dsub+0x334>)
 8001058:	42b2      	cmp	r2, r6
 800105a:	d100      	bne.n	800105e <__aeabi_dsub+0x232>
 800105c:	e1ec      	b.n	8001438 <__aeabi_dsub+0x60c>
 800105e:	2680      	movs	r6, #128	; 0x80
 8001060:	0436      	lsls	r6, r6, #16
 8001062:	4333      	orrs	r3, r6
 8001064:	4664      	mov	r4, ip
 8001066:	2c38      	cmp	r4, #56	; 0x38
 8001068:	dd00      	ble.n	800106c <__aeabi_dsub+0x240>
 800106a:	e1b3      	b.n	80013d4 <__aeabi_dsub+0x5a8>
 800106c:	2c1f      	cmp	r4, #31
 800106e:	dd00      	ble.n	8001072 <__aeabi_dsub+0x246>
 8001070:	e238      	b.n	80014e4 <__aeabi_dsub+0x6b8>
 8001072:	2620      	movs	r6, #32
 8001074:	1b36      	subs	r6, r6, r4
 8001076:	001c      	movs	r4, r3
 8001078:	40b4      	lsls	r4, r6
 800107a:	464f      	mov	r7, r9
 800107c:	46a0      	mov	r8, r4
 800107e:	4664      	mov	r4, ip
 8001080:	40e7      	lsrs	r7, r4
 8001082:	4644      	mov	r4, r8
 8001084:	433c      	orrs	r4, r7
 8001086:	464f      	mov	r7, r9
 8001088:	40b7      	lsls	r7, r6
 800108a:	003e      	movs	r6, r7
 800108c:	1e77      	subs	r7, r6, #1
 800108e:	41be      	sbcs	r6, r7
 8001090:	4334      	orrs	r4, r6
 8001092:	4666      	mov	r6, ip
 8001094:	40f3      	lsrs	r3, r6
 8001096:	18c9      	adds	r1, r1, r3
 8001098:	1824      	adds	r4, r4, r0
 800109a:	4284      	cmp	r4, r0
 800109c:	419b      	sbcs	r3, r3
 800109e:	425b      	negs	r3, r3
 80010a0:	4698      	mov	r8, r3
 80010a2:	0016      	movs	r6, r2
 80010a4:	4488      	add	r8, r1
 80010a6:	e04e      	b.n	8001146 <__aeabi_dsub+0x31a>
 80010a8:	4a30      	ldr	r2, [pc, #192]	; (800116c <__aeabi_dsub+0x340>)
 80010aa:	1c74      	adds	r4, r6, #1
 80010ac:	4214      	tst	r4, r2
 80010ae:	d000      	beq.n	80010b2 <__aeabi_dsub+0x286>
 80010b0:	e0d6      	b.n	8001260 <__aeabi_dsub+0x434>
 80010b2:	464a      	mov	r2, r9
 80010b4:	431a      	orrs	r2, r3
 80010b6:	2e00      	cmp	r6, #0
 80010b8:	d000      	beq.n	80010bc <__aeabi_dsub+0x290>
 80010ba:	e15b      	b.n	8001374 <__aeabi_dsub+0x548>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_dsub+0x296>
 80010c0:	e1a5      	b.n	800140e <__aeabi_dsub+0x5e2>
 80010c2:	000a      	movs	r2, r1
 80010c4:	4302      	orrs	r2, r0
 80010c6:	d000      	beq.n	80010ca <__aeabi_dsub+0x29e>
 80010c8:	e1bb      	b.n	8001442 <__aeabi_dsub+0x616>
 80010ca:	464a      	mov	r2, r9
 80010cc:	0759      	lsls	r1, r3, #29
 80010ce:	08d2      	lsrs	r2, r2, #3
 80010d0:	430a      	orrs	r2, r1
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	e027      	b.n	8001126 <__aeabi_dsub+0x2fa>
 80010d6:	000a      	movs	r2, r1
 80010d8:	4302      	orrs	r2, r0
 80010da:	d100      	bne.n	80010de <__aeabi_dsub+0x2b2>
 80010dc:	e174      	b.n	80013c8 <__aeabi_dsub+0x59c>
 80010de:	0022      	movs	r2, r4
 80010e0:	3a01      	subs	r2, #1
 80010e2:	2c01      	cmp	r4, #1
 80010e4:	d005      	beq.n	80010f2 <__aeabi_dsub+0x2c6>
 80010e6:	4c1e      	ldr	r4, [pc, #120]	; (8001160 <__aeabi_dsub+0x334>)
 80010e8:	45a4      	cmp	ip, r4
 80010ea:	d100      	bne.n	80010ee <__aeabi_dsub+0x2c2>
 80010ec:	e094      	b.n	8001218 <__aeabi_dsub+0x3ec>
 80010ee:	4694      	mov	ip, r2
 80010f0:	e759      	b.n	8000fa6 <__aeabi_dsub+0x17a>
 80010f2:	4448      	add	r0, r9
 80010f4:	4548      	cmp	r0, r9
 80010f6:	4192      	sbcs	r2, r2
 80010f8:	185b      	adds	r3, r3, r1
 80010fa:	4698      	mov	r8, r3
 80010fc:	0004      	movs	r4, r0
 80010fe:	4252      	negs	r2, r2
 8001100:	4490      	add	r8, r2
 8001102:	4643      	mov	r3, r8
 8001104:	2602      	movs	r6, #2
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	d500      	bpl.n	800110c <__aeabi_dsub+0x2e0>
 800110a:	e0c4      	b.n	8001296 <__aeabi_dsub+0x46a>
 800110c:	3e01      	subs	r6, #1
 800110e:	0763      	lsls	r3, r4, #29
 8001110:	d000      	beq.n	8001114 <__aeabi_dsub+0x2e8>
 8001112:	e711      	b.n	8000f38 <__aeabi_dsub+0x10c>
 8001114:	4643      	mov	r3, r8
 8001116:	46b4      	mov	ip, r6
 8001118:	0759      	lsls	r1, r3, #29
 800111a:	08e2      	lsrs	r2, r4, #3
 800111c:	430a      	orrs	r2, r1
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	490f      	ldr	r1, [pc, #60]	; (8001160 <__aeabi_dsub+0x334>)
 8001122:	458c      	cmp	ip, r1
 8001124:	d040      	beq.n	80011a8 <__aeabi_dsub+0x37c>
 8001126:	4661      	mov	r1, ip
 8001128:	031b      	lsls	r3, r3, #12
 800112a:	0549      	lsls	r1, r1, #21
 800112c:	0b1b      	lsrs	r3, r3, #12
 800112e:	0d49      	lsrs	r1, r1, #21
 8001130:	e720      	b.n	8000f74 <__aeabi_dsub+0x148>
 8001132:	4301      	orrs	r1, r0
 8001134:	000c      	movs	r4, r1
 8001136:	1e61      	subs	r1, r4, #1
 8001138:	418c      	sbcs	r4, r1
 800113a:	444c      	add	r4, r9
 800113c:	454c      	cmp	r4, r9
 800113e:	4192      	sbcs	r2, r2
 8001140:	4252      	negs	r2, r2
 8001142:	4690      	mov	r8, r2
 8001144:	4498      	add	r8, r3
 8001146:	4643      	mov	r3, r8
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	d5e0      	bpl.n	800110e <__aeabi_dsub+0x2e2>
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__aeabi_dsub+0x334>)
 800114e:	3601      	adds	r6, #1
 8001150:	429e      	cmp	r6, r3
 8001152:	d000      	beq.n	8001156 <__aeabi_dsub+0x32a>
 8001154:	e09f      	b.n	8001296 <__aeabi_dsub+0x46a>
 8001156:	0031      	movs	r1, r6
 8001158:	2300      	movs	r3, #0
 800115a:	2200      	movs	r2, #0
 800115c:	e70a      	b.n	8000f74 <__aeabi_dsub+0x148>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	000007ff 	.word	0x000007ff
 8001164:	ff7fffff 	.word	0xff7fffff
 8001168:	fffff801 	.word	0xfffff801
 800116c:	000007fe 	.word	0x000007fe
 8001170:	2a00      	cmp	r2, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_dsub+0x34a>
 8001174:	e160      	b.n	8001438 <__aeabi_dsub+0x60c>
 8001176:	000a      	movs	r2, r1
 8001178:	4302      	orrs	r2, r0
 800117a:	d04d      	beq.n	8001218 <__aeabi_dsub+0x3ec>
 800117c:	464a      	mov	r2, r9
 800117e:	075c      	lsls	r4, r3, #29
 8001180:	08d2      	lsrs	r2, r2, #3
 8001182:	4322      	orrs	r2, r4
 8001184:	2480      	movs	r4, #128	; 0x80
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	0324      	lsls	r4, r4, #12
 800118a:	4223      	tst	r3, r4
 800118c:	d007      	beq.n	800119e <__aeabi_dsub+0x372>
 800118e:	08ce      	lsrs	r6, r1, #3
 8001190:	4226      	tst	r6, r4
 8001192:	d104      	bne.n	800119e <__aeabi_dsub+0x372>
 8001194:	465d      	mov	r5, fp
 8001196:	0033      	movs	r3, r6
 8001198:	08c2      	lsrs	r2, r0, #3
 800119a:	0749      	lsls	r1, r1, #29
 800119c:	430a      	orrs	r2, r1
 800119e:	0f51      	lsrs	r1, r2, #29
 80011a0:	00d2      	lsls	r2, r2, #3
 80011a2:	08d2      	lsrs	r2, r2, #3
 80011a4:	0749      	lsls	r1, r1, #29
 80011a6:	430a      	orrs	r2, r1
 80011a8:	0011      	movs	r1, r2
 80011aa:	4319      	orrs	r1, r3
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dsub+0x384>
 80011ae:	e1c8      	b.n	8001542 <__aeabi_dsub+0x716>
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	0309      	lsls	r1, r1, #12
 80011b4:	430b      	orrs	r3, r1
 80011b6:	031b      	lsls	r3, r3, #12
 80011b8:	49d5      	ldr	r1, [pc, #852]	; (8001510 <__aeabi_dsub+0x6e4>)
 80011ba:	0b1b      	lsrs	r3, r3, #12
 80011bc:	e6da      	b.n	8000f74 <__aeabi_dsub+0x148>
 80011be:	49d5      	ldr	r1, [pc, #852]	; (8001514 <__aeabi_dsub+0x6e8>)
 80011c0:	1ab6      	subs	r6, r6, r2
 80011c2:	400b      	ands	r3, r1
 80011c4:	4698      	mov	r8, r3
 80011c6:	e6b5      	b.n	8000f34 <__aeabi_dsub+0x108>
 80011c8:	0020      	movs	r0, r4
 80011ca:	f000 faa3 	bl	8001714 <__clzsi2>
 80011ce:	0002      	movs	r2, r0
 80011d0:	3218      	adds	r2, #24
 80011d2:	2a1f      	cmp	r2, #31
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dsub+0x3ac>
 80011d6:	e68f      	b.n	8000ef8 <__aeabi_dsub+0xcc>
 80011d8:	0023      	movs	r3, r4
 80011da:	3808      	subs	r0, #8
 80011dc:	4083      	lsls	r3, r0
 80011de:	2400      	movs	r4, #0
 80011e0:	e692      	b.n	8000f08 <__aeabi_dsub+0xdc>
 80011e2:	4308      	orrs	r0, r1
 80011e4:	0002      	movs	r2, r0
 80011e6:	1e50      	subs	r0, r2, #1
 80011e8:	4182      	sbcs	r2, r0
 80011ea:	e66d      	b.n	8000ec8 <__aeabi_dsub+0x9c>
 80011ec:	4cca      	ldr	r4, [pc, #808]	; (8001518 <__aeabi_dsub+0x6ec>)
 80011ee:	1c72      	adds	r2, r6, #1
 80011f0:	4222      	tst	r2, r4
 80011f2:	d000      	beq.n	80011f6 <__aeabi_dsub+0x3ca>
 80011f4:	e0ad      	b.n	8001352 <__aeabi_dsub+0x526>
 80011f6:	464a      	mov	r2, r9
 80011f8:	431a      	orrs	r2, r3
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d1b8      	bne.n	8001170 <__aeabi_dsub+0x344>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d100      	bne.n	8001204 <__aeabi_dsub+0x3d8>
 8001202:	e158      	b.n	80014b6 <__aeabi_dsub+0x68a>
 8001204:	000a      	movs	r2, r1
 8001206:	4302      	orrs	r2, r0
 8001208:	d000      	beq.n	800120c <__aeabi_dsub+0x3e0>
 800120a:	e159      	b.n	80014c0 <__aeabi_dsub+0x694>
 800120c:	464a      	mov	r2, r9
 800120e:	0759      	lsls	r1, r3, #29
 8001210:	08d2      	lsrs	r2, r2, #3
 8001212:	430a      	orrs	r2, r1
 8001214:	08db      	lsrs	r3, r3, #3
 8001216:	e786      	b.n	8001126 <__aeabi_dsub+0x2fa>
 8001218:	464a      	mov	r2, r9
 800121a:	0759      	lsls	r1, r3, #29
 800121c:	08d2      	lsrs	r2, r2, #3
 800121e:	430a      	orrs	r2, r1
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	e7c1      	b.n	80011a8 <__aeabi_dsub+0x37c>
 8001224:	4dba      	ldr	r5, [pc, #744]	; (8001510 <__aeabi_dsub+0x6e4>)
 8001226:	42aa      	cmp	r2, r5
 8001228:	d100      	bne.n	800122c <__aeabi_dsub+0x400>
 800122a:	e11e      	b.n	800146a <__aeabi_dsub+0x63e>
 800122c:	2580      	movs	r5, #128	; 0x80
 800122e:	042d      	lsls	r5, r5, #16
 8001230:	432b      	orrs	r3, r5
 8001232:	4664      	mov	r4, ip
 8001234:	2c38      	cmp	r4, #56	; 0x38
 8001236:	dc5d      	bgt.n	80012f4 <__aeabi_dsub+0x4c8>
 8001238:	2c1f      	cmp	r4, #31
 800123a:	dd00      	ble.n	800123e <__aeabi_dsub+0x412>
 800123c:	e0d0      	b.n	80013e0 <__aeabi_dsub+0x5b4>
 800123e:	2520      	movs	r5, #32
 8001240:	4667      	mov	r7, ip
 8001242:	1b2d      	subs	r5, r5, r4
 8001244:	464e      	mov	r6, r9
 8001246:	001c      	movs	r4, r3
 8001248:	40fe      	lsrs	r6, r7
 800124a:	40ac      	lsls	r4, r5
 800124c:	4334      	orrs	r4, r6
 800124e:	464e      	mov	r6, r9
 8001250:	40ae      	lsls	r6, r5
 8001252:	0035      	movs	r5, r6
 8001254:	40fb      	lsrs	r3, r7
 8001256:	1e6e      	subs	r6, r5, #1
 8001258:	41b5      	sbcs	r5, r6
 800125a:	1ac9      	subs	r1, r1, r3
 800125c:	432c      	orrs	r4, r5
 800125e:	e04e      	b.n	80012fe <__aeabi_dsub+0x4d2>
 8001260:	464a      	mov	r2, r9
 8001262:	1a14      	subs	r4, r2, r0
 8001264:	45a1      	cmp	r9, r4
 8001266:	4192      	sbcs	r2, r2
 8001268:	4252      	negs	r2, r2
 800126a:	4690      	mov	r8, r2
 800126c:	1a5f      	subs	r7, r3, r1
 800126e:	003a      	movs	r2, r7
 8001270:	4647      	mov	r7, r8
 8001272:	1bd2      	subs	r2, r2, r7
 8001274:	4690      	mov	r8, r2
 8001276:	0212      	lsls	r2, r2, #8
 8001278:	d500      	bpl.n	800127c <__aeabi_dsub+0x450>
 800127a:	e08b      	b.n	8001394 <__aeabi_dsub+0x568>
 800127c:	4642      	mov	r2, r8
 800127e:	4322      	orrs	r2, r4
 8001280:	d000      	beq.n	8001284 <__aeabi_dsub+0x458>
 8001282:	e630      	b.n	8000ee6 <__aeabi_dsub+0xba>
 8001284:	2300      	movs	r3, #0
 8001286:	2500      	movs	r5, #0
 8001288:	e74d      	b.n	8001126 <__aeabi_dsub+0x2fa>
 800128a:	464a      	mov	r2, r9
 800128c:	0759      	lsls	r1, r3, #29
 800128e:	08d2      	lsrs	r2, r2, #3
 8001290:	430a      	orrs	r2, r1
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	e744      	b.n	8001120 <__aeabi_dsub+0x2f4>
 8001296:	4642      	mov	r2, r8
 8001298:	4b9e      	ldr	r3, [pc, #632]	; (8001514 <__aeabi_dsub+0x6e8>)
 800129a:	0861      	lsrs	r1, r4, #1
 800129c:	401a      	ands	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	2201      	movs	r2, #1
 80012a2:	4014      	ands	r4, r2
 80012a4:	430c      	orrs	r4, r1
 80012a6:	07da      	lsls	r2, r3, #31
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	4698      	mov	r8, r3
 80012ac:	4314      	orrs	r4, r2
 80012ae:	e641      	b.n	8000f34 <__aeabi_dsub+0x108>
 80012b0:	001a      	movs	r2, r3
 80012b2:	3e1f      	subs	r6, #31
 80012b4:	40f2      	lsrs	r2, r6
 80012b6:	0016      	movs	r6, r2
 80012b8:	2920      	cmp	r1, #32
 80012ba:	d003      	beq.n	80012c4 <__aeabi_dsub+0x498>
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	1a51      	subs	r1, r2, r1
 80012c0:	408b      	lsls	r3, r1
 80012c2:	431c      	orrs	r4, r3
 80012c4:	1e62      	subs	r2, r4, #1
 80012c6:	4194      	sbcs	r4, r2
 80012c8:	2300      	movs	r3, #0
 80012ca:	4334      	orrs	r4, r6
 80012cc:	4698      	mov	r8, r3
 80012ce:	2600      	movs	r6, #0
 80012d0:	e71d      	b.n	800110e <__aeabi_dsub+0x2e2>
 80012d2:	000c      	movs	r4, r1
 80012d4:	3a20      	subs	r2, #32
 80012d6:	40d4      	lsrs	r4, r2
 80012d8:	0022      	movs	r2, r4
 80012da:	4664      	mov	r4, ip
 80012dc:	2c20      	cmp	r4, #32
 80012de:	d004      	beq.n	80012ea <__aeabi_dsub+0x4be>
 80012e0:	2740      	movs	r7, #64	; 0x40
 80012e2:	1b3f      	subs	r7, r7, r4
 80012e4:	40b9      	lsls	r1, r7
 80012e6:	4308      	orrs	r0, r1
 80012e8:	4680      	mov	r8, r0
 80012ea:	4644      	mov	r4, r8
 80012ec:	1e61      	subs	r1, r4, #1
 80012ee:	418c      	sbcs	r4, r1
 80012f0:	4322      	orrs	r2, r4
 80012f2:	e5e9      	b.n	8000ec8 <__aeabi_dsub+0x9c>
 80012f4:	464c      	mov	r4, r9
 80012f6:	4323      	orrs	r3, r4
 80012f8:	001c      	movs	r4, r3
 80012fa:	1e63      	subs	r3, r4, #1
 80012fc:	419c      	sbcs	r4, r3
 80012fe:	1b04      	subs	r4, r0, r4
 8001300:	42a0      	cmp	r0, r4
 8001302:	419b      	sbcs	r3, r3
 8001304:	425b      	negs	r3, r3
 8001306:	1acb      	subs	r3, r1, r3
 8001308:	4698      	mov	r8, r3
 800130a:	465d      	mov	r5, fp
 800130c:	0016      	movs	r6, r2
 800130e:	e5e2      	b.n	8000ed6 <__aeabi_dsub+0xaa>
 8001310:	464e      	mov	r6, r9
 8001312:	431e      	orrs	r6, r3
 8001314:	d100      	bne.n	8001318 <__aeabi_dsub+0x4ec>
 8001316:	e0ae      	b.n	8001476 <__aeabi_dsub+0x64a>
 8001318:	1e66      	subs	r6, r4, #1
 800131a:	2c01      	cmp	r4, #1
 800131c:	d100      	bne.n	8001320 <__aeabi_dsub+0x4f4>
 800131e:	e0fd      	b.n	800151c <__aeabi_dsub+0x6f0>
 8001320:	4f7b      	ldr	r7, [pc, #492]	; (8001510 <__aeabi_dsub+0x6e4>)
 8001322:	42bc      	cmp	r4, r7
 8001324:	d100      	bne.n	8001328 <__aeabi_dsub+0x4fc>
 8001326:	e107      	b.n	8001538 <__aeabi_dsub+0x70c>
 8001328:	46b4      	mov	ip, r6
 800132a:	e69b      	b.n	8001064 <__aeabi_dsub+0x238>
 800132c:	4664      	mov	r4, ip
 800132e:	2220      	movs	r2, #32
 8001330:	1b12      	subs	r2, r2, r4
 8001332:	000c      	movs	r4, r1
 8001334:	4094      	lsls	r4, r2
 8001336:	0007      	movs	r7, r0
 8001338:	4090      	lsls	r0, r2
 800133a:	46a0      	mov	r8, r4
 800133c:	4664      	mov	r4, ip
 800133e:	1e42      	subs	r2, r0, #1
 8001340:	4190      	sbcs	r0, r2
 8001342:	4662      	mov	r2, ip
 8001344:	40e7      	lsrs	r7, r4
 8001346:	4644      	mov	r4, r8
 8001348:	40d1      	lsrs	r1, r2
 800134a:	433c      	orrs	r4, r7
 800134c:	4304      	orrs	r4, r0
 800134e:	185b      	adds	r3, r3, r1
 8001350:	e6f3      	b.n	800113a <__aeabi_dsub+0x30e>
 8001352:	4c6f      	ldr	r4, [pc, #444]	; (8001510 <__aeabi_dsub+0x6e4>)
 8001354:	42a2      	cmp	r2, r4
 8001356:	d100      	bne.n	800135a <__aeabi_dsub+0x52e>
 8001358:	e0d5      	b.n	8001506 <__aeabi_dsub+0x6da>
 800135a:	4448      	add	r0, r9
 800135c:	185b      	adds	r3, r3, r1
 800135e:	4548      	cmp	r0, r9
 8001360:	4189      	sbcs	r1, r1
 8001362:	4249      	negs	r1, r1
 8001364:	185b      	adds	r3, r3, r1
 8001366:	07dc      	lsls	r4, r3, #31
 8001368:	0840      	lsrs	r0, r0, #1
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	4698      	mov	r8, r3
 800136e:	0016      	movs	r6, r2
 8001370:	4304      	orrs	r4, r0
 8001372:	e6cc      	b.n	800110e <__aeabi_dsub+0x2e2>
 8001374:	2a00      	cmp	r2, #0
 8001376:	d000      	beq.n	800137a <__aeabi_dsub+0x54e>
 8001378:	e082      	b.n	8001480 <__aeabi_dsub+0x654>
 800137a:	000a      	movs	r2, r1
 800137c:	4302      	orrs	r2, r0
 800137e:	d140      	bne.n	8001402 <__aeabi_dsub+0x5d6>
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	2500      	movs	r5, #0
 8001384:	031b      	lsls	r3, r3, #12
 8001386:	e713      	b.n	80011b0 <__aeabi_dsub+0x384>
 8001388:	074b      	lsls	r3, r1, #29
 800138a:	08c2      	lsrs	r2, r0, #3
 800138c:	431a      	orrs	r2, r3
 800138e:	465d      	mov	r5, fp
 8001390:	08cb      	lsrs	r3, r1, #3
 8001392:	e6c5      	b.n	8001120 <__aeabi_dsub+0x2f4>
 8001394:	464a      	mov	r2, r9
 8001396:	1a84      	subs	r4, r0, r2
 8001398:	42a0      	cmp	r0, r4
 800139a:	4192      	sbcs	r2, r2
 800139c:	1acb      	subs	r3, r1, r3
 800139e:	4252      	negs	r2, r2
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	4698      	mov	r8, r3
 80013a4:	465d      	mov	r5, fp
 80013a6:	e59e      	b.n	8000ee6 <__aeabi_dsub+0xba>
 80013a8:	464a      	mov	r2, r9
 80013aa:	0759      	lsls	r1, r3, #29
 80013ac:	08d2      	lsrs	r2, r2, #3
 80013ae:	430a      	orrs	r2, r1
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	e6f9      	b.n	80011a8 <__aeabi_dsub+0x37c>
 80013b4:	464a      	mov	r2, r9
 80013b6:	1a14      	subs	r4, r2, r0
 80013b8:	45a1      	cmp	r9, r4
 80013ba:	4192      	sbcs	r2, r2
 80013bc:	1a5b      	subs	r3, r3, r1
 80013be:	4252      	negs	r2, r2
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	4698      	mov	r8, r3
 80013c4:	2601      	movs	r6, #1
 80013c6:	e586      	b.n	8000ed6 <__aeabi_dsub+0xaa>
 80013c8:	464a      	mov	r2, r9
 80013ca:	0759      	lsls	r1, r3, #29
 80013cc:	08d2      	lsrs	r2, r2, #3
 80013ce:	430a      	orrs	r2, r1
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	e6a5      	b.n	8001120 <__aeabi_dsub+0x2f4>
 80013d4:	464c      	mov	r4, r9
 80013d6:	4323      	orrs	r3, r4
 80013d8:	001c      	movs	r4, r3
 80013da:	1e63      	subs	r3, r4, #1
 80013dc:	419c      	sbcs	r4, r3
 80013de:	e65b      	b.n	8001098 <__aeabi_dsub+0x26c>
 80013e0:	4665      	mov	r5, ip
 80013e2:	001e      	movs	r6, r3
 80013e4:	3d20      	subs	r5, #32
 80013e6:	40ee      	lsrs	r6, r5
 80013e8:	2c20      	cmp	r4, #32
 80013ea:	d005      	beq.n	80013f8 <__aeabi_dsub+0x5cc>
 80013ec:	2540      	movs	r5, #64	; 0x40
 80013ee:	1b2d      	subs	r5, r5, r4
 80013f0:	40ab      	lsls	r3, r5
 80013f2:	464c      	mov	r4, r9
 80013f4:	431c      	orrs	r4, r3
 80013f6:	46a2      	mov	sl, r4
 80013f8:	4654      	mov	r4, sl
 80013fa:	1e63      	subs	r3, r4, #1
 80013fc:	419c      	sbcs	r4, r3
 80013fe:	4334      	orrs	r4, r6
 8001400:	e77d      	b.n	80012fe <__aeabi_dsub+0x4d2>
 8001402:	074b      	lsls	r3, r1, #29
 8001404:	08c2      	lsrs	r2, r0, #3
 8001406:	431a      	orrs	r2, r3
 8001408:	465d      	mov	r5, fp
 800140a:	08cb      	lsrs	r3, r1, #3
 800140c:	e6cc      	b.n	80011a8 <__aeabi_dsub+0x37c>
 800140e:	000a      	movs	r2, r1
 8001410:	4302      	orrs	r2, r0
 8001412:	d100      	bne.n	8001416 <__aeabi_dsub+0x5ea>
 8001414:	e736      	b.n	8001284 <__aeabi_dsub+0x458>
 8001416:	074b      	lsls	r3, r1, #29
 8001418:	08c2      	lsrs	r2, r0, #3
 800141a:	431a      	orrs	r2, r3
 800141c:	465d      	mov	r5, fp
 800141e:	08cb      	lsrs	r3, r1, #3
 8001420:	e681      	b.n	8001126 <__aeabi_dsub+0x2fa>
 8001422:	464a      	mov	r2, r9
 8001424:	1a84      	subs	r4, r0, r2
 8001426:	42a0      	cmp	r0, r4
 8001428:	4192      	sbcs	r2, r2
 800142a:	1acb      	subs	r3, r1, r3
 800142c:	4252      	negs	r2, r2
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	4698      	mov	r8, r3
 8001432:	465d      	mov	r5, fp
 8001434:	2601      	movs	r6, #1
 8001436:	e54e      	b.n	8000ed6 <__aeabi_dsub+0xaa>
 8001438:	074b      	lsls	r3, r1, #29
 800143a:	08c2      	lsrs	r2, r0, #3
 800143c:	431a      	orrs	r2, r3
 800143e:	08cb      	lsrs	r3, r1, #3
 8001440:	e6b2      	b.n	80011a8 <__aeabi_dsub+0x37c>
 8001442:	464a      	mov	r2, r9
 8001444:	1a14      	subs	r4, r2, r0
 8001446:	45a1      	cmp	r9, r4
 8001448:	4192      	sbcs	r2, r2
 800144a:	1a5f      	subs	r7, r3, r1
 800144c:	4252      	negs	r2, r2
 800144e:	1aba      	subs	r2, r7, r2
 8001450:	4690      	mov	r8, r2
 8001452:	0212      	lsls	r2, r2, #8
 8001454:	d56b      	bpl.n	800152e <__aeabi_dsub+0x702>
 8001456:	464a      	mov	r2, r9
 8001458:	1a84      	subs	r4, r0, r2
 800145a:	42a0      	cmp	r0, r4
 800145c:	4192      	sbcs	r2, r2
 800145e:	1acb      	subs	r3, r1, r3
 8001460:	4252      	negs	r2, r2
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	4698      	mov	r8, r3
 8001466:	465d      	mov	r5, fp
 8001468:	e564      	b.n	8000f34 <__aeabi_dsub+0x108>
 800146a:	074b      	lsls	r3, r1, #29
 800146c:	08c2      	lsrs	r2, r0, #3
 800146e:	431a      	orrs	r2, r3
 8001470:	465d      	mov	r5, fp
 8001472:	08cb      	lsrs	r3, r1, #3
 8001474:	e698      	b.n	80011a8 <__aeabi_dsub+0x37c>
 8001476:	074b      	lsls	r3, r1, #29
 8001478:	08c2      	lsrs	r2, r0, #3
 800147a:	431a      	orrs	r2, r3
 800147c:	08cb      	lsrs	r3, r1, #3
 800147e:	e64f      	b.n	8001120 <__aeabi_dsub+0x2f4>
 8001480:	000a      	movs	r2, r1
 8001482:	4302      	orrs	r2, r0
 8001484:	d090      	beq.n	80013a8 <__aeabi_dsub+0x57c>
 8001486:	464a      	mov	r2, r9
 8001488:	075c      	lsls	r4, r3, #29
 800148a:	08d2      	lsrs	r2, r2, #3
 800148c:	4314      	orrs	r4, r2
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	0312      	lsls	r2, r2, #12
 8001494:	4213      	tst	r3, r2
 8001496:	d008      	beq.n	80014aa <__aeabi_dsub+0x67e>
 8001498:	08ce      	lsrs	r6, r1, #3
 800149a:	4216      	tst	r6, r2
 800149c:	d105      	bne.n	80014aa <__aeabi_dsub+0x67e>
 800149e:	08c0      	lsrs	r0, r0, #3
 80014a0:	0749      	lsls	r1, r1, #29
 80014a2:	4308      	orrs	r0, r1
 80014a4:	0004      	movs	r4, r0
 80014a6:	465d      	mov	r5, fp
 80014a8:	0033      	movs	r3, r6
 80014aa:	0f61      	lsrs	r1, r4, #29
 80014ac:	00e2      	lsls	r2, r4, #3
 80014ae:	0749      	lsls	r1, r1, #29
 80014b0:	08d2      	lsrs	r2, r2, #3
 80014b2:	430a      	orrs	r2, r1
 80014b4:	e678      	b.n	80011a8 <__aeabi_dsub+0x37c>
 80014b6:	074b      	lsls	r3, r1, #29
 80014b8:	08c2      	lsrs	r2, r0, #3
 80014ba:	431a      	orrs	r2, r3
 80014bc:	08cb      	lsrs	r3, r1, #3
 80014be:	e632      	b.n	8001126 <__aeabi_dsub+0x2fa>
 80014c0:	4448      	add	r0, r9
 80014c2:	185b      	adds	r3, r3, r1
 80014c4:	4548      	cmp	r0, r9
 80014c6:	4192      	sbcs	r2, r2
 80014c8:	4698      	mov	r8, r3
 80014ca:	4252      	negs	r2, r2
 80014cc:	4490      	add	r8, r2
 80014ce:	4643      	mov	r3, r8
 80014d0:	0004      	movs	r4, r0
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	d400      	bmi.n	80014d8 <__aeabi_dsub+0x6ac>
 80014d6:	e61a      	b.n	800110e <__aeabi_dsub+0x2e2>
 80014d8:	4642      	mov	r2, r8
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <__aeabi_dsub+0x6e8>)
 80014dc:	2601      	movs	r6, #1
 80014de:	401a      	ands	r2, r3
 80014e0:	4690      	mov	r8, r2
 80014e2:	e614      	b.n	800110e <__aeabi_dsub+0x2e2>
 80014e4:	4666      	mov	r6, ip
 80014e6:	001f      	movs	r7, r3
 80014e8:	3e20      	subs	r6, #32
 80014ea:	40f7      	lsrs	r7, r6
 80014ec:	2c20      	cmp	r4, #32
 80014ee:	d005      	beq.n	80014fc <__aeabi_dsub+0x6d0>
 80014f0:	2640      	movs	r6, #64	; 0x40
 80014f2:	1b36      	subs	r6, r6, r4
 80014f4:	40b3      	lsls	r3, r6
 80014f6:	464c      	mov	r4, r9
 80014f8:	431c      	orrs	r4, r3
 80014fa:	46a2      	mov	sl, r4
 80014fc:	4654      	mov	r4, sl
 80014fe:	1e63      	subs	r3, r4, #1
 8001500:	419c      	sbcs	r4, r3
 8001502:	433c      	orrs	r4, r7
 8001504:	e5c8      	b.n	8001098 <__aeabi_dsub+0x26c>
 8001506:	0011      	movs	r1, r2
 8001508:	2300      	movs	r3, #0
 800150a:	2200      	movs	r2, #0
 800150c:	e532      	b.n	8000f74 <__aeabi_dsub+0x148>
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	000007ff 	.word	0x000007ff
 8001514:	ff7fffff 	.word	0xff7fffff
 8001518:	000007fe 	.word	0x000007fe
 800151c:	464a      	mov	r2, r9
 800151e:	1814      	adds	r4, r2, r0
 8001520:	4284      	cmp	r4, r0
 8001522:	4192      	sbcs	r2, r2
 8001524:	185b      	adds	r3, r3, r1
 8001526:	4698      	mov	r8, r3
 8001528:	4252      	negs	r2, r2
 800152a:	4490      	add	r8, r2
 800152c:	e5e9      	b.n	8001102 <__aeabi_dsub+0x2d6>
 800152e:	4642      	mov	r2, r8
 8001530:	4322      	orrs	r2, r4
 8001532:	d100      	bne.n	8001536 <__aeabi_dsub+0x70a>
 8001534:	e6a6      	b.n	8001284 <__aeabi_dsub+0x458>
 8001536:	e5ea      	b.n	800110e <__aeabi_dsub+0x2e2>
 8001538:	074b      	lsls	r3, r1, #29
 800153a:	08c2      	lsrs	r2, r0, #3
 800153c:	431a      	orrs	r2, r3
 800153e:	08cb      	lsrs	r3, r1, #3
 8001540:	e632      	b.n	80011a8 <__aeabi_dsub+0x37c>
 8001542:	2200      	movs	r2, #0
 8001544:	4901      	ldr	r1, [pc, #4]	; (800154c <__aeabi_dsub+0x720>)
 8001546:	0013      	movs	r3, r2
 8001548:	e514      	b.n	8000f74 <__aeabi_dsub+0x148>
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	000007ff 	.word	0x000007ff

08001550 <__aeabi_d2iz>:
 8001550:	000a      	movs	r2, r1
 8001552:	b530      	push	{r4, r5, lr}
 8001554:	4c13      	ldr	r4, [pc, #76]	; (80015a4 <__aeabi_d2iz+0x54>)
 8001556:	0053      	lsls	r3, r2, #1
 8001558:	0309      	lsls	r1, r1, #12
 800155a:	0005      	movs	r5, r0
 800155c:	0b09      	lsrs	r1, r1, #12
 800155e:	2000      	movs	r0, #0
 8001560:	0d5b      	lsrs	r3, r3, #21
 8001562:	0fd2      	lsrs	r2, r2, #31
 8001564:	42a3      	cmp	r3, r4
 8001566:	dd04      	ble.n	8001572 <__aeabi_d2iz+0x22>
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <__aeabi_d2iz+0x58>)
 800156a:	4283      	cmp	r3, r0
 800156c:	dd02      	ble.n	8001574 <__aeabi_d2iz+0x24>
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <__aeabi_d2iz+0x5c>)
 8001570:	18d0      	adds	r0, r2, r3
 8001572:	bd30      	pop	{r4, r5, pc}
 8001574:	2080      	movs	r0, #128	; 0x80
 8001576:	0340      	lsls	r0, r0, #13
 8001578:	4301      	orrs	r1, r0
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <__aeabi_d2iz+0x60>)
 800157c:	1ac0      	subs	r0, r0, r3
 800157e:	281f      	cmp	r0, #31
 8001580:	dd08      	ble.n	8001594 <__aeabi_d2iz+0x44>
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <__aeabi_d2iz+0x64>)
 8001584:	1ac3      	subs	r3, r0, r3
 8001586:	40d9      	lsrs	r1, r3
 8001588:	000b      	movs	r3, r1
 800158a:	4258      	negs	r0, r3
 800158c:	2a00      	cmp	r2, #0
 800158e:	d1f0      	bne.n	8001572 <__aeabi_d2iz+0x22>
 8001590:	0018      	movs	r0, r3
 8001592:	e7ee      	b.n	8001572 <__aeabi_d2iz+0x22>
 8001594:	4c08      	ldr	r4, [pc, #32]	; (80015b8 <__aeabi_d2iz+0x68>)
 8001596:	40c5      	lsrs	r5, r0
 8001598:	46a4      	mov	ip, r4
 800159a:	4463      	add	r3, ip
 800159c:	4099      	lsls	r1, r3
 800159e:	000b      	movs	r3, r1
 80015a0:	432b      	orrs	r3, r5
 80015a2:	e7f2      	b.n	800158a <__aeabi_d2iz+0x3a>
 80015a4:	000003fe 	.word	0x000003fe
 80015a8:	0000041d 	.word	0x0000041d
 80015ac:	7fffffff 	.word	0x7fffffff
 80015b0:	00000433 	.word	0x00000433
 80015b4:	00000413 	.word	0x00000413
 80015b8:	fffffbed 	.word	0xfffffbed

080015bc <__aeabi_ui2d>:
 80015bc:	b510      	push	{r4, lr}
 80015be:	1e04      	subs	r4, r0, #0
 80015c0:	d010      	beq.n	80015e4 <__aeabi_ui2d+0x28>
 80015c2:	f000 f8a7 	bl	8001714 <__clzsi2>
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <__aeabi_ui2d+0x48>)
 80015c8:	1a1b      	subs	r3, r3, r0
 80015ca:	280a      	cmp	r0, #10
 80015cc:	dc11      	bgt.n	80015f2 <__aeabi_ui2d+0x36>
 80015ce:	220b      	movs	r2, #11
 80015d0:	0021      	movs	r1, r4
 80015d2:	1a12      	subs	r2, r2, r0
 80015d4:	40d1      	lsrs	r1, r2
 80015d6:	3015      	adds	r0, #21
 80015d8:	030a      	lsls	r2, r1, #12
 80015da:	055b      	lsls	r3, r3, #21
 80015dc:	4084      	lsls	r4, r0
 80015de:	0b12      	lsrs	r2, r2, #12
 80015e0:	0d5b      	lsrs	r3, r3, #21
 80015e2:	e001      	b.n	80015e8 <__aeabi_ui2d+0x2c>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2200      	movs	r2, #0
 80015e8:	051b      	lsls	r3, r3, #20
 80015ea:	4313      	orrs	r3, r2
 80015ec:	0020      	movs	r0, r4
 80015ee:	0019      	movs	r1, r3
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	0022      	movs	r2, r4
 80015f4:	380b      	subs	r0, #11
 80015f6:	4082      	lsls	r2, r0
 80015f8:	055b      	lsls	r3, r3, #21
 80015fa:	0312      	lsls	r2, r2, #12
 80015fc:	2400      	movs	r4, #0
 80015fe:	0b12      	lsrs	r2, r2, #12
 8001600:	0d5b      	lsrs	r3, r3, #21
 8001602:	e7f1      	b.n	80015e8 <__aeabi_ui2d+0x2c>
 8001604:	0000041e 	.word	0x0000041e

08001608 <__aeabi_f2d>:
 8001608:	b570      	push	{r4, r5, r6, lr}
 800160a:	0043      	lsls	r3, r0, #1
 800160c:	0246      	lsls	r6, r0, #9
 800160e:	0fc4      	lsrs	r4, r0, #31
 8001610:	20fe      	movs	r0, #254	; 0xfe
 8001612:	0e1b      	lsrs	r3, r3, #24
 8001614:	1c59      	adds	r1, r3, #1
 8001616:	0a75      	lsrs	r5, r6, #9
 8001618:	4208      	tst	r0, r1
 800161a:	d00c      	beq.n	8001636 <__aeabi_f2d+0x2e>
 800161c:	22e0      	movs	r2, #224	; 0xe0
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4694      	mov	ip, r2
 8001622:	076d      	lsls	r5, r5, #29
 8001624:	0b36      	lsrs	r6, r6, #12
 8001626:	4463      	add	r3, ip
 8001628:	051b      	lsls	r3, r3, #20
 800162a:	4333      	orrs	r3, r6
 800162c:	07e4      	lsls	r4, r4, #31
 800162e:	4323      	orrs	r3, r4
 8001630:	0028      	movs	r0, r5
 8001632:	0019      	movs	r1, r3
 8001634:	bd70      	pop	{r4, r5, r6, pc}
 8001636:	2b00      	cmp	r3, #0
 8001638:	d114      	bne.n	8001664 <__aeabi_f2d+0x5c>
 800163a:	2d00      	cmp	r5, #0
 800163c:	d01b      	beq.n	8001676 <__aeabi_f2d+0x6e>
 800163e:	0028      	movs	r0, r5
 8001640:	f000 f868 	bl	8001714 <__clzsi2>
 8001644:	280a      	cmp	r0, #10
 8001646:	dc1c      	bgt.n	8001682 <__aeabi_f2d+0x7a>
 8001648:	230b      	movs	r3, #11
 800164a:	002a      	movs	r2, r5
 800164c:	1a1b      	subs	r3, r3, r0
 800164e:	40da      	lsrs	r2, r3
 8001650:	0003      	movs	r3, r0
 8001652:	3315      	adds	r3, #21
 8001654:	409d      	lsls	r5, r3
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <__aeabi_f2d+0x88>)
 8001658:	0312      	lsls	r2, r2, #12
 800165a:	1a1b      	subs	r3, r3, r0
 800165c:	055b      	lsls	r3, r3, #21
 800165e:	0b16      	lsrs	r6, r2, #12
 8001660:	0d5b      	lsrs	r3, r3, #21
 8001662:	e7e1      	b.n	8001628 <__aeabi_f2d+0x20>
 8001664:	2d00      	cmp	r5, #0
 8001666:	d009      	beq.n	800167c <__aeabi_f2d+0x74>
 8001668:	0b32      	lsrs	r2, r6, #12
 800166a:	2680      	movs	r6, #128	; 0x80
 800166c:	0336      	lsls	r6, r6, #12
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <__aeabi_f2d+0x8c>)
 8001670:	076d      	lsls	r5, r5, #29
 8001672:	4316      	orrs	r6, r2
 8001674:	e7d8      	b.n	8001628 <__aeabi_f2d+0x20>
 8001676:	2300      	movs	r3, #0
 8001678:	2600      	movs	r6, #0
 800167a:	e7d5      	b.n	8001628 <__aeabi_f2d+0x20>
 800167c:	2600      	movs	r6, #0
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <__aeabi_f2d+0x8c>)
 8001680:	e7d2      	b.n	8001628 <__aeabi_f2d+0x20>
 8001682:	0003      	movs	r3, r0
 8001684:	002a      	movs	r2, r5
 8001686:	3b0b      	subs	r3, #11
 8001688:	409a      	lsls	r2, r3
 800168a:	2500      	movs	r5, #0
 800168c:	e7e3      	b.n	8001656 <__aeabi_f2d+0x4e>
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	00000389 	.word	0x00000389
 8001694:	000007ff 	.word	0x000007ff

08001698 <__aeabi_cdrcmple>:
 8001698:	4684      	mov	ip, r0
 800169a:	1c10      	adds	r0, r2, #0
 800169c:	4662      	mov	r2, ip
 800169e:	468c      	mov	ip, r1
 80016a0:	1c19      	adds	r1, r3, #0
 80016a2:	4663      	mov	r3, ip
 80016a4:	e000      	b.n	80016a8 <__aeabi_cdcmpeq>
 80016a6:	46c0      	nop			; (mov r8, r8)

080016a8 <__aeabi_cdcmpeq>:
 80016a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016aa:	f000 f8ff 	bl	80018ac <__ledf2>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d401      	bmi.n	80016b6 <__aeabi_cdcmpeq+0xe>
 80016b2:	2100      	movs	r1, #0
 80016b4:	42c8      	cmn	r0, r1
 80016b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016b8 <__aeabi_dcmpeq>:
 80016b8:	b510      	push	{r4, lr}
 80016ba:	f000 f849 	bl	8001750 <__eqdf2>
 80016be:	4240      	negs	r0, r0
 80016c0:	3001      	adds	r0, #1
 80016c2:	bd10      	pop	{r4, pc}

080016c4 <__aeabi_dcmplt>:
 80016c4:	b510      	push	{r4, lr}
 80016c6:	f000 f8f1 	bl	80018ac <__ledf2>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	db01      	blt.n	80016d2 <__aeabi_dcmplt+0xe>
 80016ce:	2000      	movs	r0, #0
 80016d0:	bd10      	pop	{r4, pc}
 80016d2:	2001      	movs	r0, #1
 80016d4:	bd10      	pop	{r4, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)

080016d8 <__aeabi_dcmple>:
 80016d8:	b510      	push	{r4, lr}
 80016da:	f000 f8e7 	bl	80018ac <__ledf2>
 80016de:	2800      	cmp	r0, #0
 80016e0:	dd01      	ble.n	80016e6 <__aeabi_dcmple+0xe>
 80016e2:	2000      	movs	r0, #0
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	2001      	movs	r0, #1
 80016e8:	bd10      	pop	{r4, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)

080016ec <__aeabi_dcmpgt>:
 80016ec:	b510      	push	{r4, lr}
 80016ee:	f000 f86b 	bl	80017c8 <__gedf2>
 80016f2:	2800      	cmp	r0, #0
 80016f4:	dc01      	bgt.n	80016fa <__aeabi_dcmpgt+0xe>
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	2001      	movs	r0, #1
 80016fc:	bd10      	pop	{r4, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)

08001700 <__aeabi_dcmpge>:
 8001700:	b510      	push	{r4, lr}
 8001702:	f000 f861 	bl	80017c8 <__gedf2>
 8001706:	2800      	cmp	r0, #0
 8001708:	da01      	bge.n	800170e <__aeabi_dcmpge+0xe>
 800170a:	2000      	movs	r0, #0
 800170c:	bd10      	pop	{r4, pc}
 800170e:	2001      	movs	r0, #1
 8001710:	bd10      	pop	{r4, pc}
 8001712:	46c0      	nop			; (mov r8, r8)

08001714 <__clzsi2>:
 8001714:	211c      	movs	r1, #28
 8001716:	2301      	movs	r3, #1
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	4298      	cmp	r0, r3
 800171c:	d301      	bcc.n	8001722 <__clzsi2+0xe>
 800171e:	0c00      	lsrs	r0, r0, #16
 8001720:	3910      	subs	r1, #16
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	4298      	cmp	r0, r3
 8001726:	d301      	bcc.n	800172c <__clzsi2+0x18>
 8001728:	0a00      	lsrs	r0, r0, #8
 800172a:	3908      	subs	r1, #8
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	4298      	cmp	r0, r3
 8001730:	d301      	bcc.n	8001736 <__clzsi2+0x22>
 8001732:	0900      	lsrs	r0, r0, #4
 8001734:	3904      	subs	r1, #4
 8001736:	a202      	add	r2, pc, #8	; (adr r2, 8001740 <__clzsi2+0x2c>)
 8001738:	5c10      	ldrb	r0, [r2, r0]
 800173a:	1840      	adds	r0, r0, r1
 800173c:	4770      	bx	lr
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	02020304 	.word	0x02020304
 8001744:	01010101 	.word	0x01010101
	...

08001750 <__eqdf2>:
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	464f      	mov	r7, r9
 8001754:	4646      	mov	r6, r8
 8001756:	46d6      	mov	lr, sl
 8001758:	4694      	mov	ip, r2
 800175a:	4691      	mov	r9, r2
 800175c:	031a      	lsls	r2, r3, #12
 800175e:	0b12      	lsrs	r2, r2, #12
 8001760:	4d18      	ldr	r5, [pc, #96]	; (80017c4 <__eqdf2+0x74>)
 8001762:	b5c0      	push	{r6, r7, lr}
 8001764:	004c      	lsls	r4, r1, #1
 8001766:	030f      	lsls	r7, r1, #12
 8001768:	4692      	mov	sl, r2
 800176a:	005a      	lsls	r2, r3, #1
 800176c:	0006      	movs	r6, r0
 800176e:	4680      	mov	r8, r0
 8001770:	0b3f      	lsrs	r7, r7, #12
 8001772:	2001      	movs	r0, #1
 8001774:	0d64      	lsrs	r4, r4, #21
 8001776:	0fc9      	lsrs	r1, r1, #31
 8001778:	0d52      	lsrs	r2, r2, #21
 800177a:	0fdb      	lsrs	r3, r3, #31
 800177c:	42ac      	cmp	r4, r5
 800177e:	d00a      	beq.n	8001796 <__eqdf2+0x46>
 8001780:	42aa      	cmp	r2, r5
 8001782:	d003      	beq.n	800178c <__eqdf2+0x3c>
 8001784:	4294      	cmp	r4, r2
 8001786:	d101      	bne.n	800178c <__eqdf2+0x3c>
 8001788:	4557      	cmp	r7, sl
 800178a:	d00d      	beq.n	80017a8 <__eqdf2+0x58>
 800178c:	bce0      	pop	{r5, r6, r7}
 800178e:	46ba      	mov	sl, r7
 8001790:	46b1      	mov	r9, r6
 8001792:	46a8      	mov	r8, r5
 8001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001796:	003d      	movs	r5, r7
 8001798:	4335      	orrs	r5, r6
 800179a:	d1f7      	bne.n	800178c <__eqdf2+0x3c>
 800179c:	42a2      	cmp	r2, r4
 800179e:	d1f5      	bne.n	800178c <__eqdf2+0x3c>
 80017a0:	4652      	mov	r2, sl
 80017a2:	4665      	mov	r5, ip
 80017a4:	432a      	orrs	r2, r5
 80017a6:	d1f1      	bne.n	800178c <__eqdf2+0x3c>
 80017a8:	2001      	movs	r0, #1
 80017aa:	45c8      	cmp	r8, r9
 80017ac:	d1ee      	bne.n	800178c <__eqdf2+0x3c>
 80017ae:	4299      	cmp	r1, r3
 80017b0:	d006      	beq.n	80017c0 <__eqdf2+0x70>
 80017b2:	2c00      	cmp	r4, #0
 80017b4:	d1ea      	bne.n	800178c <__eqdf2+0x3c>
 80017b6:	433e      	orrs	r6, r7
 80017b8:	0030      	movs	r0, r6
 80017ba:	1e46      	subs	r6, r0, #1
 80017bc:	41b0      	sbcs	r0, r6
 80017be:	e7e5      	b.n	800178c <__eqdf2+0x3c>
 80017c0:	2000      	movs	r0, #0
 80017c2:	e7e3      	b.n	800178c <__eqdf2+0x3c>
 80017c4:	000007ff 	.word	0x000007ff

080017c8 <__gedf2>:
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	464e      	mov	r6, r9
 80017cc:	4645      	mov	r5, r8
 80017ce:	4657      	mov	r7, sl
 80017d0:	46de      	mov	lr, fp
 80017d2:	0004      	movs	r4, r0
 80017d4:	0018      	movs	r0, r3
 80017d6:	b5e0      	push	{r5, r6, r7, lr}
 80017d8:	0016      	movs	r6, r2
 80017da:	031b      	lsls	r3, r3, #12
 80017dc:	0b1b      	lsrs	r3, r3, #12
 80017de:	4d32      	ldr	r5, [pc, #200]	; (80018a8 <__gedf2+0xe0>)
 80017e0:	030f      	lsls	r7, r1, #12
 80017e2:	004a      	lsls	r2, r1, #1
 80017e4:	4699      	mov	r9, r3
 80017e6:	0043      	lsls	r3, r0, #1
 80017e8:	46a4      	mov	ip, r4
 80017ea:	46b0      	mov	r8, r6
 80017ec:	0b3f      	lsrs	r7, r7, #12
 80017ee:	0d52      	lsrs	r2, r2, #21
 80017f0:	0fc9      	lsrs	r1, r1, #31
 80017f2:	0d5b      	lsrs	r3, r3, #21
 80017f4:	0fc0      	lsrs	r0, r0, #31
 80017f6:	42aa      	cmp	r2, r5
 80017f8:	d029      	beq.n	800184e <__gedf2+0x86>
 80017fa:	42ab      	cmp	r3, r5
 80017fc:	d018      	beq.n	8001830 <__gedf2+0x68>
 80017fe:	2a00      	cmp	r2, #0
 8001800:	d12a      	bne.n	8001858 <__gedf2+0x90>
 8001802:	433c      	orrs	r4, r7
 8001804:	46a3      	mov	fp, r4
 8001806:	4265      	negs	r5, r4
 8001808:	4165      	adcs	r5, r4
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <__gedf2+0x4c>
 800180e:	464c      	mov	r4, r9
 8001810:	4326      	orrs	r6, r4
 8001812:	d027      	beq.n	8001864 <__gedf2+0x9c>
 8001814:	2d00      	cmp	r5, #0
 8001816:	d115      	bne.n	8001844 <__gedf2+0x7c>
 8001818:	4281      	cmp	r1, r0
 800181a:	d028      	beq.n	800186e <__gedf2+0xa6>
 800181c:	2002      	movs	r0, #2
 800181e:	3901      	subs	r1, #1
 8001820:	4008      	ands	r0, r1
 8001822:	3801      	subs	r0, #1
 8001824:	bcf0      	pop	{r4, r5, r6, r7}
 8001826:	46bb      	mov	fp, r7
 8001828:	46b2      	mov	sl, r6
 800182a:	46a9      	mov	r9, r5
 800182c:	46a0      	mov	r8, r4
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001830:	464d      	mov	r5, r9
 8001832:	432e      	orrs	r6, r5
 8001834:	d12f      	bne.n	8001896 <__gedf2+0xce>
 8001836:	2a00      	cmp	r2, #0
 8001838:	d1ee      	bne.n	8001818 <__gedf2+0x50>
 800183a:	433c      	orrs	r4, r7
 800183c:	4265      	negs	r5, r4
 800183e:	4165      	adcs	r5, r4
 8001840:	2d00      	cmp	r5, #0
 8001842:	d0e9      	beq.n	8001818 <__gedf2+0x50>
 8001844:	2800      	cmp	r0, #0
 8001846:	d1ed      	bne.n	8001824 <__gedf2+0x5c>
 8001848:	2001      	movs	r0, #1
 800184a:	4240      	negs	r0, r0
 800184c:	e7ea      	b.n	8001824 <__gedf2+0x5c>
 800184e:	003d      	movs	r5, r7
 8001850:	4325      	orrs	r5, r4
 8001852:	d120      	bne.n	8001896 <__gedf2+0xce>
 8001854:	4293      	cmp	r3, r2
 8001856:	d0eb      	beq.n	8001830 <__gedf2+0x68>
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1dd      	bne.n	8001818 <__gedf2+0x50>
 800185c:	464c      	mov	r4, r9
 800185e:	4326      	orrs	r6, r4
 8001860:	d1da      	bne.n	8001818 <__gedf2+0x50>
 8001862:	e7db      	b.n	800181c <__gedf2+0x54>
 8001864:	465b      	mov	r3, fp
 8001866:	2000      	movs	r0, #0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0db      	beq.n	8001824 <__gedf2+0x5c>
 800186c:	e7d6      	b.n	800181c <__gedf2+0x54>
 800186e:	429a      	cmp	r2, r3
 8001870:	dc0a      	bgt.n	8001888 <__gedf2+0xc0>
 8001872:	dbe7      	blt.n	8001844 <__gedf2+0x7c>
 8001874:	454f      	cmp	r7, r9
 8001876:	d8d1      	bhi.n	800181c <__gedf2+0x54>
 8001878:	d010      	beq.n	800189c <__gedf2+0xd4>
 800187a:	2000      	movs	r0, #0
 800187c:	454f      	cmp	r7, r9
 800187e:	d2d1      	bcs.n	8001824 <__gedf2+0x5c>
 8001880:	2900      	cmp	r1, #0
 8001882:	d0e1      	beq.n	8001848 <__gedf2+0x80>
 8001884:	0008      	movs	r0, r1
 8001886:	e7cd      	b.n	8001824 <__gedf2+0x5c>
 8001888:	4243      	negs	r3, r0
 800188a:	4158      	adcs	r0, r3
 800188c:	2302      	movs	r3, #2
 800188e:	4240      	negs	r0, r0
 8001890:	4018      	ands	r0, r3
 8001892:	3801      	subs	r0, #1
 8001894:	e7c6      	b.n	8001824 <__gedf2+0x5c>
 8001896:	2002      	movs	r0, #2
 8001898:	4240      	negs	r0, r0
 800189a:	e7c3      	b.n	8001824 <__gedf2+0x5c>
 800189c:	45c4      	cmp	ip, r8
 800189e:	d8bd      	bhi.n	800181c <__gedf2+0x54>
 80018a0:	2000      	movs	r0, #0
 80018a2:	45c4      	cmp	ip, r8
 80018a4:	d2be      	bcs.n	8001824 <__gedf2+0x5c>
 80018a6:	e7eb      	b.n	8001880 <__gedf2+0xb8>
 80018a8:	000007ff 	.word	0x000007ff

080018ac <__ledf2>:
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	464e      	mov	r6, r9
 80018b0:	4645      	mov	r5, r8
 80018b2:	4657      	mov	r7, sl
 80018b4:	46de      	mov	lr, fp
 80018b6:	0004      	movs	r4, r0
 80018b8:	0018      	movs	r0, r3
 80018ba:	b5e0      	push	{r5, r6, r7, lr}
 80018bc:	0016      	movs	r6, r2
 80018be:	031b      	lsls	r3, r3, #12
 80018c0:	0b1b      	lsrs	r3, r3, #12
 80018c2:	4d31      	ldr	r5, [pc, #196]	; (8001988 <__ledf2+0xdc>)
 80018c4:	030f      	lsls	r7, r1, #12
 80018c6:	004a      	lsls	r2, r1, #1
 80018c8:	4699      	mov	r9, r3
 80018ca:	0043      	lsls	r3, r0, #1
 80018cc:	46a4      	mov	ip, r4
 80018ce:	46b0      	mov	r8, r6
 80018d0:	0b3f      	lsrs	r7, r7, #12
 80018d2:	0d52      	lsrs	r2, r2, #21
 80018d4:	0fc9      	lsrs	r1, r1, #31
 80018d6:	0d5b      	lsrs	r3, r3, #21
 80018d8:	0fc0      	lsrs	r0, r0, #31
 80018da:	42aa      	cmp	r2, r5
 80018dc:	d011      	beq.n	8001902 <__ledf2+0x56>
 80018de:	42ab      	cmp	r3, r5
 80018e0:	d014      	beq.n	800190c <__ledf2+0x60>
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	d12f      	bne.n	8001946 <__ledf2+0x9a>
 80018e6:	433c      	orrs	r4, r7
 80018e8:	46a3      	mov	fp, r4
 80018ea:	4265      	negs	r5, r4
 80018ec:	4165      	adcs	r5, r4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d114      	bne.n	800191c <__ledf2+0x70>
 80018f2:	464c      	mov	r4, r9
 80018f4:	4326      	orrs	r6, r4
 80018f6:	d111      	bne.n	800191c <__ledf2+0x70>
 80018f8:	465b      	mov	r3, fp
 80018fa:	2000      	movs	r0, #0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d017      	beq.n	8001930 <__ledf2+0x84>
 8001900:	e010      	b.n	8001924 <__ledf2+0x78>
 8001902:	003d      	movs	r5, r7
 8001904:	4325      	orrs	r5, r4
 8001906:	d112      	bne.n	800192e <__ledf2+0x82>
 8001908:	4293      	cmp	r3, r2
 800190a:	d11c      	bne.n	8001946 <__ledf2+0x9a>
 800190c:	464d      	mov	r5, r9
 800190e:	432e      	orrs	r6, r5
 8001910:	d10d      	bne.n	800192e <__ledf2+0x82>
 8001912:	2a00      	cmp	r2, #0
 8001914:	d104      	bne.n	8001920 <__ledf2+0x74>
 8001916:	433c      	orrs	r4, r7
 8001918:	4265      	negs	r5, r4
 800191a:	4165      	adcs	r5, r4
 800191c:	2d00      	cmp	r5, #0
 800191e:	d10d      	bne.n	800193c <__ledf2+0x90>
 8001920:	4281      	cmp	r1, r0
 8001922:	d016      	beq.n	8001952 <__ledf2+0xa6>
 8001924:	2002      	movs	r0, #2
 8001926:	3901      	subs	r1, #1
 8001928:	4008      	ands	r0, r1
 800192a:	3801      	subs	r0, #1
 800192c:	e000      	b.n	8001930 <__ledf2+0x84>
 800192e:	2002      	movs	r0, #2
 8001930:	bcf0      	pop	{r4, r5, r6, r7}
 8001932:	46bb      	mov	fp, r7
 8001934:	46b2      	mov	sl, r6
 8001936:	46a9      	mov	r9, r5
 8001938:	46a0      	mov	r8, r4
 800193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193c:	2800      	cmp	r0, #0
 800193e:	d1f7      	bne.n	8001930 <__ledf2+0x84>
 8001940:	2001      	movs	r0, #1
 8001942:	4240      	negs	r0, r0
 8001944:	e7f4      	b.n	8001930 <__ledf2+0x84>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ea      	bne.n	8001920 <__ledf2+0x74>
 800194a:	464c      	mov	r4, r9
 800194c:	4326      	orrs	r6, r4
 800194e:	d1e7      	bne.n	8001920 <__ledf2+0x74>
 8001950:	e7e8      	b.n	8001924 <__ledf2+0x78>
 8001952:	429a      	cmp	r2, r3
 8001954:	dd06      	ble.n	8001964 <__ledf2+0xb8>
 8001956:	4243      	negs	r3, r0
 8001958:	4158      	adcs	r0, r3
 800195a:	2302      	movs	r3, #2
 800195c:	4240      	negs	r0, r0
 800195e:	4018      	ands	r0, r3
 8001960:	3801      	subs	r0, #1
 8001962:	e7e5      	b.n	8001930 <__ledf2+0x84>
 8001964:	429a      	cmp	r2, r3
 8001966:	dbe9      	blt.n	800193c <__ledf2+0x90>
 8001968:	454f      	cmp	r7, r9
 800196a:	d8db      	bhi.n	8001924 <__ledf2+0x78>
 800196c:	d006      	beq.n	800197c <__ledf2+0xd0>
 800196e:	2000      	movs	r0, #0
 8001970:	454f      	cmp	r7, r9
 8001972:	d2dd      	bcs.n	8001930 <__ledf2+0x84>
 8001974:	2900      	cmp	r1, #0
 8001976:	d0e3      	beq.n	8001940 <__ledf2+0x94>
 8001978:	0008      	movs	r0, r1
 800197a:	e7d9      	b.n	8001930 <__ledf2+0x84>
 800197c:	45c4      	cmp	ip, r8
 800197e:	d8d1      	bhi.n	8001924 <__ledf2+0x78>
 8001980:	2000      	movs	r0, #0
 8001982:	45c4      	cmp	ip, r8
 8001984:	d2d4      	bcs.n	8001930 <__ledf2+0x84>
 8001986:	e7f5      	b.n	8001974 <__ledf2+0xc8>
 8001988:	000007ff 	.word	0x000007ff

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f001 fb46 	bl	8003020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f9f4 	bl	8001d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f000 fcd0 	bl	800233c <MX_GPIO_Init>
  MX_TIM6_Init();
 800199c:	f000 fc38 	bl	8002210 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80019a0:	f000 fc9c 	bl	80022dc <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80019a4:	f000 fc70 	bl	8002288 <MX_TIM16_Init>
  MX_TIM1_Init();
 80019a8:	f000 fa4c 	bl	8001e44 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019ac:	f000 fb0c 	bl	8001fc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019b0:	f000 fb92 	bl	80020d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	2006      	movs	r0, #6
 80019ba:	f001 fc41 	bl	8003240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80019be:	2006      	movs	r0, #6
 80019c0:	f001 fc53 	bl	800326a <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start_IT(&htim16);
 80019c4:	4bcc      	ldr	r3, [pc, #816]	; (8001cf8 <main+0x36c>)
 80019c6:	0018      	movs	r0, r3
 80019c8:	f002 fc3c 	bl	8004244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80019cc:	4bcb      	ldr	r3, [pc, #812]	; (8001cfc <main+0x370>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	0018      	movs	r0, r3
 80019d2:	f002 fe9b 	bl	800470c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80019d6:	4bc9      	ldr	r3, [pc, #804]	; (8001cfc <main+0x370>)
 80019d8:	2104      	movs	r1, #4
 80019da:	0018      	movs	r0, r3
 80019dc:	f002 fe96 	bl	800470c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80019e0:	4bc6      	ldr	r3, [pc, #792]	; (8001cfc <main+0x370>)
 80019e2:	2108      	movs	r1, #8
 80019e4:	0018      	movs	r0, r3
 80019e6:	f002 fe91 	bl	800470c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80019ea:	4bc4      	ldr	r3, [pc, #784]	; (8001cfc <main+0x370>)
 80019ec:	210c      	movs	r1, #12
 80019ee:	0018      	movs	r0, r3
 80019f0:	f002 fe8c 	bl	800470c <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // sample the IR sensors and store the result in the corresponding variables
	  left2 = (HAL_GPIO_ReadPin(GPIOB, left2_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 80019f4:	4bc2      	ldr	r3, [pc, #776]	; (8001d00 <main+0x374>)
 80019f6:	2102      	movs	r1, #2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f001 fe41 	bl	8003680 <HAL_GPIO_ReadPin>
 80019fe:	0003      	movs	r3, r0
 8001a00:	3b01      	subs	r3, #1
 8001a02:	425a      	negs	r2, r3
 8001a04:	4153      	adcs	r3, r2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	001a      	movs	r2, r3
 8001a0a:	4bbe      	ldr	r3, [pc, #760]	; (8001d04 <main+0x378>)
 8001a0c:	701a      	strb	r2, [r3, #0]
	  left1 = (HAL_GPIO_ReadPin(GPIOB, left1_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001a0e:	4bbc      	ldr	r3, [pc, #752]	; (8001d00 <main+0x374>)
 8001a10:	2101      	movs	r1, #1
 8001a12:	0018      	movs	r0, r3
 8001a14:	f001 fe34 	bl	8003680 <HAL_GPIO_ReadPin>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	425a      	negs	r2, r3
 8001a1e:	4153      	adcs	r3, r2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	001a      	movs	r2, r3
 8001a24:	4bb8      	ldr	r3, [pc, #736]	; (8001d08 <main+0x37c>)
 8001a26:	701a      	strb	r2, [r3, #0]
	  center = (HAL_GPIO_ReadPin(GPIOC, center_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001a28:	4bb8      	ldr	r3, [pc, #736]	; (8001d0c <main+0x380>)
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f001 fe27 	bl	8003680 <HAL_GPIO_ReadPin>
 8001a32:	0003      	movs	r3, r0
 8001a34:	3b01      	subs	r3, #1
 8001a36:	425a      	negs	r2, r3
 8001a38:	4153      	adcs	r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	4bb4      	ldr	r3, [pc, #720]	; (8001d10 <main+0x384>)
 8001a40:	701a      	strb	r2, [r3, #0]
	  right1 = (HAL_GPIO_ReadPin(GPIOC, right1_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001a42:	4bb2      	ldr	r3, [pc, #712]	; (8001d0c <main+0x380>)
 8001a44:	2110      	movs	r1, #16
 8001a46:	0018      	movs	r0, r3
 8001a48:	f001 fe1a 	bl	8003680 <HAL_GPIO_ReadPin>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	425a      	negs	r2, r3
 8001a52:	4153      	adcs	r3, r2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	001a      	movs	r2, r3
 8001a58:	4bae      	ldr	r3, [pc, #696]	; (8001d14 <main+0x388>)
 8001a5a:	701a      	strb	r2, [r3, #0]
	  right2 = (HAL_GPIO_ReadPin(right2_ir_GPIO_Port, right2_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001a5c:	2390      	movs	r3, #144	; 0x90
 8001a5e:	05db      	lsls	r3, r3, #23
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0018      	movs	r0, r3
 8001a64:	f001 fe0c 	bl	8003680 <HAL_GPIO_ReadPin>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	425a      	negs	r2, r3
 8001a6e:	4153      	adcs	r3, r2
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	001a      	movs	r2, r3
 8001a74:	4ba8      	ldr	r3, [pc, #672]	; (8001d18 <main+0x38c>)
 8001a76:	701a      	strb	r2, [r3, #0]

	  // create a state machine to control the robot
	  switch (robot_state) {
 8001a78:	4ba8      	ldr	r3, [pc, #672]	; (8001d1c <main+0x390>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d900      	bls.n	8001a82 <main+0xf6>
 8001a80:	e16b      	b.n	8001d5a <main+0x3ce>
 8001a82:	009a      	lsls	r2, r3, #2
 8001a84:	4ba6      	ldr	r3, [pc, #664]	; (8001d20 <main+0x394>)
 8001a86:	18d3      	adds	r3, r2, r3
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	469f      	mov	pc, r3
		  case idle:
			  stop();
 8001a8c:	f000 ff1e 	bl	80028cc <stop>
			  if (sw_pushed) {
 8001a90:	4ba4      	ldr	r3, [pc, #656]	; (8001d24 <main+0x398>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d100      	bne.n	8001a9a <main+0x10e>
 8001a98:	e161      	b.n	8001d5e <main+0x3d2>
				  sw_pushed = 0;
 8001a9a:	4ba2      	ldr	r3, [pc, #648]	; (8001d24 <main+0x398>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
				  robot_state = follow_line;
 8001aa0:	4b9e      	ldr	r3, [pc, #632]	; (8001d1c <main+0x390>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8001aa6:	e15a      	b.n	8001d5e <main+0x3d2>
		  case follow_line:
			  if (right1 && !left1) {
 8001aa8:	4b9a      	ldr	r3, [pc, #616]	; (8001d14 <main+0x388>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <main+0x132>
 8001ab0:	4b95      	ldr	r3, [pc, #596]	; (8001d08 <main+0x37c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <main+0x132>
				  steer_right();
 8001ab8:	f000 fe2c 	bl	8002714 <steer_right>
 8001abc:	e027      	b.n	8001b0e <main+0x182>
			  }
			  else if (left1 && !right1) {
 8001abe:	4b92      	ldr	r3, [pc, #584]	; (8001d08 <main+0x37c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <main+0x148>
 8001ac6:	4b93      	ldr	r3, [pc, #588]	; (8001d14 <main+0x388>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <main+0x148>
				  steer_left();
 8001ace:	f000 fe8f 	bl	80027f0 <steer_left>
 8001ad2:	e01c      	b.n	8001b0e <main+0x182>
			  }
			  else if (left2 && left1 && center && right1 && right2) {
 8001ad4:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <main+0x378>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d016      	beq.n	8001b0a <main+0x17e>
 8001adc:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <main+0x37c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <main+0x17e>
 8001ae4:	4b8a      	ldr	r3, [pc, #552]	; (8001d10 <main+0x384>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00e      	beq.n	8001b0a <main+0x17e>
 8001aec:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <main+0x388>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <main+0x17e>
 8001af4:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <main+0x38c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <main+0x17e>
				  sw_pushed = 0;
 8001afc:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <main+0x398>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
				  robot_state = finish;
 8001b02:	4b86      	ldr	r3, [pc, #536]	; (8001d1c <main+0x390>)
 8001b04:	2205      	movs	r2, #5
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e001      	b.n	8001b0e <main+0x182>
			  }
			  else {
				  move_forward();
 8001b0a:	f000 fd27 	bl	800255c <move_forward>
			  }

			  if (sw_pushed) {
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <main+0x398>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d100      	bne.n	8001b18 <main+0x18c>
 8001b16:	e124      	b.n	8001d62 <main+0x3d6>
				  sw_pushed = 0;
 8001b18:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <main+0x398>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
				  robot_state = retrace;
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <main+0x390>)
 8001b20:	2204      	movs	r2, #4
 8001b22:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8001b24:	e11d      	b.n	8001d62 <main+0x3d6>
		  case turn_right:
			  if ((front_left_enc_count - wheel_enc_count[0]) >= travel_dist &&
 8001b26:	4b80      	ldr	r3, [pc, #512]	; (8001d28 <main+0x39c>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <main+0x3a0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	1ad2      	subs	r2, r2, r3
 8001b30:	4b7f      	ldr	r3, [pc, #508]	; (8001d30 <main+0x3a4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d325      	bcc.n	8001b84 <main+0x1f8>
					  (front_right_enc_count - wheel_enc_count[1]) >= travel_dist &&
 8001b38:	4b7e      	ldr	r3, [pc, #504]	; (8001d34 <main+0x3a8>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <main+0x3a0>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <main+0x3a4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
			  if ((front_left_enc_count - wheel_enc_count[0]) >= travel_dist &&
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d31c      	bcc.n	8001b84 <main+0x1f8>
					  (back_left_enc_count - wheel_enc_count[2]) >= travel_dist &&
 8001b4a:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <main+0x3ac>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <main+0x3a0>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	1ad2      	subs	r2, r2, r3
 8001b54:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <main+0x3a4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
					  (front_right_enc_count - wheel_enc_count[1]) >= travel_dist &&
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d313      	bcc.n	8001b84 <main+0x1f8>
					  (back_right_enc_count - wheel_enc_count[3]) >= travel_dist) {
 8001b5c:	4b77      	ldr	r3, [pc, #476]	; (8001d3c <main+0x3b0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <main+0x3a0>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <main+0x3a4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
					  (back_left_enc_count - wheel_enc_count[2]) >= travel_dist &&
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d30a      	bcc.n	8001b84 <main+0x1f8>
				  if (center) {
 8001b6e:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <main+0x384>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <main+0x1f2>
					  robot_state = follow_line;
 8001b76:	4b69      	ldr	r3, [pc, #420]	; (8001d1c <main+0x390>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
				  if (center) {
 8001b7c:	e004      	b.n	8001b88 <main+0x1fc>
				  }
				  else {
					  steer_right();
 8001b7e:	f000 fdc9 	bl	8002714 <steer_right>
				  if (center) {
 8001b82:	e001      	b.n	8001b88 <main+0x1fc>
				  }
			  }
			  else {
				  move_forward();
 8001b84:	f000 fcea 	bl	800255c <move_forward>
			  }

			  if (sw_pushed) {
 8001b88:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <main+0x398>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d100      	bne.n	8001b92 <main+0x206>
 8001b90:	e0e9      	b.n	8001d66 <main+0x3da>
				  sw_pushed = 0;
 8001b92:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <main+0x398>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001b98:	4b60      	ldr	r3, [pc, #384]	; (8001d1c <main+0x390>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8001b9e:	e0e2      	b.n	8001d66 <main+0x3da>
		  case turn_left:
			  if ((front_left_enc_count - wheel_enc_count[0]) >= travel_dist &&
 8001ba0:	4b61      	ldr	r3, [pc, #388]	; (8001d28 <main+0x39c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <main+0x3a0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1ad2      	subs	r2, r2, r3
 8001baa:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <main+0x3a4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d325      	bcc.n	8001bfe <main+0x272>
					  (front_right_enc_count - wheel_enc_count[1]) >= travel_dist &&
 8001bb2:	4b60      	ldr	r3, [pc, #384]	; (8001d34 <main+0x3a8>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <main+0x3a0>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	1ad2      	subs	r2, r2, r3
 8001bbc:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <main+0x3a4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
			  if ((front_left_enc_count - wheel_enc_count[0]) >= travel_dist &&
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d31c      	bcc.n	8001bfe <main+0x272>
					  (back_left_enc_count - wheel_enc_count[2]) >= travel_dist &&
 8001bc4:	4b5c      	ldr	r3, [pc, #368]	; (8001d38 <main+0x3ac>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <main+0x3a0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	1ad2      	subs	r2, r2, r3
 8001bce:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <main+0x3a4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
					  (front_right_enc_count - wheel_enc_count[1]) >= travel_dist &&
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d313      	bcc.n	8001bfe <main+0x272>
					  (back_right_enc_count - wheel_enc_count[3]) >= travel_dist) {
 8001bd6:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <main+0x3b0>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <main+0x3a0>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	1ad2      	subs	r2, r2, r3
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <main+0x3a4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
					  (back_left_enc_count - wheel_enc_count[2]) >= travel_dist &&
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d30a      	bcc.n	8001bfe <main+0x272>
				  if (center) {
 8001be8:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <main+0x384>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <main+0x26c>
					  robot_state = follow_line;
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <main+0x390>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
				  if (center) {
 8001bf6:	e004      	b.n	8001c02 <main+0x276>
				  }
				  else {
					  steer_left();
 8001bf8:	f000 fdfa 	bl	80027f0 <steer_left>
				  if (center) {
 8001bfc:	e001      	b.n	8001c02 <main+0x276>
				  }
			  }
			  else {
				  move_forward();
 8001bfe:	f000 fcad 	bl	800255c <move_forward>
			  }

			  if (sw_pushed) {
 8001c02:	4b48      	ldr	r3, [pc, #288]	; (8001d24 <main+0x398>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d100      	bne.n	8001c0c <main+0x280>
 8001c0a:	e0ae      	b.n	8001d6a <main+0x3de>
				  sw_pushed = 0;
 8001c0c:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <main+0x398>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001c12:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <main+0x390>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8001c18:	e0a7      	b.n	8001d6a <main+0x3de>
		  case retrace:
			  if (right2) {
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <main+0x38c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d013      	beq.n	8001c4a <main+0x2be>
				  wheel_enc_count[0] = front_left_enc_count;
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <main+0x39c>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <main+0x3a0>)
 8001c28:	601a      	str	r2, [r3, #0]
				  wheel_enc_count[1] = front_right_enc_count;
 8001c2a:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <main+0x3a8>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <main+0x3a0>)
 8001c30:	605a      	str	r2, [r3, #4]
				  wheel_enc_count[2] = back_left_enc_count;
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <main+0x3ac>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <main+0x3a0>)
 8001c38:	609a      	str	r2, [r3, #8]
				  wheel_enc_count[3] = back_right_enc_count;
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <main+0x3b0>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <main+0x3a0>)
 8001c40:	60da      	str	r2, [r3, #12]
				  robot_state = turn_right;
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <main+0x390>)
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e04a      	b.n	8001ce0 <main+0x354>
			  }
			  else if (left2) {
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <main+0x378>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d013      	beq.n	8001c7a <main+0x2ee>
				  wheel_enc_count[0] = front_left_enc_count;
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <main+0x39c>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <main+0x3a0>)
 8001c58:	601a      	str	r2, [r3, #0]
				  wheel_enc_count[1] = front_right_enc_count;
 8001c5a:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <main+0x3a8>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <main+0x3a0>)
 8001c60:	605a      	str	r2, [r3, #4]
				  wheel_enc_count[2] = back_left_enc_count;
 8001c62:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <main+0x3ac>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <main+0x3a0>)
 8001c68:	609a      	str	r2, [r3, #8]
				  wheel_enc_count[3] = back_right_enc_count;
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <main+0x3b0>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <main+0x3a0>)
 8001c70:	60da      	str	r2, [r3, #12]
				  robot_state = turn_left;
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <main+0x390>)
 8001c74:	2203      	movs	r2, #3
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e032      	b.n	8001ce0 <main+0x354>
			  }
			  else if (right1 && !left1) {
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <main+0x388>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <main+0x304>
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <main+0x37c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <main+0x304>
				  steer_left();
 8001c8a:	f000 fdb1 	bl	80027f0 <steer_left>
 8001c8e:	e027      	b.n	8001ce0 <main+0x354>
			  }
			  else if (left1 && !right1) {
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <main+0x37c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <main+0x31a>
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <main+0x388>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <main+0x31a>
				  steer_right();
 8001ca0:	f000 fd38 	bl	8002714 <steer_right>
 8001ca4:	e01c      	b.n	8001ce0 <main+0x354>
			  }
			  else if (left2 && left1 && center && right1 && right2) {
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <main+0x378>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d016      	beq.n	8001cdc <main+0x350>
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <main+0x37c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d012      	beq.n	8001cdc <main+0x350>
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <main+0x384>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00e      	beq.n	8001cdc <main+0x350>
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <main+0x388>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00a      	beq.n	8001cdc <main+0x350>
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <main+0x38c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <main+0x350>
				  sw_pushed = 0;
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <main+0x398>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
				  robot_state = finish;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <main+0x390>)
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	e001      	b.n	8001ce0 <main+0x354>
			  }
			  else {
				  move_backward();
 8001cdc:	f000 fcac 	bl	8002638 <move_backward>
			  }

			  if (sw_pushed) {
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <main+0x398>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d042      	beq.n	8001d6e <main+0x3e2>
				  sw_pushed = 0;
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <main+0x398>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <main+0x390>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8001cf4:	e03b      	b.n	8001d6e <main+0x3e2>
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	200002d8 	.word	0x200002d8
 8001cfc:	20000130 	.word	0x20000130
 8001d00:	48000400 	.word	0x48000400
 8001d04:	200000fc 	.word	0x200000fc
 8001d08:	200000fd 	.word	0x200000fd
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	200000fe 	.word	0x200000fe
 8001d14:	200000ff 	.word	0x200000ff
 8001d18:	20000100 	.word	0x20000100
 8001d1c:	20000094 	.word	0x20000094
 8001d20:	08007420 	.word	0x08007420
 8001d24:	20000095 	.word	0x20000095
 8001d28:	20000104 	.word	0x20000104
 8001d2c:	20000114 	.word	0x20000114
 8001d30:	20000004 	.word	0x20000004
 8001d34:	20000108 	.word	0x20000108
 8001d38:	2000010c 	.word	0x2000010c
 8001d3c:	20000110 	.word	0x20000110
		  case finish:
			  stop();
 8001d40:	f000 fdc4 	bl	80028cc <stop>
			  if (sw_pushed) {
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <main+0x3ec>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d012      	beq.n	8001d72 <main+0x3e6>
				  sw_pushed = 0;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <main+0x3ec>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <main+0x3f0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8001d58:	e00b      	b.n	8001d72 <main+0x3e6>
		  default:
			  break;
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	e64a      	b.n	80019f4 <main+0x68>
			  break;
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	e648      	b.n	80019f4 <main+0x68>
			  break;
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	e646      	b.n	80019f4 <main+0x68>
			  break;
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	e644      	b.n	80019f4 <main+0x68>
			  break;
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	e642      	b.n	80019f4 <main+0x68>
			  break;
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	e640      	b.n	80019f4 <main+0x68>
			  break;
 8001d72:	46c0      	nop			; (mov r8, r8)
	  left2 = (HAL_GPIO_ReadPin(GPIOB, left2_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001d74:	e63e      	b.n	80019f4 <main+0x68>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	20000095 	.word	0x20000095
 8001d7c:	20000094 	.word	0x20000094

08001d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b097      	sub	sp, #92	; 0x5c
 8001d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d86:	2428      	movs	r4, #40	; 0x28
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	2330      	movs	r3, #48	; 0x30
 8001d8e:	001a      	movs	r2, r3
 8001d90:	2100      	movs	r1, #0
 8001d92:	f004 fea1 	bl	8006ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d96:	2318      	movs	r3, #24
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	001a      	movs	r2, r3
 8001da0:	2100      	movs	r1, #0
 8001da2:	f004 fe99 	bl	8006ad8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	0018      	movs	r0, r3
 8001daa:	2314      	movs	r3, #20
 8001dac:	001a      	movs	r2, r3
 8001dae:	2100      	movs	r1, #0
 8001db0:	f004 fe92 	bl	8006ad8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db4:	0021      	movs	r1, r4
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2202      	movs	r2, #2
 8001dba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	2202      	movs	r2, #2
 8001dcc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	22a0      	movs	r2, #160	; 0xa0
 8001dd8:	0392      	lsls	r2, r2, #14
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	2200      	movs	r2, #0
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	0018      	movs	r0, r3
 8001de6:	f001 fca1 	bl	800372c <HAL_RCC_OscConfig>
 8001dea:	1e03      	subs	r3, r0, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001dee:	f000 fead 	bl	8002b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df2:	2118      	movs	r1, #24
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	2207      	movs	r2, #7
 8001df8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	2101      	movs	r1, #1
 8001e10:	0018      	movs	r0, r3
 8001e12:	f001 ffa5 	bl	8003d60 <HAL_RCC_ClockConfig>
 8001e16:	1e03      	subs	r3, r0, #0
 8001e18:	d001      	beq.n	8001e1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e1a:	f000 fe97 	bl	8002b4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f002 f8db 	bl	8003fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001e36:	f000 fe89 	bl	8002b4c <Error_Handler>
  }
}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b017      	add	sp, #92	; 0x5c
 8001e40:	bd90      	pop	{r4, r7, pc}
	...

08001e44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	; 0x58
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4a:	2348      	movs	r3, #72	; 0x48
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	0018      	movs	r0, r3
 8001e50:	2310      	movs	r3, #16
 8001e52:	001a      	movs	r2, r3
 8001e54:	2100      	movs	r1, #0
 8001e56:	f004 fe3f 	bl	8006ad8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	0018      	movs	r0, r3
 8001e60:	2308      	movs	r3, #8
 8001e62:	001a      	movs	r2, r3
 8001e64:	2100      	movs	r1, #0
 8001e66:	f004 fe37 	bl	8006ad8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6a:	2324      	movs	r3, #36	; 0x24
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	0018      	movs	r0, r3
 8001e70:	231c      	movs	r3, #28
 8001e72:	001a      	movs	r2, r3
 8001e74:	2100      	movs	r1, #0
 8001e76:	f004 fe2f 	bl	8006ad8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	2320      	movs	r3, #32
 8001e80:	001a      	movs	r2, r3
 8001e82:	2100      	movs	r1, #0
 8001e84:	f004 fe28 	bl	8006ad8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e88:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001e8a:	4a4e      	ldr	r2, [pc, #312]	; (8001fc4 <MX_TIM1_Init+0x180>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001e90:	222f      	movs	r2, #47	; 0x2f
 8001e92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001e9a:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001e9c:	2263      	movs	r2, #99	; 0x63
 8001e9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea0:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f002 f975 	bl	80041a4 <HAL_TIM_Base_Init>
 8001eba:	1e03      	subs	r3, r0, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001ebe:	f000 fe45 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	2148      	movs	r1, #72	; 0x48
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	0152      	lsls	r2, r2, #5
 8001eca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ecc:	187a      	adds	r2, r7, r1
 8001ece:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001ed0:	0011      	movs	r1, r2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f002 ff80 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 8001ed8:	1e03      	subs	r3, r0, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001edc:	f000 fe36 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ee0:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f002 fa2e 	bl	8004344 <HAL_TIM_PWM_Init>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001eec:	f000 fe2e 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2140      	movs	r1, #64	; 0x40
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	2200      	movs	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001efe:	187a      	adds	r2, r7, r1
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001f02:	0011      	movs	r1, r2
 8001f04:	0018      	movs	r0, r3
 8001f06:	f003 fcbf 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001f0e:	f000 fe1d 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f12:	2124      	movs	r1, #36	; 0x24
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	2260      	movs	r2, #96	; 0x60
 8001f18:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	2232      	movs	r2, #50	; 0x32
 8001f1e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f26:	187b      	adds	r3, r7, r1
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f32:	187b      	adds	r3, r7, r1
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f3e:	1879      	adds	r1, r7, r1
 8001f40:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	0018      	movs	r0, r3
 8001f46:	f002 fe81 	bl	8004c4c <HAL_TIM_PWM_ConfigChannel>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001f4e:	f000 fdfd 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001f52:	2124      	movs	r1, #36	; 0x24
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	2200      	movs	r2, #0
 8001f58:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f5a:	1879      	adds	r1, r7, r1
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001f5e:	2208      	movs	r2, #8
 8001f60:	0018      	movs	r0, r3
 8001f62:	f002 fe73 	bl	8004c4c <HAL_TIM_PWM_ConfigChannel>
 8001f66:	1e03      	subs	r3, r0, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001f6a:	f000 fdef 	bl	8002b4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	0192      	lsls	r2, r2, #6
 8001f92:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f9a:	1d3a      	adds	r2, r7, #4
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f003 fccf 	bl	8005944 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8001faa:	f000 fdcf 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <MX_TIM1_Init+0x17c>)
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 fec5 	bl	8002d40 <HAL_TIM_MspPostInit>

}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b016      	add	sp, #88	; 0x58
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	20000248 	.word	0x20000248
 8001fc4:	40012c00 	.word	0x40012c00

08001fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	; 0x38
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	2328      	movs	r3, #40	; 0x28
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f004 fd7d 	bl	8006ad8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fde:	2320      	movs	r3, #32
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	2100      	movs	r1, #0
 8001fea:	f004 fd75 	bl	8006ad8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	231c      	movs	r3, #28
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	f004 fd6e 	bl	8006ad8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <MX_TIM2_Init+0x10c>)
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	05d2      	lsls	r2, r2, #23
 8002002:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <MX_TIM2_Init+0x10c>)
 8002006:	222f      	movs	r2, #47	; 0x2f
 8002008:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <MX_TIM2_Init+0x10c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002010:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <MX_TIM2_Init+0x10c>)
 8002012:	2263      	movs	r2, #99	; 0x63
 8002014:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <MX_TIM2_Init+0x10c>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <MX_TIM2_Init+0x10c>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <MX_TIM2_Init+0x10c>)
 8002024:	0018      	movs	r0, r3
 8002026:	f002 f8bd 	bl	80041a4 <HAL_TIM_Base_Init>
 800202a:	1e03      	subs	r3, r0, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800202e:	f000 fd8d 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002032:	2128      	movs	r1, #40	; 0x28
 8002034:	187b      	adds	r3, r7, r1
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	0152      	lsls	r2, r2, #5
 800203a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800203c:	187a      	adds	r2, r7, r1
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <MX_TIM2_Init+0x10c>)
 8002040:	0011      	movs	r1, r2
 8002042:	0018      	movs	r0, r3
 8002044:	f002 fec8 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800204c:	f000 fd7e 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002050:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <MX_TIM2_Init+0x10c>)
 8002052:	0018      	movs	r0, r3
 8002054:	f002 f976 	bl	8004344 <HAL_TIM_PWM_Init>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800205c:	f000 fd76 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002060:	2120      	movs	r1, #32
 8002062:	187b      	adds	r3, r7, r1
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002068:	187b      	adds	r3, r7, r1
 800206a:	2200      	movs	r2, #0
 800206c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800206e:	187a      	adds	r2, r7, r1
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <MX_TIM2_Init+0x10c>)
 8002072:	0011      	movs	r1, r2
 8002074:	0018      	movs	r0, r3
 8002076:	f003 fc07 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800207e:	f000 fd65 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2260      	movs	r2, #96	; 0x60
 8002086:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2232      	movs	r2, #50	; 0x32
 800208c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800209a:	1d39      	adds	r1, r7, #4
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <MX_TIM2_Init+0x10c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	0018      	movs	r0, r3
 80020a2:	f002 fdd3 	bl	8004c4c <HAL_TIM_PWM_ConfigChannel>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80020aa:	f000 fd4f 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020ae:	1d39      	adds	r1, r7, #4
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <MX_TIM2_Init+0x10c>)
 80020b2:	2208      	movs	r2, #8
 80020b4:	0018      	movs	r0, r3
 80020b6:	f002 fdc9 	bl	8004c4c <HAL_TIM_PWM_ConfigChannel>
 80020ba:	1e03      	subs	r3, r0, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80020be:	f000 fd45 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <MX_TIM2_Init+0x10c>)
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fe3b 	bl	8002d40 <HAL_TIM_MspPostInit>

}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b00e      	add	sp, #56	; 0x38
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	20000290 	.word	0x20000290

080020d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	2318      	movs	r3, #24
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	0018      	movs	r0, r3
 80020e4:	2310      	movs	r3, #16
 80020e6:	001a      	movs	r2, r3
 80020e8:	2100      	movs	r1, #0
 80020ea:	f004 fcf5 	bl	8006ad8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	2310      	movs	r3, #16
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	0018      	movs	r0, r3
 80020f4:	2308      	movs	r3, #8
 80020f6:	001a      	movs	r2, r3
 80020f8:	2100      	movs	r1, #0
 80020fa:	f004 fced 	bl	8006ad8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020fe:	003b      	movs	r3, r7
 8002100:	0018      	movs	r0, r3
 8002102:	2310      	movs	r3, #16
 8002104:	001a      	movs	r2, r3
 8002106:	2100      	movs	r1, #0
 8002108:	f004 fce6 	bl	8006ad8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800210c:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <MX_TIM3_Init+0x128>)
 800210e:	4a3d      	ldr	r2, [pc, #244]	; (8002204 <MX_TIM3_Init+0x12c>)
 8002110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <MX_TIM3_Init+0x128>)
 8002114:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <MX_TIM3_Init+0x130>)
 8002116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b39      	ldr	r3, [pc, #228]	; (8002200 <MX_TIM3_Init+0x128>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800211e:	4b38      	ldr	r3, [pc, #224]	; (8002200 <MX_TIM3_Init+0x128>)
 8002120:	4a3a      	ldr	r2, [pc, #232]	; (800220c <MX_TIM3_Init+0x134>)
 8002122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b36      	ldr	r3, [pc, #216]	; (8002200 <MX_TIM3_Init+0x128>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b35      	ldr	r3, [pc, #212]	; (8002200 <MX_TIM3_Init+0x128>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <MX_TIM3_Init+0x128>)
 8002132:	0018      	movs	r0, r3
 8002134:	f002 f836 	bl	80041a4 <HAL_TIM_Base_Init>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800213c:	f000 fd06 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	2118      	movs	r1, #24
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	0152      	lsls	r2, r2, #5
 8002148:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800214a:	187a      	adds	r2, r7, r1
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <MX_TIM3_Init+0x128>)
 800214e:	0011      	movs	r1, r2
 8002150:	0018      	movs	r0, r3
 8002152:	f002 fe41 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d001      	beq.n	800215e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800215a:	f000 fcf7 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <MX_TIM3_Init+0x128>)
 8002160:	0018      	movs	r0, r3
 8002162:	f002 fa7b 	bl	800465c <HAL_TIM_IC_Init>
 8002166:	1e03      	subs	r3, r0, #0
 8002168:	d001      	beq.n	800216e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800216a:	f000 fcef 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216e:	2110      	movs	r1, #16
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800217c:	187a      	adds	r2, r7, r1
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <MX_TIM3_Init+0x128>)
 8002180:	0011      	movs	r1, r2
 8002182:	0018      	movs	r0, r3
 8002184:	f003 fb80 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	1e03      	subs	r3, r0, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800218c:	f000 fcde 	bl	8002b4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002190:	003b      	movs	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002196:	003b      	movs	r3, r7
 8002198:	2201      	movs	r2, #1
 800219a:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800219c:	003b      	movs	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 80021a2:	003b      	movs	r3, r7
 80021a4:	220f      	movs	r2, #15
 80021a6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021a8:	0039      	movs	r1, r7
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MX_TIM3_Init+0x128>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	0018      	movs	r0, r3
 80021b0:	f002 fca8 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 80021b4:	1e03      	subs	r3, r0, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80021b8:	f000 fcc8 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021bc:	0039      	movs	r1, r7
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <MX_TIM3_Init+0x128>)
 80021c0:	2204      	movs	r2, #4
 80021c2:	0018      	movs	r0, r3
 80021c4:	f002 fc9e 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80021cc:	f000 fcbe 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80021d0:	0039      	movs	r1, r7
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_TIM3_Init+0x128>)
 80021d4:	2208      	movs	r2, #8
 80021d6:	0018      	movs	r0, r3
 80021d8:	f002 fc94 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80021e0:	f000 fcb4 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80021e4:	0039      	movs	r1, r7
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_TIM3_Init+0x128>)
 80021e8:	220c      	movs	r2, #12
 80021ea:	0018      	movs	r0, r3
 80021ec:	f002 fc8a 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 80021f0:	1e03      	subs	r3, r0, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80021f4:	f000 fcaa 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b00a      	add	sp, #40	; 0x28
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000130 	.word	0x20000130
 8002204:	40000400 	.word	0x40000400
 8002208:	0000bb7f 	.word	0x0000bb7f
 800220c:	0000ffff 	.word	0x0000ffff

08002210 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002216:	003b      	movs	r3, r7
 8002218:	0018      	movs	r0, r3
 800221a:	2308      	movs	r3, #8
 800221c:	001a      	movs	r2, r3
 800221e:	2100      	movs	r1, #0
 8002220:	f004 fc5a 	bl	8006ad8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <MX_TIM6_Init+0x6c>)
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <MX_TIM6_Init+0x70>)
 8002228:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23;
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <MX_TIM6_Init+0x6c>)
 800222c:	2217      	movs	r2, #23
 800222e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <MX_TIM6_Init+0x6c>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_TIM6_Init+0x6c>)
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <MX_TIM6_Init+0x74>)
 800223a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <MX_TIM6_Init+0x6c>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_TIM6_Init+0x6c>)
 8002244:	0018      	movs	r0, r3
 8002246:	f001 ffad 	bl	80041a4 <HAL_TIM_Base_Init>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800224e:	f000 fc7d 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002252:	003b      	movs	r3, r7
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	003b      	movs	r3, r7
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800225e:	003a      	movs	r2, r7
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_TIM6_Init+0x6c>)
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f003 fb0f 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 800226a:	1e03      	subs	r3, r0, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800226e:	f000 fc6d 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	b002      	add	sp, #8
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	20000200 	.word	0x20000200
 8002280:	40001000 	.word	0x40001000
 8002284:	0000270f 	.word	0x0000270f

08002288 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <MX_TIM16_Init+0x44>)
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <MX_TIM16_Init+0x48>)
 8002290:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2399;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MX_TIM16_Init+0x44>)
 8002294:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <MX_TIM16_Init+0x4c>)
 8002296:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_TIM16_Init+0x44>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_TIM16_Init+0x44>)
 80022a0:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <MX_TIM16_Init+0x50>)
 80022a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_TIM16_Init+0x44>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_TIM16_Init+0x44>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_TIM16_Init+0x44>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <MX_TIM16_Init+0x44>)
 80022b8:	0018      	movs	r0, r3
 80022ba:	f001 ff73 	bl	80041a4 <HAL_TIM_Base_Init>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80022c2:	f000 fc43 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200002d8 	.word	0x200002d8
 80022d0:	40014400 	.word	0x40014400
 80022d4:	0000095f 	.word	0x0000095f
 80022d8:	0000270f 	.word	0x0000270f

080022dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_USART1_UART_Init+0x58>)
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <MX_USART1_UART_Init+0x5c>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <MX_USART1_UART_Init+0x58>)
 80022e8:	2296      	movs	r2, #150	; 0x96
 80022ea:	0192      	lsls	r2, r2, #6
 80022ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USART1_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_USART1_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USART1_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USART1_UART_Init+0x58>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USART1_UART_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USART1_UART_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USART1_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USART1_UART_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <MX_USART1_UART_Init+0x58>)
 8002320:	0018      	movs	r0, r3
 8002322:	f003 fb7d 	bl	8005a20 <HAL_UART_Init>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d001      	beq.n	800232e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800232a:	f000 fc0f 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000178 	.word	0x20000178
 8002338:	40013800 	.word	0x40013800

0800233c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b08b      	sub	sp, #44	; 0x2c
 8002340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002342:	2414      	movs	r4, #20
 8002344:	193b      	adds	r3, r7, r4
 8002346:	0018      	movs	r0, r3
 8002348:	2314      	movs	r3, #20
 800234a:	001a      	movs	r2, r3
 800234c:	2100      	movs	r1, #0
 800234e:	f004 fbc3 	bl	8006ad8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b4a      	ldr	r3, [pc, #296]	; (800247c <MX_GPIO_Init+0x140>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <MX_GPIO_Init+0x140>)
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	0289      	lsls	r1, r1, #10
 800235c:	430a      	orrs	r2, r1
 800235e:	615a      	str	r2, [r3, #20]
 8002360:	4b46      	ldr	r3, [pc, #280]	; (800247c <MX_GPIO_Init+0x140>)
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <MX_GPIO_Init+0x140>)
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	4b42      	ldr	r3, [pc, #264]	; (800247c <MX_GPIO_Init+0x140>)
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	0309      	lsls	r1, r1, #12
 8002378:	430a      	orrs	r2, r1
 800237a:	615a      	str	r2, [r3, #20]
 800237c:	4b3f      	ldr	r3, [pc, #252]	; (800247c <MX_GPIO_Init+0x140>)
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	031b      	lsls	r3, r3, #12
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b3c      	ldr	r3, [pc, #240]	; (800247c <MX_GPIO_Init+0x140>)
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <MX_GPIO_Init+0x140>)
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	02c9      	lsls	r1, r1, #11
 8002394:	430a      	orrs	r2, r1
 8002396:	615a      	str	r2, [r3, #20]
 8002398:	4b38      	ldr	r3, [pc, #224]	; (800247c <MX_GPIO_Init+0x140>)
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	02db      	lsls	r3, r3, #11
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a6:	4b35      	ldr	r3, [pc, #212]	; (800247c <MX_GPIO_Init+0x140>)
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <MX_GPIO_Init+0x140>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0349      	lsls	r1, r1, #13
 80023b0:	430a      	orrs	r2, r1
 80023b2:	615a      	str	r2, [r3, #20]
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <MX_GPIO_Init+0x140>)
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	035b      	lsls	r3, r3, #13
 80023bc:	4013      	ands	r3, r2
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, left_in2_Pin|left_in4_Pin|right_in2_Pin|right_in4_Pin, GPIO_PIN_RESET);
 80023c2:	492f      	ldr	r1, [pc, #188]	; (8002480 <MX_GPIO_Init+0x144>)
 80023c4:	2390      	movs	r3, #144	; 0x90
 80023c6:	05db      	lsls	r3, r3, #23
 80023c8:	2200      	movs	r2, #0
 80023ca:	0018      	movs	r0, r3
 80023cc:	f001 f975 	bl	80036ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : left_in2_Pin left_in4_Pin right_in2_Pin right_in4_Pin */
  GPIO_InitStruct.Pin = left_in2_Pin|left_in4_Pin|right_in2_Pin|right_in4_Pin;
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <MX_GPIO_Init+0x144>)
 80023d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	2201      	movs	r2, #1
 80023da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	193a      	adds	r2, r7, r4
 80023ea:	2390      	movs	r3, #144	; 0x90
 80023ec:	05db      	lsls	r3, r3, #23
 80023ee:	0011      	movs	r1, r2
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 ffd5 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : right2_ir_Pin */
  GPIO_InitStruct.Pin = right2_ir_Pin;
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fc:	193b      	adds	r3, r7, r4
 80023fe:	2200      	movs	r2, #0
 8002400:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	193b      	adds	r3, r7, r4
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(right2_ir_GPIO_Port, &GPIO_InitStruct);
 8002408:	193a      	adds	r2, r7, r4
 800240a:	2390      	movs	r3, #144	; 0x90
 800240c:	05db      	lsls	r3, r3, #23
 800240e:	0011      	movs	r1, r2
 8002410:	0018      	movs	r0, r3
 8002412:	f000 ffc5 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : right1_ir_Pin center_ir_Pin */
  GPIO_InitStruct.Pin = right1_ir_Pin|center_ir_Pin;
 8002416:	193b      	adds	r3, r7, r4
 8002418:	2230      	movs	r2, #48	; 0x30
 800241a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241c:	193b      	adds	r3, r7, r4
 800241e:	2200      	movs	r2, #0
 8002420:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002428:	193b      	adds	r3, r7, r4
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <MX_GPIO_Init+0x148>)
 800242c:	0019      	movs	r1, r3
 800242e:	0010      	movs	r0, r2
 8002430:	f000 ffb6 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : left1_ir_Pin left2_ir_Pin */
  GPIO_InitStruct.Pin = left1_ir_Pin|left2_ir_Pin;
 8002434:	193b      	adds	r3, r7, r4
 8002436:	2203      	movs	r2, #3
 8002438:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243a:	193b      	adds	r3, r7, r4
 800243c:	2200      	movs	r2, #0
 800243e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	193b      	adds	r3, r7, r4
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	193b      	adds	r3, r7, r4
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <MX_GPIO_Init+0x14c>)
 800244a:	0019      	movs	r1, r3
 800244c:	0010      	movs	r0, r2
 800244e:	f000 ffa7 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : bumper_sw_Pin */
  GPIO_InitStruct.Pin = bumper_sw_Pin;
 8002452:	0021      	movs	r1, r4
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2204      	movs	r2, #4
 8002458:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800245a:	187b      	adds	r3, r7, r1
 800245c:	2288      	movs	r2, #136	; 0x88
 800245e:	0352      	lsls	r2, r2, #13
 8002460:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	187b      	adds	r3, r7, r1
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(bumper_sw_GPIO_Port, &GPIO_InitStruct);
 8002468:	187b      	adds	r3, r7, r1
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <MX_GPIO_Init+0x150>)
 800246c:	0019      	movs	r1, r3
 800246e:	0010      	movs	r0, r2
 8002470:	f000 ff96 	bl	80033a0 <HAL_GPIO_Init>

}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b00b      	add	sp, #44	; 0x2c
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	00000a0a 	.word	0x00000a0a
 8002484:	48000800 	.word	0x48000800
 8002488:	48000400 	.word	0x48000400
 800248c:	48000c00 	.word	0x48000c00

08002490 <calc_pulse_val>:

/* USER CODE BEGIN 4 */
uint16_t calc_pulse_val(TIM_HandleTypeDef *htim, uint8_t pulse_width) {
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	000a      	movs	r2, r1
 800249a:	1cfb      	adds	r3, r7, #3
 800249c:	701a      	strb	r2, [r3, #0]
	return (uint16_t) (((float) (pulse_width) / 100.0) * htim->Init.Period);
 800249e:	1cfb      	adds	r3, r7, #3
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7fd ff32 	bl	800030c <__aeabi_ui2f>
 80024a8:	1c03      	adds	r3, r0, #0
 80024aa:	1c18      	adds	r0, r3, #0
 80024ac:	f7ff f8ac 	bl	8001608 <__aeabi_f2d>
 80024b0:	2200      	movs	r2, #0
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <calc_pulse_val+0x60>)
 80024b4:	f7fd ff66 	bl	8000384 <__aeabi_ddiv>
 80024b8:	0002      	movs	r2, r0
 80024ba:	000b      	movs	r3, r1
 80024bc:	0014      	movs	r4, r2
 80024be:	001d      	movs	r5, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff f879 	bl	80015bc <__aeabi_ui2d>
 80024ca:	0002      	movs	r2, r0
 80024cc:	000b      	movs	r3, r1
 80024ce:	0020      	movs	r0, r4
 80024d0:	0029      	movs	r1, r5
 80024d2:	f7fe fa3f 	bl	8000954 <__aeabi_dmul>
 80024d6:	0002      	movs	r2, r0
 80024d8:	000b      	movs	r3, r1
 80024da:	0010      	movs	r0, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	f7fd feb1 	bl	8000244 <__aeabi_d2uiz>
 80024e2:	0003      	movs	r3, r0
 80024e4:	b29b      	uxth	r3, r3
}
 80024e6:	0018      	movs	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b002      	add	sp, #8
 80024ec:	bdb0      	pop	{r4, r5, r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	40590000 	.word	0x40590000

080024f4 <calc_inv_pulse_val>:

uint16_t calc_inv_pulse_val(TIM_HandleTypeDef *htim, uint8_t pulse_width) {
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	000a      	movs	r2, r1
 80024fe:	1cfb      	adds	r3, r7, #3
 8002500:	701a      	strb	r2, [r3, #0]
	return (uint16_t) (((float) (100 - pulse_width) / 100.0) * htim->Init.Period);
 8002502:	1cfb      	adds	r3, r7, #3
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2264      	movs	r2, #100	; 0x64
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	0018      	movs	r0, r3
 800250c:	f7fd feb8 	bl	8000280 <__aeabi_i2f>
 8002510:	1c03      	adds	r3, r0, #0
 8002512:	1c18      	adds	r0, r3, #0
 8002514:	f7ff f878 	bl	8001608 <__aeabi_f2d>
 8002518:	2200      	movs	r2, #0
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <calc_inv_pulse_val+0x64>)
 800251c:	f7fd ff32 	bl	8000384 <__aeabi_ddiv>
 8002520:	0002      	movs	r2, r0
 8002522:	000b      	movs	r3, r1
 8002524:	0014      	movs	r4, r2
 8002526:	001d      	movs	r5, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0018      	movs	r0, r3
 800252e:	f7ff f845 	bl	80015bc <__aeabi_ui2d>
 8002532:	0002      	movs	r2, r0
 8002534:	000b      	movs	r3, r1
 8002536:	0020      	movs	r0, r4
 8002538:	0029      	movs	r1, r5
 800253a:	f7fe fa0b 	bl	8000954 <__aeabi_dmul>
 800253e:	0002      	movs	r2, r0
 8002540:	000b      	movs	r3, r1
 8002542:	0010      	movs	r0, r2
 8002544:	0019      	movs	r1, r3
 8002546:	f7fd fe7d 	bl	8000244 <__aeabi_d2uiz>
 800254a:	0003      	movs	r3, r0
 800254c:	b29b      	uxth	r3, r3
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bdb0      	pop	{r4, r5, r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	40590000 	.word	0x40590000

0800255c <move_forward>:

void move_forward(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	// code using PWM generation
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_inv_pulse_val(&htim2, slow_pulse_width));
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <move_forward+0xd0>)
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <move_forward+0xd4>)
 8002566:	0011      	movs	r1, r2
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff ffc3 	bl	80024f4 <calc_inv_pulse_val>
 800256e:	0003      	movs	r3, r0
 8002570:	001a      	movs	r2, r3
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <move_forward+0xd4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <move_forward+0xd4>)
 800257a:	2100      	movs	r1, #0
 800257c:	0018      	movs	r0, r3
 800257e:	f001 ff39 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_SET);
 8002582:	2390      	movs	r3, #144	; 0x90
 8002584:	05db      	lsls	r3, r3, #23
 8002586:	2201      	movs	r2, #1
 8002588:	2102      	movs	r1, #2
 800258a:	0018      	movs	r0, r3
 800258c:	f001 f895 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, calc_inv_pulse_val(&htim2, slow_pulse_width));
 8002590:	4b26      	ldr	r3, [pc, #152]	; (800262c <move_forward+0xd0>)
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	4b26      	ldr	r3, [pc, #152]	; (8002630 <move_forward+0xd4>)
 8002596:	0011      	movs	r1, r2
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff ffab 	bl	80024f4 <calc_inv_pulse_val>
 800259e:	0003      	movs	r3, r0
 80025a0:	001a      	movs	r2, r3
 80025a2:	4b23      	ldr	r3, [pc, #140]	; (8002630 <move_forward+0xd4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <move_forward+0xd4>)
 80025aa:	2108      	movs	r1, #8
 80025ac:	0018      	movs	r0, r3
 80025ae:	f001 ff21 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_SET);
 80025b2:	2390      	movs	r3, #144	; 0x90
 80025b4:	05db      	lsls	r3, r3, #23
 80025b6:	2201      	movs	r2, #1
 80025b8:	2108      	movs	r1, #8
 80025ba:	0018      	movs	r0, r3
 80025bc:	f001 f87d 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, calc_pulse_val(&htim1, slow_pulse_width));
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <move_forward+0xd0>)
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <move_forward+0xd8>)
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff ff61 	bl	8002490 <calc_pulse_val>
 80025ce:	0003      	movs	r3, r0
 80025d0:	001a      	movs	r2, r3
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <move_forward+0xd8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <move_forward+0xd8>)
 80025da:	2100      	movs	r1, #0
 80025dc:	0018      	movs	r0, r3
 80025de:	f001 ff09 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_RESET);
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	0099      	lsls	r1, r3, #2
 80025e6:	2390      	movs	r3, #144	; 0x90
 80025e8:	05db      	lsls	r3, r3, #23
 80025ea:	2200      	movs	r2, #0
 80025ec:	0018      	movs	r0, r3
 80025ee:	f001 f864 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_pulse_val(&htim1, slow_pulse_width));
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <move_forward+0xd0>)
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <move_forward+0xd8>)
 80025f8:	0011      	movs	r1, r2
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ff48 	bl	8002490 <calc_pulse_val>
 8002600:	0003      	movs	r3, r0
 8002602:	001a      	movs	r2, r3
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <move_forward+0xd8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <move_forward+0xd8>)
 800260c:	2108      	movs	r1, #8
 800260e:	0018      	movs	r0, r3
 8002610:	f001 fef0 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_RESET);
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	0119      	lsls	r1, r3, #4
 8002618:	2390      	movs	r3, #144	; 0x90
 800261a:	05db      	lsls	r3, r3, #23
 800261c:	2200      	movs	r2, #0
 800261e:	0018      	movs	r0, r3
 8002620:	f001 f84b 	bl	80036ba <HAL_GPIO_WritePin>
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	20000000 	.word	0x20000000
 8002630:	20000290 	.word	0x20000290
 8002634:	20000248 	.word	0x20000248

08002638 <move_backward>:

void move_backward(void) {
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	// code using PWM generation
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_pulse_val(&htim2, slow_pulse_width));
 800263c:	4b32      	ldr	r3, [pc, #200]	; (8002708 <move_backward+0xd0>)
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <move_backward+0xd4>)
 8002642:	0011      	movs	r1, r2
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff ff23 	bl	8002490 <calc_pulse_val>
 800264a:	0003      	movs	r3, r0
 800264c:	001a      	movs	r2, r3
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <move_backward+0xd4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002654:	4b2d      	ldr	r3, [pc, #180]	; (800270c <move_backward+0xd4>)
 8002656:	2100      	movs	r1, #0
 8002658:	0018      	movs	r0, r3
 800265a:	f001 fecb 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_RESET);
 800265e:	2390      	movs	r3, #144	; 0x90
 8002660:	05db      	lsls	r3, r3, #23
 8002662:	2200      	movs	r2, #0
 8002664:	2102      	movs	r1, #2
 8002666:	0018      	movs	r0, r3
 8002668:	f001 f827 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,calc_pulse_val(&htim2, slow_pulse_width));
 800266c:	4b26      	ldr	r3, [pc, #152]	; (8002708 <move_backward+0xd0>)
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <move_backward+0xd4>)
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff0b 	bl	8002490 <calc_pulse_val>
 800267a:	0003      	movs	r3, r0
 800267c:	001a      	movs	r2, r3
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <move_backward+0xd4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <move_backward+0xd4>)
 8002686:	2108      	movs	r1, #8
 8002688:	0018      	movs	r0, r3
 800268a:	f001 feb3 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_RESET);
 800268e:	2390      	movs	r3, #144	; 0x90
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	2200      	movs	r2, #0
 8002694:	2108      	movs	r1, #8
 8002696:	0018      	movs	r0, r3
 8002698:	f001 f80f 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, calc_inv_pulse_val(&htim1, slow_pulse_width));
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <move_backward+0xd0>)
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <move_backward+0xd8>)
 80026a2:	0011      	movs	r1, r2
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff ff25 	bl	80024f4 <calc_inv_pulse_val>
 80026aa:	0003      	movs	r3, r0
 80026ac:	001a      	movs	r2, r3
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <move_backward+0xd8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <move_backward+0xd8>)
 80026b6:	2100      	movs	r1, #0
 80026b8:	0018      	movs	r0, r3
 80026ba:	f001 fe9b 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_SET);
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	0099      	lsls	r1, r3, #2
 80026c2:	2390      	movs	r3, #144	; 0x90
 80026c4:	05db      	lsls	r3, r3, #23
 80026c6:	2201      	movs	r2, #1
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fff6 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_inv_pulse_val(&htim1, slow_pulse_width));
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <move_backward+0xd0>)
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <move_backward+0xd8>)
 80026d4:	0011      	movs	r1, r2
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7ff ff0c 	bl	80024f4 <calc_inv_pulse_val>
 80026dc:	0003      	movs	r3, r0
 80026de:	001a      	movs	r2, r3
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <move_backward+0xd8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <move_backward+0xd8>)
 80026e8:	2108      	movs	r1, #8
 80026ea:	0018      	movs	r0, r3
 80026ec:	f001 fe82 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_SET);
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	0119      	lsls	r1, r3, #4
 80026f4:	2390      	movs	r3, #144	; 0x90
 80026f6:	05db      	lsls	r3, r3, #23
 80026f8:	2201      	movs	r2, #1
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 ffdd 	bl	80036ba <HAL_GPIO_WritePin>
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000000 	.word	0x20000000
 800270c:	20000290 	.word	0x20000290
 8002710:	20000248 	.word	0x20000248

08002714 <steer_right>:

void steer_right(void) {
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	// code using PWM generation
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_inv_pulse_val(&htim2, fast_pulse_width));
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <steer_right+0xd0>)
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <steer_right+0xd4>)
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f7ff fee7 	bl	80024f4 <calc_inv_pulse_val>
 8002726:	0003      	movs	r3, r0
 8002728:	001a      	movs	r2, r3
 800272a:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <steer_right+0xd4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <steer_right+0xd4>)
 8002732:	2100      	movs	r1, #0
 8002734:	0018      	movs	r0, r3
 8002736:	f001 fe5d 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_SET);
 800273a:	2390      	movs	r3, #144	; 0x90
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	2201      	movs	r2, #1
 8002740:	2102      	movs	r1, #2
 8002742:	0018      	movs	r0, r3
 8002744:	f000 ffb9 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, calc_inv_pulse_val(&htim2, fast_pulse_width));
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <steer_right+0xd0>)
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <steer_right+0xd4>)
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fecf 	bl	80024f4 <calc_inv_pulse_val>
 8002756:	0003      	movs	r3, r0
 8002758:	001a      	movs	r2, r3
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <steer_right+0xd4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <steer_right+0xd4>)
 8002762:	2108      	movs	r1, #8
 8002764:	0018      	movs	r0, r3
 8002766:	f001 fe45 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_SET);
 800276a:	2390      	movs	r3, #144	; 0x90
 800276c:	05db      	lsls	r3, r3, #23
 800276e:	2201      	movs	r2, #1
 8002770:	2108      	movs	r1, #8
 8002772:	0018      	movs	r0, r3
 8002774:	f000 ffa1 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, calc_inv_pulse_val(&htim1, fast_pulse_width));
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <steer_right+0xd0>)
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <steer_right+0xd8>)
 800277e:	0011      	movs	r1, r2
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff feb7 	bl	80024f4 <calc_inv_pulse_val>
 8002786:	0003      	movs	r3, r0
 8002788:	001a      	movs	r2, r3
 800278a:	4b18      	ldr	r3, [pc, #96]	; (80027ec <steer_right+0xd8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <steer_right+0xd8>)
 8002792:	2100      	movs	r1, #0
 8002794:	0018      	movs	r0, r3
 8002796:	f001 fe2d 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_SET);
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	0099      	lsls	r1, r3, #2
 800279e:	2390      	movs	r3, #144	; 0x90
 80027a0:	05db      	lsls	r3, r3, #23
 80027a2:	2201      	movs	r2, #1
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 ff88 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_inv_pulse_val(&htim1, fast_pulse_width));
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <steer_right+0xd0>)
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <steer_right+0xd8>)
 80027b0:	0011      	movs	r1, r2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7ff fe9e 	bl	80024f4 <calc_inv_pulse_val>
 80027b8:	0003      	movs	r3, r0
 80027ba:	001a      	movs	r2, r3
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <steer_right+0xd8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <steer_right+0xd8>)
 80027c4:	2108      	movs	r1, #8
 80027c6:	0018      	movs	r0, r3
 80027c8:	f001 fe14 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_SET);
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	0119      	lsls	r1, r3, #4
 80027d0:	2390      	movs	r3, #144	; 0x90
 80027d2:	05db      	lsls	r3, r3, #23
 80027d4:	2201      	movs	r2, #1
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 ff6f 	bl	80036ba <HAL_GPIO_WritePin>
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000001 	.word	0x20000001
 80027e8:	20000290 	.word	0x20000290
 80027ec:	20000248 	.word	0x20000248

080027f0 <steer_left>:

void steer_left(void) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	// code using PWM generation
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_pulse_val(&htim2, fast_pulse_width));
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <steer_left+0xd0>)
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <steer_left+0xd4>)
 80027fa:	0011      	movs	r1, r2
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff fe47 	bl	8002490 <calc_pulse_val>
 8002802:	0003      	movs	r3, r0
 8002804:	001a      	movs	r2, r3
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <steer_left+0xd4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <steer_left+0xd4>)
 800280e:	2100      	movs	r1, #0
 8002810:	0018      	movs	r0, r3
 8002812:	f001 fdef 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_RESET);
 8002816:	2390      	movs	r3, #144	; 0x90
 8002818:	05db      	lsls	r3, r3, #23
 800281a:	2200      	movs	r2, #0
 800281c:	2102      	movs	r1, #2
 800281e:	0018      	movs	r0, r3
 8002820:	f000 ff4b 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, calc_pulse_val(&htim2, fast_pulse_width));
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <steer_left+0xd0>)
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <steer_left+0xd4>)
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f7ff fe2f 	bl	8002490 <calc_pulse_val>
 8002832:	0003      	movs	r3, r0
 8002834:	001a      	movs	r2, r3
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <steer_left+0xd4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <steer_left+0xd4>)
 800283e:	2108      	movs	r1, #8
 8002840:	0018      	movs	r0, r3
 8002842:	f001 fdd7 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_RESET);
 8002846:	2390      	movs	r3, #144	; 0x90
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	2200      	movs	r2, #0
 800284c:	2108      	movs	r1, #8
 800284e:	0018      	movs	r0, r3
 8002850:	f000 ff33 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, calc_pulse_val(&htim1, fast_pulse_width));
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <steer_left+0xd0>)
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <steer_left+0xd8>)
 800285a:	0011      	movs	r1, r2
 800285c:	0018      	movs	r0, r3
 800285e:	f7ff fe17 	bl	8002490 <calc_pulse_val>
 8002862:	0003      	movs	r3, r0
 8002864:	001a      	movs	r2, r3
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <steer_left+0xd8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <steer_left+0xd8>)
 800286e:	2100      	movs	r1, #0
 8002870:	0018      	movs	r0, r3
 8002872:	f001 fdbf 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_RESET);
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	0099      	lsls	r1, r3, #2
 800287a:	2390      	movs	r3, #144	; 0x90
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	2200      	movs	r2, #0
 8002880:	0018      	movs	r0, r3
 8002882:	f000 ff1a 	bl	80036ba <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_pulse_val(&htim1, fast_pulse_width));
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <steer_left+0xd0>)
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <steer_left+0xd8>)
 800288c:	0011      	movs	r1, r2
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff fdfe 	bl	8002490 <calc_pulse_val>
 8002894:	0003      	movs	r3, r0
 8002896:	001a      	movs	r2, r3
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <steer_left+0xd8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <steer_left+0xd8>)
 80028a0:	2108      	movs	r1, #8
 80028a2:	0018      	movs	r0, r3
 80028a4:	f001 fda6 	bl	80043f4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_RESET);
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	0119      	lsls	r1, r3, #4
 80028ac:	2390      	movs	r3, #144	; 0x90
 80028ae:	05db      	lsls	r3, r3, #23
 80028b0:	2200      	movs	r2, #0
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 ff01 	bl	80036ba <HAL_GPIO_WritePin>
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	20000001 	.word	0x20000001
 80028c4:	20000290 	.word	0x20000290
 80028c8:	20000248 	.word	0x20000248

080028cc <stop>:

void stop(void) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	// code using PWM generation
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80028d0:	4b1a      	ldr	r3, [pc, #104]	; (800293c <stop+0x70>)
 80028d2:	2100      	movs	r1, #0
 80028d4:	0018      	movs	r0, r3
 80028d6:	f001 fe45 	bl	8004564 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_RESET);
 80028da:	2390      	movs	r3, #144	; 0x90
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	2200      	movs	r2, #0
 80028e0:	2102      	movs	r1, #2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fee9 	bl	80036ba <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <stop+0x70>)
 80028ea:	2108      	movs	r1, #8
 80028ec:	0018      	movs	r0, r3
 80028ee:	f001 fe39 	bl	8004564 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_RESET);
 80028f2:	2390      	movs	r3, #144	; 0x90
 80028f4:	05db      	lsls	r3, r3, #23
 80028f6:	2200      	movs	r2, #0
 80028f8:	2108      	movs	r1, #8
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fedd 	bl	80036ba <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <stop+0x74>)
 8002902:	2100      	movs	r1, #0
 8002904:	0018      	movs	r0, r3
 8002906:	f001 fe2d 	bl	8004564 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_RESET);
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	0099      	lsls	r1, r3, #2
 800290e:	2390      	movs	r3, #144	; 0x90
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	2200      	movs	r2, #0
 8002914:	0018      	movs	r0, r3
 8002916:	f000 fed0 	bl	80036ba <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <stop+0x74>)
 800291c:	2108      	movs	r1, #8
 800291e:	0018      	movs	r0, r3
 8002920:	f001 fe20 	bl	8004564 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_RESET);
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	0119      	lsls	r1, r3, #4
 8002928:	2390      	movs	r3, #144	; 0x90
 800292a:	05db      	lsls	r3, r3, #23
 800292c:	2200      	movs	r2, #0
 800292e:	0018      	movs	r0, r3
 8002930:	f000 fec3 	bl	80036ba <HAL_GPIO_WritePin>
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	20000290 	.word	0x20000290
 8002940:	20000248 	.word	0x20000248

08002944 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void) {
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(bumper_sw_Pin);
 8002948:	2004      	movs	r0, #4
 800294a:	f000 fed3 	bl	80036f4 <HAL_GPIO_EXTI_IRQHandler>
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	0002      	movs	r2, r0
 800295c:	1dbb      	adds	r3, r7, #6
 800295e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == bumper_sw_Pin) {
 8002960:	1dbb      	adds	r3, r7, #6
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d103      	bne.n	8002970 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_TIM_Base_Start_IT(&htim6);
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_GPIO_EXTI_Callback+0x24>)
 800296a:	0018      	movs	r0, r3
 800296c:	f001 fc6a 	bl	8004244 <HAL_TIM_Base_Start_IT>
	}
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000200 	.word	0x20000200

0800297c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	46d6      	mov	lr, sl
 8002980:	464f      	mov	r7, r9
 8002982:	4646      	mov	r6, r8
 8002984:	b5c0      	push	{r6, r7, lr}
 8002986:	b090      	sub	sp, #64	; 0x40
 8002988:	af08      	add	r7, sp, #32
 800298a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a3f      	ldr	r2, [pc, #252]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d13b      	bne.n	8002a0e <HAL_TIM_PeriodElapsedCallback+0x92>
		HAL_TIM_Base_Stop_IT(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0018      	movs	r0, r3
 800299a:	f001 fca5 	bl	80042e8 <HAL_TIM_Base_Stop_IT>

		// change the mode of the external interrupt pin into a GPIO input pin
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	240c      	movs	r4, #12
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	0018      	movs	r0, r3
 80029a4:	2314      	movs	r3, #20
 80029a6:	001a      	movs	r2, r3
 80029a8:	2100      	movs	r1, #0
 80029aa:	f004 f895 	bl	8006ad8 <memset>
		GPIO_InitStruct.Pin = bumper_sw_Pin;
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	2204      	movs	r2, #4
 80029b2:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	193b      	adds	r3, r7, r4
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(bumper_sw_GPIO_Port, &GPIO_InitStruct);
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80029c4:	0019      	movs	r1, r3
 80029c6:	0010      	movs	r0, r2
 80029c8:	f000 fcea 	bl	80033a0 <HAL_GPIO_Init>

		if (HAL_GPIO_ReadPin(bumper_sw_GPIO_Port, bumper_sw_Pin) == GPIO_PIN_RESET) {
 80029cc:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80029ce:	2104      	movs	r1, #4
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 fe55 	bl	8003680 <HAL_GPIO_ReadPin>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d10a      	bne.n	80029f0 <HAL_TIM_PeriodElapsedCallback+0x74>
			if (sw_pushed == 0) {
 80029da:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x6e>
				sw_pushed = 1;
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e002      	b.n	80029f0 <HAL_TIM_PeriodElapsedCallback+0x74>
			}
			else {
				sw_pushed = 0;
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
			}
		}

		// change the mode of the GPIO pin back into an external interrupt
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029f0:	210c      	movs	r1, #12
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2284      	movs	r2, #132	; 0x84
 80029f6:	0392      	lsls	r2, r2, #14
 80029f8:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2201      	movs	r2, #1
 80029fe:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(bumper_sw_GPIO_Port, &GPIO_InitStruct);
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002a04:	0019      	movs	r1, r3
 8002a06:	0010      	movs	r0, r2
 8002a08:	f000 fcca 	bl	80033a0 <HAL_GPIO_Init>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)msg, strlen(msg));
	}
	else {

	}
}
 8002a0c:	e037      	b.n	8002a7e <HAL_TIM_PeriodElapsedCallback+0x102>
	else if (htim->Instance == TIM16) {
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d132      	bne.n	8002a7e <HAL_TIM_PeriodElapsedCallback+0x102>
		sprintf(msg, "IR sensors left to right: %d	%d	%d	%d	%d	Encoders: fl %lu fr %lu bl %lu br %lu\n\r", left2, left1, center, right1, right2, front_left_enc_count, front_right_enc_count, back_left_enc_count, back_right_enc_count);
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	469a      	mov	sl, r3
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	001e      	movs	r6, r3
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	469c      	mov	ip, r3
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	4698      	mov	r8, r3
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4d1f      	ldr	r5, [pc, #124]	; (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002a48:	4c1f      	ldr	r4, [pc, #124]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002a4a:	9306      	str	r3, [sp, #24]
 8002a4c:	9005      	str	r0, [sp, #20]
 8002a4e:	9104      	str	r1, [sp, #16]
 8002a50:	9203      	str	r2, [sp, #12]
 8002a52:	4643      	mov	r3, r8
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	4663      	mov	r3, ip
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	9600      	str	r6, [sp, #0]
 8002a5c:	4653      	mov	r3, sl
 8002a5e:	464a      	mov	r2, r9
 8002a60:	0029      	movs	r1, r5
 8002a62:	0020      	movs	r0, r4
 8002a64:	f004 f840 	bl	8006ae8 <siprintf>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)msg, strlen(msg));
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7fd fb4c 	bl	8000108 <strlen>
 8002a70:	0003      	movs	r3, r0
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	4914      	ldr	r1, [pc, #80]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f003 f825 	bl	8005ac8 <HAL_UART_Transmit_IT>
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b008      	add	sp, #32
 8002a84:	bce0      	pop	{r5, r6, r7}
 8002a86:	46ba      	mov	sl, r7
 8002a88:	46b1      	mov	r9, r6
 8002a8a:	46a8      	mov	r8, r5
 8002a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	40001000 	.word	0x40001000
 8002a94:	48000c00 	.word	0x48000c00
 8002a98:	20000095 	.word	0x20000095
 8002a9c:	40014400 	.word	0x40014400
 8002aa0:	200000fc 	.word	0x200000fc
 8002aa4:	200000fd 	.word	0x200000fd
 8002aa8:	200000fe 	.word	0x200000fe
 8002aac:	200000ff 	.word	0x200000ff
 8002ab0:	20000100 	.word	0x20000100
 8002ab4:	20000104 	.word	0x20000104
 8002ab8:	20000108 	.word	0x20000108
 8002abc:	2000010c 	.word	0x2000010c
 8002ac0:	20000110 	.word	0x20000110
 8002ac4:	0800734c 	.word	0x0800734c
 8002ac8:	20000098 	.word	0x20000098
 8002acc:	20000178 	.word	0x20000178

08002ad0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d126      	bne.n	8002b30 <HAL_TIM_IC_CaptureCallback+0x60>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7f1b      	ldrb	r3, [r3, #28]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <HAL_TIM_IC_CaptureCallback+0x26>
			++back_right_enc_count;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x6c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x6c>)
 8002af2:	601a      	str	r2, [r3, #0]
		}
		else {

		}
	}
}
 8002af4:	e01c      	b.n	8002b30 <HAL_TIM_IC_CaptureCallback+0x60>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7f1b      	ldrb	r3, [r3, #28]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d105      	bne.n	8002b0a <HAL_TIM_IC_CaptureCallback+0x3a>
			++back_left_enc_count;
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	e012      	b.n	8002b30 <HAL_TIM_IC_CaptureCallback+0x60>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7f1b      	ldrb	r3, [r3, #28]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d105      	bne.n	8002b1e <HAL_TIM_IC_CaptureCallback+0x4e>
			++front_right_enc_count;
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002b1a:	601a      	str	r2, [r3, #0]
}
 8002b1c:	e008      	b.n	8002b30 <HAL_TIM_IC_CaptureCallback+0x60>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7f1b      	ldrb	r3, [r3, #28]
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d104      	bne.n	8002b30 <HAL_TIM_IC_CaptureCallback+0x60>
			++front_left_enc_count;
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	20000110 	.word	0x20000110
 8002b40:	2000010c 	.word	0x2000010c
 8002b44:	20000108 	.word	0x20000108
 8002b48:	20000104 	.word	0x20000104

08002b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i
}
 8002b52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <Error_Handler+0x8>
	...

08002b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_MspInit+0x44>)
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <HAL_MspInit+0x44>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	430a      	orrs	r2, r1
 8002b68:	619a      	str	r2, [r3, #24]
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_MspInit+0x44>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4013      	ands	r3, r2
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_MspInit+0x44>)
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_MspInit+0x44>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0549      	lsls	r1, r1, #21
 8002b80:	430a      	orrs	r2, r1
 8002b82:	61da      	str	r2, [r3, #28]
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_MspInit+0x44>)
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	055b      	lsls	r3, r3, #21
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b08f      	sub	sp, #60	; 0x3c
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	2324      	movs	r3, #36	; 0x24
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	0018      	movs	r0, r3
 8002bae:	2314      	movs	r3, #20
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	f003 ff90 	bl	8006ad8 <memset>
  if(htim_base->Instance==TIM1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5a      	ldr	r2, [pc, #360]	; (8002d28 <HAL_TIM_Base_MspInit+0x188>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bc2:	4b5a      	ldr	r3, [pc, #360]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	0109      	lsls	r1, r1, #4
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]
 8002bd0:	4b56      	ldr	r3, [pc, #344]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4013      	ands	r3, r2
 8002bda:	623b      	str	r3, [r7, #32]
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002bde:	e09e      	b.n	8002d1e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	05db      	lsls	r3, r3, #23
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d10c      	bne.n	8002c06 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bec:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	61da      	str	r2, [r3, #28]
 8002bf8:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]
}
 8002c04:	e08b      	b.n	8002d1e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a49      	ldr	r2, [pc, #292]	; (8002d30 <HAL_TIM_Base_MspInit+0x190>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d151      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c10:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002c16:	2102      	movs	r1, #2
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	61da      	str	r2, [r3, #28]
 8002c1c:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2202      	movs	r2, #2
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c28:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	0309      	lsls	r1, r1, #12
 8002c32:	430a      	orrs	r2, r1
 8002c34:	615a      	str	r2, [r3, #20]
 8002c36:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	031b      	lsls	r3, r3, #12
 8002c3e:	4013      	ands	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = back_right_enc_Pin|back_left_enc_Pin|front_left_enc_Pin;
 8002c44:	2124      	movs	r1, #36	; 0x24
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	22b0      	movs	r2, #176	; 0xb0
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	000c      	movs	r4, r1
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	2202      	movs	r2, #2
 8002c54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	4a32      	ldr	r2, [pc, #200]	; (8002d34 <HAL_TIM_Base_MspInit+0x194>)
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	0010      	movs	r0, r2
 8002c70:	f000 fb96 	bl	80033a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = front_right_enc_Pin;
 8002c74:	0021      	movs	r1, r4
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2280      	movs	r2, #128	; 0x80
 8002c7a:	0052      	lsls	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	2202      	movs	r2, #2
 8002c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2201      	movs	r2, #1
 8002c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(front_right_enc_GPIO_Port, &GPIO_InitStruct);
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <HAL_TIM_Base_MspInit+0x194>)
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	0010      	movs	r0, r2
 8002c9e:	f000 fb7f 	bl	80033a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2010      	movs	r0, #16
 8002ca8:	f000 faca 	bl	8003240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cac:	2010      	movs	r0, #16
 8002cae:	f000 fadc 	bl	800326a <HAL_NVIC_EnableIRQ>
}
 8002cb2:	e034      	b.n	8002d1e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM6)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <HAL_TIM_Base_MspInit+0x198>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d114      	bne.n	8002ce8 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	61da      	str	r2, [r3, #28]
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	2210      	movs	r2, #16
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2011      	movs	r0, #17
 8002cdc:	f000 fab0 	bl	8003240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ce0:	2011      	movs	r0, #17
 8002ce2:	f000 fac2 	bl	800326a <HAL_NVIC_EnableIRQ>
}
 8002ce6:	e01a      	b.n	8002d1e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM16)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <HAL_TIM_Base_MspInit+0x19c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d115      	bne.n	8002d1e <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	0289      	lsls	r1, r1, #10
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	619a      	str	r2, [r3, #24]
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_TIM_Base_MspInit+0x18c>)
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	029b      	lsls	r3, r3, #10
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2100      	movs	r1, #0
 8002d12:	2015      	movs	r0, #21
 8002d14:	f000 fa94 	bl	8003240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002d18:	2015      	movs	r0, #21
 8002d1a:	f000 faa6 	bl	800326a <HAL_NVIC_EnableIRQ>
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b00f      	add	sp, #60	; 0x3c
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40000400 	.word	0x40000400
 8002d34:	48000800 	.word	0x48000800
 8002d38:	40001000 	.word	0x40001000
 8002d3c:	40014400 	.word	0x40014400

08002d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b08b      	sub	sp, #44	; 0x2c
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	2414      	movs	r4, #20
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	2314      	movs	r3, #20
 8002d50:	001a      	movs	r2, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	f003 fec0 	bl	8006ad8 <memset>
  if(htim->Instance==TIM1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <HAL_TIM_MspPostInit+0xd0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d126      	bne.n	8002db0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_TIM_MspPostInit+0xd4>)
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <HAL_TIM_MspPostInit+0xd4>)
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	0289      	lsls	r1, r1, #10
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	615a      	str	r2, [r3, #20]
 8002d70:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_TIM_MspPostInit+0xd4>)
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = right_in1_Pin|right_in3_Pin;
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	22a0      	movs	r2, #160	; 0xa0
 8002d82:	00d2      	lsls	r2, r2, #3
 8002d84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	0021      	movs	r1, r4
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	187a      	adds	r2, r7, r1
 8002da2:	2390      	movs	r3, #144	; 0x90
 8002da4:	05db      	lsls	r3, r3, #23
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 faf9 	bl	80033a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dae:	e02a      	b.n	8002e06 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	05db      	lsls	r3, r3, #23
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d124      	bne.n	8002e06 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_TIM_MspPostInit+0xd4>)
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_TIM_MspPostInit+0xd4>)
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	0289      	lsls	r1, r1, #10
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	615a      	str	r2, [r3, #20]
 8002dca:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_TIM_MspPostInit+0xd4>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	029b      	lsls	r3, r3, #10
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = left_in1_Pin|left_in3_Pin;
 8002dd8:	2114      	movs	r1, #20
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2205      	movs	r2, #5
 8002dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2202      	movs	r2, #2
 8002de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2202      	movs	r2, #2
 8002df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	187a      	adds	r2, r7, r1
 8002dfa:	2390      	movs	r3, #144	; 0x90
 8002dfc:	05db      	lsls	r3, r3, #23
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 facd 	bl	80033a0 <HAL_GPIO_Init>
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b00b      	add	sp, #44	; 0x2c
 8002e0c:	bd90      	pop	{r4, r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b08b      	sub	sp, #44	; 0x2c
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	2414      	movs	r4, #20
 8002e22:	193b      	adds	r3, r7, r4
 8002e24:	0018      	movs	r0, r3
 8002e26:	2314      	movs	r3, #20
 8002e28:	001a      	movs	r2, r3
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	f003 fe54 	bl	8006ad8 <memset>
  if(huart->Instance==USART1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_UART_MspInit+0xa0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d139      	bne.n	8002eae <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_UART_MspInit+0xa4>)
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_UART_MspInit+0xa4>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	01c9      	lsls	r1, r1, #7
 8002e44:	430a      	orrs	r2, r1
 8002e46:	619a      	str	r2, [r3, #24]
 8002e48:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_UART_MspInit+0xa4>)
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	01db      	lsls	r3, r3, #7
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_UART_MspInit+0xa4>)
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_UART_MspInit+0xa4>)
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	02c9      	lsls	r1, r1, #11
 8002e60:	430a      	orrs	r2, r1
 8002e62:	615a      	str	r2, [r3, #20]
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_UART_MspInit+0xa4>)
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	02db      	lsls	r3, r3, #11
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e72:	0021      	movs	r1, r4
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	22c0      	movs	r2, #192	; 0xc0
 8002e78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <HAL_UART_MspInit+0xa8>)
 8002e96:	0019      	movs	r1, r3
 8002e98:	0010      	movs	r0, r2
 8002e9a:	f000 fa81 	bl	80033a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	201b      	movs	r0, #27
 8002ea4:	f000 f9cc 	bl	8003240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ea8:	201b      	movs	r0, #27
 8002eaa:	f000 f9de 	bl	800326a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b00b      	add	sp, #44	; 0x2c
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	48000400 	.word	0x48000400

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <NMI_Handler+0x4>

08002eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <HardFault_Handler+0x4>

08002ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 f8e2 	bl	80030b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <TIM3_IRQHandler+0x14>)
 8002efa:	0018      	movs	r0, r3
 8002efc:	f001 fd14 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	20000130 	.word	0x20000130

08002f0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <TIM6_DAC_IRQHandler+0x14>)
 8002f12:	0018      	movs	r0, r3
 8002f14:	f001 fd08 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	20000200 	.word	0x20000200

08002f24 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <TIM16_IRQHandler+0x14>)
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f001 fcfc 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	200002d8 	.word	0x200002d8

08002f3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <USART1_IRQHandler+0x14>)
 8002f42:	0018      	movs	r0, r3
 8002f44:	f002 fe30 	bl	8005ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	20000178 	.word	0x20000178

08002f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <_sbrk+0x5c>)
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <_sbrk+0x60>)
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <_sbrk+0x64>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <_sbrk+0x64>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <_sbrk+0x68>)
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <_sbrk+0x64>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	18d3      	adds	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d207      	bcs.n	8002f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f84:	f003 fd7e 	bl	8006a84 <__errno>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	425b      	negs	r3, r3
 8002f92:	e009      	b.n	8002fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <_sbrk+0x64>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	18d2      	adds	r2, r2, r3
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <_sbrk+0x64>)
 8002fa4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b006      	add	sp, #24
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20002000 	.word	0x20002000
 8002fb4:	00000400 	.word	0x00000400
 8002fb8:	20000124 	.word	0x20000124
 8002fbc:	20000338 	.word	0x20000338

08002fc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fcc:	480d      	ldr	r0, [pc, #52]	; (8003004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fce:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8002fd0:	f7ff fff6 	bl	8002fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fd6:	490d      	ldr	r1, [pc, #52]	; (800300c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <LoopForever+0xe>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fdc:	e002      	b.n	8002fe4 <LoopCopyDataInit>

08002fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fe2:	3304      	adds	r3, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe8:	d3f9      	bcc.n	8002fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fec:	4c0a      	ldr	r4, [pc, #40]	; (8003018 <LoopForever+0x16>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff0:	e001      	b.n	8002ff6 <LoopFillZerobss>

08002ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff4:	3204      	adds	r2, #4

08002ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff8:	d3fb      	bcc.n	8002ff2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ffa:	f003 fd49 	bl	8006a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ffe:	f7fe fcc5 	bl	800198c <main>

08003002 <LoopForever>:

LoopForever:
    b LoopForever
 8003002:	e7fe      	b.n	8003002 <LoopForever>
  ldr   r0, =_estack
 8003004:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800300c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003010:	080074ac 	.word	0x080074ac
  ldr r2, =_sbss
 8003014:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003018:	20000334 	.word	0x20000334

0800301c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC1_COMP_IRQHandler>
	...

08003020 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_Init+0x24>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_Init+0x24>)
 800302a:	2110      	movs	r1, #16
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003030:	2000      	movs	r0, #0
 8003032:	f000 f809 	bl	8003048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003036:	f7ff fd8f 	bl	8002b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	40022000 	.word	0x40022000

08003048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_InitTick+0x5c>)
 8003052:	681c      	ldr	r4, [r3, #0]
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <HAL_InitTick+0x60>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	0019      	movs	r1, r3
 800305a:	23fa      	movs	r3, #250	; 0xfa
 800305c:	0098      	lsls	r0, r3, #2
 800305e:	f7fd f865 	bl	800012c <__udivsi3>
 8003062:	0003      	movs	r3, r0
 8003064:	0019      	movs	r1, r3
 8003066:	0020      	movs	r0, r4
 8003068:	f7fd f860 	bl	800012c <__udivsi3>
 800306c:	0003      	movs	r3, r0
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f90b 	bl	800328a <HAL_SYSTICK_Config>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d001      	beq.n	800307c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e00f      	b.n	800309c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d80b      	bhi.n	800309a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	2301      	movs	r3, #1
 8003086:	425b      	negs	r3, r3
 8003088:	2200      	movs	r2, #0
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f8d8 	bl	8003240 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_InitTick+0x64>)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b003      	add	sp, #12
 80030a2:	bd90      	pop	{r4, r7, pc}
 80030a4:	20000008 	.word	0x20000008
 80030a8:	20000010 	.word	0x20000010
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_IncTick+0x1c>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	001a      	movs	r2, r3
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_IncTick+0x20>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	18d2      	adds	r2, r2, r3
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_IncTick+0x20>)
 80030c2:	601a      	str	r2, [r3, #0]
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	20000010 	.word	0x20000010
 80030d0:	20000320 	.word	0x20000320

080030d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  return uwTick;
 80030d8:	4b02      	ldr	r3, [pc, #8]	; (80030e4 <HAL_GetTick+0x10>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	20000320 	.word	0x20000320

080030e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	0002      	movs	r2, r0
 80030f0:	1dfb      	adds	r3, r7, #7
 80030f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	1dfb      	adds	r3, r7, #7
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b7f      	cmp	r3, #127	; 0x7f
 80030fa:	d809      	bhi.n	8003110 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	001a      	movs	r2, r3
 8003102:	231f      	movs	r3, #31
 8003104:	401a      	ands	r2, r3
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <__NVIC_EnableIRQ+0x30>)
 8003108:	2101      	movs	r1, #1
 800310a:	4091      	lsls	r1, r2
 800310c:	000a      	movs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
  }
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	0002      	movs	r2, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	1dfb      	adds	r3, r7, #7
 8003128:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800312a:	1dfb      	adds	r3, r7, #7
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b7f      	cmp	r3, #127	; 0x7f
 8003130:	d828      	bhi.n	8003184 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003132:	4a2f      	ldr	r2, [pc, #188]	; (80031f0 <__NVIC_SetPriority+0xd4>)
 8003134:	1dfb      	adds	r3, r7, #7
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b25b      	sxtb	r3, r3
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	33c0      	adds	r3, #192	; 0xc0
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	589b      	ldr	r3, [r3, r2]
 8003142:	1dfa      	adds	r2, r7, #7
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	0011      	movs	r1, r2
 8003148:	2203      	movs	r2, #3
 800314a:	400a      	ands	r2, r1
 800314c:	00d2      	lsls	r2, r2, #3
 800314e:	21ff      	movs	r1, #255	; 0xff
 8003150:	4091      	lsls	r1, r2
 8003152:	000a      	movs	r2, r1
 8003154:	43d2      	mvns	r2, r2
 8003156:	401a      	ands	r2, r3
 8003158:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	22ff      	movs	r2, #255	; 0xff
 8003160:	401a      	ands	r2, r3
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	0018      	movs	r0, r3
 8003168:	2303      	movs	r3, #3
 800316a:	4003      	ands	r3, r0
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003170:	481f      	ldr	r0, [pc, #124]	; (80031f0 <__NVIC_SetPriority+0xd4>)
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	b25b      	sxtb	r3, r3
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	430a      	orrs	r2, r1
 800317c:	33c0      	adds	r3, #192	; 0xc0
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003182:	e031      	b.n	80031e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <__NVIC_SetPriority+0xd8>)
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	0019      	movs	r1, r3
 800318c:	230f      	movs	r3, #15
 800318e:	400b      	ands	r3, r1
 8003190:	3b08      	subs	r3, #8
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3306      	adds	r3, #6
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	18d3      	adds	r3, r2, r3
 800319a:	3304      	adds	r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	1dfa      	adds	r2, r7, #7
 80031a0:	7812      	ldrb	r2, [r2, #0]
 80031a2:	0011      	movs	r1, r2
 80031a4:	2203      	movs	r2, #3
 80031a6:	400a      	ands	r2, r1
 80031a8:	00d2      	lsls	r2, r2, #3
 80031aa:	21ff      	movs	r1, #255	; 0xff
 80031ac:	4091      	lsls	r1, r2
 80031ae:	000a      	movs	r2, r1
 80031b0:	43d2      	mvns	r2, r2
 80031b2:	401a      	ands	r2, r3
 80031b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	019b      	lsls	r3, r3, #6
 80031ba:	22ff      	movs	r2, #255	; 0xff
 80031bc:	401a      	ands	r2, r3
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	0018      	movs	r0, r3
 80031c4:	2303      	movs	r3, #3
 80031c6:	4003      	ands	r3, r0
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031cc:	4809      	ldr	r0, [pc, #36]	; (80031f4 <__NVIC_SetPriority+0xd8>)
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	001c      	movs	r4, r3
 80031d4:	230f      	movs	r3, #15
 80031d6:	4023      	ands	r3, r4
 80031d8:	3b08      	subs	r3, #8
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	430a      	orrs	r2, r1
 80031de:	3306      	adds	r3, #6
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	18c3      	adds	r3, r0, r3
 80031e4:	3304      	adds	r3, #4
 80031e6:	601a      	str	r2, [r3, #0]
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b003      	add	sp, #12
 80031ee:	bd90      	pop	{r4, r7, pc}
 80031f0:	e000e100 	.word	0xe000e100
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1e5a      	subs	r2, r3, #1
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	045b      	lsls	r3, r3, #17
 8003208:	429a      	cmp	r2, r3
 800320a:	d301      	bcc.n	8003210 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320c:	2301      	movs	r3, #1
 800320e:	e010      	b.n	8003232 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <SysTick_Config+0x44>)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	3a01      	subs	r2, #1
 8003216:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003218:	2301      	movs	r3, #1
 800321a:	425b      	negs	r3, r3
 800321c:	2103      	movs	r1, #3
 800321e:	0018      	movs	r0, r3
 8003220:	f7ff ff7c 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x44>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x44>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b002      	add	sp, #8
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	210f      	movs	r1, #15
 800324c:	187b      	adds	r3, r7, r1
 800324e:	1c02      	adds	r2, r0, #0
 8003250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	187b      	adds	r3, r7, r1
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b25b      	sxtb	r3, r3
 800325a:	0011      	movs	r1, r2
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff ff5d 	bl	800311c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	0002      	movs	r2, r0
 8003272:	1dfb      	adds	r3, r7, #7
 8003274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b25b      	sxtb	r3, r3
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff ff33 	bl	80030e8 <__NVIC_EnableIRQ>
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b002      	add	sp, #8
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f7ff ffaf 	bl	80031f8 <SysTick_Config>
 800329a:	0003      	movs	r3, r0
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2221      	movs	r2, #33	; 0x21
 80032b0:	5c9b      	ldrb	r3, [r3, r2]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d008      	beq.n	80032ca <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2204      	movs	r2, #4
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	2100      	movs	r1, #0
 80032c4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e020      	b.n	800330c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	210e      	movs	r1, #14
 80032d6:	438a      	bics	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	438a      	bics	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	2101      	movs	r1, #1
 80032f4:	4091      	lsls	r1, r2
 80032f6:	000a      	movs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2221      	movs	r2, #33	; 0x21
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	210f      	movs	r1, #15
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2221      	movs	r2, #33	; 0x21
 8003328:	5c9b      	ldrb	r3, [r3, r2]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d006      	beq.n	800333e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2204      	movs	r2, #4
 8003334:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003336:	187b      	adds	r3, r7, r1
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e028      	b.n	8003390 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	210e      	movs	r1, #14
 800334a:	438a      	bics	r2, r1
 800334c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	438a      	bics	r2, r1
 800335c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	2101      	movs	r1, #1
 8003368:	4091      	lsls	r1, r2
 800336a:	000a      	movs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2221      	movs	r2, #33	; 0x21
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	0010      	movs	r0, r2
 800338e:	4798      	blx	r3
    }
  }
  return status;
 8003390:	230f      	movs	r3, #15
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	781b      	ldrb	r3, [r3, #0]
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b004      	add	sp, #16
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ae:	e14f      	b.n	8003650 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4091      	lsls	r1, r2
 80033ba:	000a      	movs	r2, r1
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d100      	bne.n	80033c8 <HAL_GPIO_Init+0x28>
 80033c6:	e140      	b.n	800364a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d005      	beq.n	80033e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2203      	movs	r2, #3
 80033da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	409a      	lsls	r2, r3
 80033ee:	0013      	movs	r3, r2
 80033f0:	43da      	mvns	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	409a      	lsls	r2, r3
 8003402:	0013      	movs	r3, r2
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	409a      	lsls	r2, r3
 800341c:	0013      	movs	r3, r2
 800341e:	43da      	mvns	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	2201      	movs	r2, #1
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
 8003434:	0013      	movs	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2203      	movs	r2, #3
 8003448:	4013      	ands	r3, r2
 800344a:	2b03      	cmp	r3, #3
 800344c:	d017      	beq.n	800347e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	409a      	lsls	r2, r3
 800345c:	0013      	movs	r3, r2
 800345e:	43da      	mvns	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	0013      	movs	r3, r2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2203      	movs	r2, #3
 8003484:	4013      	ands	r3, r2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d123      	bne.n	80034d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	58d3      	ldr	r3, [r2, r3]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2207      	movs	r2, #7
 800349c:	4013      	ands	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	409a      	lsls	r2, r3
 80034a4:	0013      	movs	r3, r2
 80034a6:	43da      	mvns	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2107      	movs	r1, #7
 80034b6:	400b      	ands	r3, r1
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	409a      	lsls	r2, r3
 80034bc:	0013      	movs	r3, r2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	6939      	ldr	r1, [r7, #16]
 80034d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	409a      	lsls	r2, r3
 80034e0:	0013      	movs	r3, r2
 80034e2:	43da      	mvns	r2, r3
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2203      	movs	r2, #3
 80034f0:	401a      	ands	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	0013      	movs	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	23c0      	movs	r3, #192	; 0xc0
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	4013      	ands	r3, r2
 8003510:	d100      	bne.n	8003514 <HAL_GPIO_Init+0x174>
 8003512:	e09a      	b.n	800364a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003514:	4b54      	ldr	r3, [pc, #336]	; (8003668 <HAL_GPIO_Init+0x2c8>)
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_GPIO_Init+0x2c8>)
 800351a:	2101      	movs	r1, #1
 800351c:	430a      	orrs	r2, r1
 800351e:	619a      	str	r2, [r3, #24]
 8003520:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_GPIO_Init+0x2c8>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800352c:	4a4f      	ldr	r2, [pc, #316]	; (800366c <HAL_GPIO_Init+0x2cc>)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	3302      	adds	r3, #2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	589b      	ldr	r3, [r3, r2]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2203      	movs	r2, #3
 800353e:	4013      	ands	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	409a      	lsls	r2, r3
 8003546:	0013      	movs	r3, r2
 8003548:	43da      	mvns	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	2390      	movs	r3, #144	; 0x90
 8003554:	05db      	lsls	r3, r3, #23
 8003556:	429a      	cmp	r2, r3
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x1e2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a44      	ldr	r2, [pc, #272]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00d      	beq.n	800357e <HAL_GPIO_Init+0x1de>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a43      	ldr	r2, [pc, #268]	; (8003674 <HAL_GPIO_Init+0x2d4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <HAL_GPIO_Init+0x1da>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a42      	ldr	r2, [pc, #264]	; (8003678 <HAL_GPIO_Init+0x2d8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_GPIO_Init+0x1d6>
 8003572:	2303      	movs	r3, #3
 8003574:	e006      	b.n	8003584 <HAL_GPIO_Init+0x1e4>
 8003576:	2305      	movs	r3, #5
 8003578:	e004      	b.n	8003584 <HAL_GPIO_Init+0x1e4>
 800357a:	2302      	movs	r3, #2
 800357c:	e002      	b.n	8003584 <HAL_GPIO_Init+0x1e4>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <HAL_GPIO_Init+0x1e4>
 8003582:	2300      	movs	r3, #0
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	2103      	movs	r1, #3
 8003588:	400a      	ands	r2, r1
 800358a:	0092      	lsls	r2, r2, #2
 800358c:	4093      	lsls	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003594:	4935      	ldr	r1, [pc, #212]	; (800366c <HAL_GPIO_Init+0x2cc>)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	3302      	adds	r3, #2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035a2:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_GPIO_Init+0x2dc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	035b      	lsls	r3, r3, #13
 80035ba:	4013      	ands	r3, r2
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80035c6:	4b2d      	ldr	r3, [pc, #180]	; (800367c <HAL_GPIO_Init+0x2dc>)
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80035cc:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_GPIO_Init+0x2dc>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	039b      	lsls	r3, r3, #14
 80035e4:	4013      	ands	r3, r2
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035f0:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_GPIO_Init+0x2dc>)
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80035f6:	4b21      	ldr	r3, [pc, #132]	; (800367c <HAL_GPIO_Init+0x2dc>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43da      	mvns	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	029b      	lsls	r3, r3, #10
 800360e:	4013      	ands	r3, r2
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800361a:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_GPIO_Init+0x2dc>)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_GPIO_Init+0x2dc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43da      	mvns	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	025b      	lsls	r3, r3, #9
 8003638:	4013      	ands	r3, r2
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <HAL_GPIO_Init+0x2dc>)
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	40da      	lsrs	r2, r3
 8003658:	1e13      	subs	r3, r2, #0
 800365a:	d000      	beq.n	800365e <HAL_GPIO_Init+0x2be>
 800365c:	e6a8      	b.n	80033b0 <HAL_GPIO_Init+0x10>
  } 
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b006      	add	sp, #24
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000800 	.word	0x48000800
 8003678:	48000c00 	.word	0x48000c00
 800367c:	40010400 	.word	0x40010400

08003680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	000a      	movs	r2, r1
 800368a:	1cbb      	adds	r3, r7, #2
 800368c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	1cba      	adds	r2, r7, #2
 8003694:	8812      	ldrh	r2, [r2, #0]
 8003696:	4013      	ands	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800369a:	230f      	movs	r3, #15
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e003      	b.n	80036ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036a4:	230f      	movs	r3, #15
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80036ac:	230f      	movs	r3, #15
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	781b      	ldrb	r3, [r3, #0]
  }
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b004      	add	sp, #16
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	0008      	movs	r0, r1
 80036c4:	0011      	movs	r1, r2
 80036c6:	1cbb      	adds	r3, r7, #2
 80036c8:	1c02      	adds	r2, r0, #0
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	1c7b      	adds	r3, r7, #1
 80036ce:	1c0a      	adds	r2, r1, #0
 80036d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d2:	1c7b      	adds	r3, r7, #1
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036da:	1cbb      	adds	r3, r7, #2
 80036dc:	881a      	ldrh	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e2:	e003      	b.n	80036ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036e4:	1cbb      	adds	r3, r7, #2
 80036e6:	881a      	ldrh	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	0002      	movs	r2, r0
 80036fc:	1dbb      	adds	r3, r7, #6
 80036fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	1dba      	adds	r2, r7, #6
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	4013      	ands	r3, r2
 800370a:	d008      	beq.n	800371e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800370e:	1dba      	adds	r2, r7, #6
 8003710:	8812      	ldrh	r2, [r2, #0]
 8003712:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003714:	1dbb      	adds	r3, r7, #6
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff f91b 	bl	8002954 <HAL_GPIO_EXTI_Callback>
  }
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e301      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2201      	movs	r2, #1
 8003744:	4013      	ands	r3, r2
 8003746:	d100      	bne.n	800374a <HAL_RCC_OscConfig+0x1e>
 8003748:	e08d      	b.n	8003866 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800374a:	4bc3      	ldr	r3, [pc, #780]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	220c      	movs	r2, #12
 8003750:	4013      	ands	r3, r2
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00e      	beq.n	8003774 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003756:	4bc0      	ldr	r3, [pc, #768]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	220c      	movs	r2, #12
 800375c:	4013      	ands	r3, r2
 800375e:	2b08      	cmp	r3, #8
 8003760:	d116      	bne.n	8003790 <HAL_RCC_OscConfig+0x64>
 8003762:	4bbd      	ldr	r3, [pc, #756]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	025b      	lsls	r3, r3, #9
 800376a:	401a      	ands	r2, r3
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	025b      	lsls	r3, r3, #9
 8003770:	429a      	cmp	r2, r3
 8003772:	d10d      	bne.n	8003790 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	4bb8      	ldr	r3, [pc, #736]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	4013      	ands	r3, r2
 800377e:	d100      	bne.n	8003782 <HAL_RCC_OscConfig+0x56>
 8003780:	e070      	b.n	8003864 <HAL_RCC_OscConfig+0x138>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d000      	beq.n	800378c <HAL_RCC_OscConfig+0x60>
 800378a:	e06b      	b.n	8003864 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e2d8      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x7c>
 8003798:	4baf      	ldr	r3, [pc, #700]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4bae      	ldr	r3, [pc, #696]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800379e:	2180      	movs	r1, #128	; 0x80
 80037a0:	0249      	lsls	r1, r1, #9
 80037a2:	430a      	orrs	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	e02f      	b.n	8003808 <HAL_RCC_OscConfig+0xdc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x9e>
 80037b0:	4ba9      	ldr	r3, [pc, #676]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4ba8      	ldr	r3, [pc, #672]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037b6:	49a9      	ldr	r1, [pc, #676]	; (8003a5c <HAL_RCC_OscConfig+0x330>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	4ba6      	ldr	r3, [pc, #664]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4ba5      	ldr	r3, [pc, #660]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037c2:	49a7      	ldr	r1, [pc, #668]	; (8003a60 <HAL_RCC_OscConfig+0x334>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e01e      	b.n	8003808 <HAL_RCC_OscConfig+0xdc>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d10e      	bne.n	80037f0 <HAL_RCC_OscConfig+0xc4>
 80037d2:	4ba1      	ldr	r3, [pc, #644]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4ba0      	ldr	r3, [pc, #640]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	02c9      	lsls	r1, r1, #11
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	4b9d      	ldr	r3, [pc, #628]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b9c      	ldr	r3, [pc, #624]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	0249      	lsls	r1, r1, #9
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0xdc>
 80037f0:	4b99      	ldr	r3, [pc, #612]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b98      	ldr	r3, [pc, #608]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037f6:	4999      	ldr	r1, [pc, #612]	; (8003a5c <HAL_RCC_OscConfig+0x330>)
 80037f8:	400a      	ands	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4b96      	ldr	r3, [pc, #600]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b95      	ldr	r3, [pc, #596]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003802:	4997      	ldr	r1, [pc, #604]	; (8003a60 <HAL_RCC_OscConfig+0x334>)
 8003804:	400a      	ands	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d014      	beq.n	800383a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7ff fc60 	bl	80030d4 <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381a:	f7ff fc5b 	bl	80030d4 <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b64      	cmp	r3, #100	; 0x64
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e28a      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382c:	4b8a      	ldr	r3, [pc, #552]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	4013      	ands	r3, r2
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0xee>
 8003838:	e015      	b.n	8003866 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7ff fc4b 	bl	80030d4 <HAL_GetTick>
 800383e:	0003      	movs	r3, r0
 8003840:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003844:	f7ff fc46 	bl	80030d4 <HAL_GetTick>
 8003848:	0002      	movs	r2, r0
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e275      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003856:	4b80      	ldr	r3, [pc, #512]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	4013      	ands	r3, r2
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x118>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2202      	movs	r2, #2
 800386c:	4013      	ands	r3, r2
 800386e:	d100      	bne.n	8003872 <HAL_RCC_OscConfig+0x146>
 8003870:	e069      	b.n	8003946 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003872:	4b79      	ldr	r3, [pc, #484]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	220c      	movs	r2, #12
 8003878:	4013      	ands	r3, r2
 800387a:	d00b      	beq.n	8003894 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800387c:	4b76      	ldr	r3, [pc, #472]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	220c      	movs	r2, #12
 8003882:	4013      	ands	r3, r2
 8003884:	2b08      	cmp	r3, #8
 8003886:	d11c      	bne.n	80038c2 <HAL_RCC_OscConfig+0x196>
 8003888:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	025b      	lsls	r3, r3, #9
 8003890:	4013      	ands	r3, r2
 8003892:	d116      	bne.n	80038c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003894:	4b70      	ldr	r3, [pc, #448]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2202      	movs	r2, #2
 800389a:	4013      	ands	r3, r2
 800389c:	d005      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e24b      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	4b6b      	ldr	r3, [pc, #428]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	22f8      	movs	r2, #248	; 0xf8
 80038b0:	4393      	bics	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	00da      	lsls	r2, r3, #3
 80038ba:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c0:	e041      	b.n	8003946 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d024      	beq.n	8003914 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ca:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b62      	ldr	r3, [pc, #392]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80038d0:	2101      	movs	r1, #1
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7ff fbfd 	bl	80030d4 <HAL_GetTick>
 80038da:	0003      	movs	r3, r0
 80038dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7ff fbf8 	bl	80030d4 <HAL_GetTick>
 80038e4:	0002      	movs	r2, r0
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e227      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	d0f1      	beq.n	80038e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	22f8      	movs	r2, #248	; 0xf8
 8003902:	4393      	bics	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00da      	lsls	r2, r3, #3
 800390c:	4b52      	ldr	r3, [pc, #328]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e018      	b.n	8003946 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003914:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800391a:	2101      	movs	r1, #1
 800391c:	438a      	bics	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7ff fbd8 	bl	80030d4 <HAL_GetTick>
 8003924:	0003      	movs	r3, r0
 8003926:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392a:	f7ff fbd3 	bl	80030d4 <HAL_GetTick>
 800392e:	0002      	movs	r2, r0
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e202      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2202      	movs	r2, #2
 8003942:	4013      	ands	r3, r2
 8003944:	d1f1      	bne.n	800392a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2208      	movs	r2, #8
 800394c:	4013      	ands	r3, r2
 800394e:	d036      	beq.n	80039be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d019      	beq.n	800398c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003958:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800395a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395c:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800395e:	2101      	movs	r1, #1
 8003960:	430a      	orrs	r2, r1
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003964:	f7ff fbb6 	bl	80030d4 <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396e:	f7ff fbb1 	bl	80030d4 <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1e0      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003980:	4b35      	ldr	r3, [pc, #212]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2202      	movs	r2, #2
 8003986:	4013      	ands	r3, r2
 8003988:	d0f1      	beq.n	800396e <HAL_RCC_OscConfig+0x242>
 800398a:	e018      	b.n	80039be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398c:	4b32      	ldr	r3, [pc, #200]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 800398e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003992:	2101      	movs	r1, #1
 8003994:	438a      	bics	r2, r1
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7ff fb9c 	bl	80030d4 <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a2:	f7ff fb97 	bl	80030d4 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e1c6      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d1f1      	bne.n	80039a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2204      	movs	r2, #4
 80039c4:	4013      	ands	r3, r2
 80039c6:	d100      	bne.n	80039ca <HAL_RCC_OscConfig+0x29e>
 80039c8:	e0b4      	b.n	8003b34 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	201f      	movs	r0, #31
 80039cc:	183b      	adds	r3, r7, r0
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	055b      	lsls	r3, r3, #21
 80039da:	4013      	ands	r3, r2
 80039dc:	d110      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	0549      	lsls	r1, r1, #21
 80039e8:	430a      	orrs	r2, r1
 80039ea:	61da      	str	r2, [r3, #28]
 80039ec:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	055b      	lsls	r3, r3, #21
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_RCC_OscConfig+0x338>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d11a      	bne.n	8003a42 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCC_OscConfig+0x338>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <HAL_RCC_OscConfig+0x338>)
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	0049      	lsls	r1, r1, #1
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1a:	f7ff fb5b 	bl	80030d4 <HAL_GetTick>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a24:	f7ff fb56 	bl	80030d4 <HAL_GetTick>
 8003a28:	0002      	movs	r2, r0
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e185      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_OscConfig+0x338>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d10e      	bne.n	8003a68 <HAL_RCC_OscConfig+0x33c>
 8003a4a:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003a4c:	6a1a      	ldr	r2, [r3, #32]
 8003a4e:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <HAL_RCC_OscConfig+0x32c>)
 8003a50:	2101      	movs	r1, #1
 8003a52:	430a      	orrs	r2, r1
 8003a54:	621a      	str	r2, [r3, #32]
 8003a56:	e035      	b.n	8003ac4 <HAL_RCC_OscConfig+0x398>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	fffeffff 	.word	0xfffeffff
 8003a60:	fffbffff 	.word	0xfffbffff
 8003a64:	40007000 	.word	0x40007000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10c      	bne.n	8003a8a <HAL_RCC_OscConfig+0x35e>
 8003a70:	4bb6      	ldr	r3, [pc, #728]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	4bb5      	ldr	r3, [pc, #724]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003a76:	2101      	movs	r1, #1
 8003a78:	438a      	bics	r2, r1
 8003a7a:	621a      	str	r2, [r3, #32]
 8003a7c:	4bb3      	ldr	r3, [pc, #716]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	4bb2      	ldr	r3, [pc, #712]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003a82:	2104      	movs	r1, #4
 8003a84:	438a      	bics	r2, r1
 8003a86:	621a      	str	r2, [r3, #32]
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x398>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d10c      	bne.n	8003aac <HAL_RCC_OscConfig+0x380>
 8003a92:	4bae      	ldr	r3, [pc, #696]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003a94:	6a1a      	ldr	r2, [r3, #32]
 8003a96:	4bad      	ldr	r3, [pc, #692]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003a98:	2104      	movs	r1, #4
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	621a      	str	r2, [r3, #32]
 8003a9e:	4bab      	ldr	r3, [pc, #684]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003aa0:	6a1a      	ldr	r2, [r3, #32]
 8003aa2:	4baa      	ldr	r3, [pc, #680]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	621a      	str	r2, [r3, #32]
 8003aaa:	e00b      	b.n	8003ac4 <HAL_RCC_OscConfig+0x398>
 8003aac:	4ba7      	ldr	r3, [pc, #668]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	4ba6      	ldr	r3, [pc, #664]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	621a      	str	r2, [r3, #32]
 8003ab8:	4ba4      	ldr	r3, [pc, #656]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	4ba3      	ldr	r3, [pc, #652]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003abe:	2104      	movs	r1, #4
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d014      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003acc:	f7ff fb02 	bl	80030d4 <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	e009      	b.n	8003aea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7ff fafd 	bl	80030d4 <HAL_GetTick>
 8003ada:	0002      	movs	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	4a9b      	ldr	r2, [pc, #620]	; (8003d50 <HAL_RCC_OscConfig+0x624>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e12b      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aea:	4b98      	ldr	r3, [pc, #608]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	2202      	movs	r2, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x3aa>
 8003af4:	e013      	b.n	8003b1e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7ff faed 	bl	80030d4 <HAL_GetTick>
 8003afa:	0003      	movs	r3, r0
 8003afc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afe:	e009      	b.n	8003b14 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b00:	f7ff fae8 	bl	80030d4 <HAL_GetTick>
 8003b04:	0002      	movs	r2, r0
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	4a91      	ldr	r2, [pc, #580]	; (8003d50 <HAL_RCC_OscConfig+0x624>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e116      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b14:	4b8d      	ldr	r3, [pc, #564]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b1e:	231f      	movs	r3, #31
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d105      	bne.n	8003b34 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b28:	4b88      	ldr	r3, [pc, #544]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	4b87      	ldr	r3, [pc, #540]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b2e:	4989      	ldr	r1, [pc, #548]	; (8003d54 <HAL_RCC_OscConfig+0x628>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d12a      	bne.n	8003b9c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b46:	4b81      	ldr	r3, [pc, #516]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4a:	4b80      	ldr	r3, [pc, #512]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003b52:	4b7e      	ldr	r3, [pc, #504]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b58:	2101      	movs	r1, #1
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5e:	f7ff fab9 	bl	80030d4 <HAL_GetTick>
 8003b62:	0003      	movs	r3, r0
 8003b64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b68:	f7ff fab4 	bl	80030d4 <HAL_GetTick>
 8003b6c:	0002      	movs	r2, r0
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0e3      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b7a:	4b74      	ldr	r3, [pc, #464]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	2202      	movs	r2, #2
 8003b80:	4013      	ands	r3, r2
 8003b82:	d0f1      	beq.n	8003b68 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b84:	4b71      	ldr	r3, [pc, #452]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	22f8      	movs	r2, #248	; 0xf8
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	00da      	lsls	r2, r3, #3
 8003b94:	4b6d      	ldr	r3, [pc, #436]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003b96:	430a      	orrs	r2, r1
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
 8003b9a:	e034      	b.n	8003c06 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	3305      	adds	r3, #5
 8003ba2:	d111      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003ba4:	4b69      	ldr	r3, [pc, #420]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba8:	4b68      	ldr	r3, [pc, #416]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003baa:	2104      	movs	r1, #4
 8003bac:	438a      	bics	r2, r1
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003bb0:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb4:	22f8      	movs	r2, #248	; 0xf8
 8003bb6:	4393      	bics	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	00da      	lsls	r2, r3, #3
 8003bc0:	4b62      	ldr	r3, [pc, #392]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bc6:	e01e      	b.n	8003c06 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bc8:	4b60      	ldr	r3, [pc, #384]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bcc:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003bce:	2104      	movs	r1, #4
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003bd4:	4b5d      	ldr	r3, [pc, #372]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd8:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003bda:	2101      	movs	r1, #1
 8003bdc:	438a      	bics	r2, r1
 8003bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be0:	f7ff fa78 	bl	80030d4 <HAL_GetTick>
 8003be4:	0003      	movs	r3, r0
 8003be6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003bea:	f7ff fa73 	bl	80030d4 <HAL_GetTick>
 8003bee:	0002      	movs	r2, r0
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0a2      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	2202      	movs	r2, #2
 8003c02:	4013      	ands	r3, r2
 8003c04:	d1f1      	bne.n	8003bea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d100      	bne.n	8003c10 <HAL_RCC_OscConfig+0x4e4>
 8003c0e:	e097      	b.n	8003d40 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c10:	4b4e      	ldr	r3, [pc, #312]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	220c      	movs	r2, #12
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d100      	bne.n	8003c1e <HAL_RCC_OscConfig+0x4f2>
 8003c1c:	e06b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d14c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b48      	ldr	r3, [pc, #288]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c2c:	494a      	ldr	r1, [pc, #296]	; (8003d58 <HAL_RCC_OscConfig+0x62c>)
 8003c2e:	400a      	ands	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7ff fa4f 	bl	80030d4 <HAL_GetTick>
 8003c36:	0003      	movs	r3, r0
 8003c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7ff fa4a 	bl	80030d4 <HAL_GetTick>
 8003c40:	0002      	movs	r2, r0
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e079      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	049b      	lsls	r3, r3, #18
 8003c56:	4013      	ands	r3, r2
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c5a:	4b3c      	ldr	r3, [pc, #240]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	220f      	movs	r2, #15
 8003c60:	4393      	bics	r3, r2
 8003c62:	0019      	movs	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4b38      	ldr	r3, [pc, #224]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <HAL_RCC_OscConfig+0x630>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	0019      	movs	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	431a      	orrs	r2, r3
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c88:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	0449      	lsls	r1, r1, #17
 8003c92:	430a      	orrs	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7ff fa1d 	bl	80030d4 <HAL_GetTick>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7ff fa18 	bl	80030d4 <HAL_GetTick>
 8003ca4:	0002      	movs	r2, r0
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e047      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	049b      	lsls	r3, r3, #18
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x574>
 8003cbe:	e03f      	b.n	8003d40 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc0:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003cc6:	4924      	ldr	r1, [pc, #144]	; (8003d58 <HAL_RCC_OscConfig+0x62c>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7ff fa02 	bl	80030d4 <HAL_GetTick>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd6:	f7ff f9fd 	bl	80030d4 <HAL_GetTick>
 8003cda:	0002      	movs	r2, r0
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e02c      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	049b      	lsls	r3, r3, #18
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d1f0      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x5aa>
 8003cf4:	e024      	b.n	8003d40 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e01f      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <HAL_RCC_OscConfig+0x620>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	025b      	lsls	r3, r3, #9
 8003d14:	401a      	ands	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d10e      	bne.n	8003d3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	220f      	movs	r2, #15
 8003d22:	401a      	ands	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d107      	bne.n	8003d3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	23f0      	movs	r3, #240	; 0xf0
 8003d30:	039b      	lsls	r3, r3, #14
 8003d32:	401a      	ands	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b008      	add	sp, #32
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	00001388 	.word	0x00001388
 8003d54:	efffffff 	.word	0xefffffff
 8003d58:	feffffff 	.word	0xfeffffff
 8003d5c:	ffc2ffff 	.word	0xffc2ffff

08003d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0b3      	b.n	8003edc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d74:	4b5b      	ldr	r3, [pc, #364]	; (8003ee4 <HAL_RCC_ClockConfig+0x184>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d911      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b58      	ldr	r3, [pc, #352]	; (8003ee4 <HAL_RCC_ClockConfig+0x184>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2201      	movs	r2, #1
 8003d88:	4393      	bics	r3, r2
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <HAL_RCC_ClockConfig+0x184>)
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_ClockConfig+0x184>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e09a      	b.n	8003edc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2202      	movs	r2, #2
 8003dac:	4013      	ands	r3, r2
 8003dae:	d015      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2204      	movs	r2, #4
 8003db6:	4013      	ands	r3, r2
 8003db8:	d006      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003dba:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003dc0:	21e0      	movs	r1, #224	; 0xe0
 8003dc2:	00c9      	lsls	r1, r1, #3
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc8:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	22f0      	movs	r2, #240	; 0xf0
 8003dce:	4393      	bics	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2201      	movs	r2, #1
 8003de2:	4013      	ands	r3, r2
 8003de4:	d040      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	029b      	lsls	r3, r3, #10
 8003df6:	4013      	ands	r3, r2
 8003df8:	d114      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06e      	b.n	8003edc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	4b38      	ldr	r3, [pc, #224]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	049b      	lsls	r3, r3, #18
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d108      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e062      	b.n	8003edc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e05b      	b.n	8003edc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e38:	f7ff f94c 	bl	80030d4 <HAL_GetTick>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e40:	e009      	b.n	8003e56 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e42:	f7ff f947 	bl	80030d4 <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <HAL_RCC_ClockConfig+0x18c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e042      	b.n	8003edc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	220c      	movs	r2, #12
 8003e5c:	401a      	ands	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1ec      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_RCC_ClockConfig+0x184>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4013      	ands	r3, r2
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d211      	bcs.n	8003e9a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_RCC_ClockConfig+0x184>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4393      	bics	r3, r2
 8003e7e:	0019      	movs	r1, r3
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_RCC_ClockConfig+0x184>)
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e88:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_RCC_ClockConfig+0x184>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4013      	ands	r3, r2
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d001      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e020      	b.n	8003edc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a11      	ldr	r2, [pc, #68]	; (8003ef0 <HAL_RCC_ClockConfig+0x190>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	0019      	movs	r1, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003eb8:	f000 f820 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003ebc:	0001      	movs	r1, r0
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <HAL_RCC_ClockConfig+0x188>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x194>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	000a      	movs	r2, r1
 8003ece:	40da      	lsrs	r2, r3
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x198>)
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7ff f8b7 	bl	8003048 <HAL_InitTick>
  
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	0018      	movs	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b004      	add	sp, #16
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	00001388 	.word	0x00001388
 8003ef0:	fffff8ff 	.word	0xfffff8ff
 8003ef4:	08007438 	.word	0x08007438
 8003ef8:	20000008 	.word	0x20000008

08003efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	220c      	movs	r2, #12
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x30>
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x36>
 8003f2a:	e02c      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f2e:	613b      	str	r3, [r7, #16]
      break;
 8003f30:	e02c      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	0c9b      	lsrs	r3, r3, #18
 8003f36:	220f      	movs	r2, #15
 8003f38:	4013      	ands	r3, r2
 8003f3a:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f3c:	5cd3      	ldrb	r3, [r2, r3]
 8003f3e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	220f      	movs	r2, #15
 8003f46:	4013      	ands	r3, r2
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f4a:	5cd3      	ldrb	r3, [r2, r3]
 8003f4c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	025b      	lsls	r3, r3, #9
 8003f54:	4013      	ands	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4810      	ldr	r0, [pc, #64]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f5c:	f7fc f8e6 	bl	800012c <__udivsi3>
 8003f60:	0003      	movs	r3, r0
 8003f62:	001a      	movs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4353      	muls	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e009      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	000a      	movs	r2, r1
 8003f70:	0152      	lsls	r2, r2, #5
 8003f72:	1a52      	subs	r2, r2, r1
 8003f74:	0193      	lsls	r3, r2, #6
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	185b      	adds	r3, r3, r1
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	613b      	str	r3, [r7, #16]
      break;
 8003f84:	e002      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f88:	613b      	str	r3, [r7, #16]
      break;
 8003f8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f8c:	693b      	ldr	r3, [r7, #16]
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b006      	add	sp, #24
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	007a1200 	.word	0x007a1200
 8003fa0:	08007450 	.word	0x08007450
 8003fa4:	08007460 	.word	0x08007460

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b02      	ldr	r3, [pc, #8]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	20000008 	.word	0x20000008

08003fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003fc0:	f7ff fff2 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc4:	0001      	movs	r1, r0
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	2207      	movs	r2, #7
 8003fce:	4013      	ands	r3, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fd2:	5cd3      	ldrb	r3, [r2, r3]
 8003fd4:	40d9      	lsrs	r1, r3
 8003fd6:	000b      	movs	r3, r1
}    
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	08007448 	.word	0x08007448

08003fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	025b      	lsls	r3, r3, #9
 8004000:	4013      	ands	r3, r2
 8004002:	d100      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004004:	e08e      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004006:	2017      	movs	r0, #23
 8004008:	183b      	adds	r3, r7, r0
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	055b      	lsls	r3, r3, #21
 8004016:	4013      	ands	r3, r2
 8004018:	d110      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b5c      	ldr	r3, [pc, #368]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	0549      	lsls	r1, r1, #21
 8004024:	430a      	orrs	r2, r1
 8004026:	61da      	str	r2, [r3, #28]
 8004028:	4b58      	ldr	r3, [pc, #352]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	055b      	lsls	r3, r3, #21
 8004030:	4013      	ands	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004036:	183b      	adds	r3, r7, r0
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	4b54      	ldr	r3, [pc, #336]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4013      	ands	r3, r2
 8004046:	d11a      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004048:	4b51      	ldr	r3, [pc, #324]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	0049      	lsls	r1, r1, #1
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004056:	f7ff f83d 	bl	80030d4 <HAL_GetTick>
 800405a:	0003      	movs	r3, r0
 800405c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	e008      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004060:	f7ff f838 	bl	80030d4 <HAL_GetTick>
 8004064:	0002      	movs	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e087      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4013      	ands	r3, r2
 800407c:	d0f0      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800407e:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	23c0      	movs	r3, #192	; 0xc0
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4013      	ands	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d034      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	23c0      	movs	r3, #192	; 0xc0
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4013      	ands	r3, r2
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d02c      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a0:	4b3a      	ldr	r3, [pc, #232]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a3b      	ldr	r2, [pc, #236]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b38      	ldr	r3, [pc, #224]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040b0:	2180      	movs	r1, #128	; 0x80
 80040b2:	0249      	lsls	r1, r1, #9
 80040b4:	430a      	orrs	r2, r1
 80040b6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b8:	4b34      	ldr	r3, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	4b33      	ldr	r3, [pc, #204]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040be:	4936      	ldr	r1, [pc, #216]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040c4:	4b31      	ldr	r3, [pc, #196]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	4013      	ands	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fe ffff 	bl	80030d4 <HAL_GetTick>
 80040d6:	0003      	movs	r3, r0
 80040d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040da:	e009      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fe fffa 	bl	80030d4 <HAL_GetTick>
 80040e0:	0002      	movs	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	4a2d      	ldr	r2, [pc, #180]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e048      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	4b26      	ldr	r3, [pc, #152]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	2202      	movs	r2, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	4a25      	ldr	r2, [pc, #148]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004100:	4013      	ands	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800410a:	430a      	orrs	r2, r1
 800410c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800410e:	2317      	movs	r3, #23
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004118:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800411e:	4920      	ldr	r1, [pc, #128]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004120:	400a      	ands	r2, r1
 8004122:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2201      	movs	r2, #1
 800412a:	4013      	ands	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	2203      	movs	r2, #3
 8004134:	4393      	bics	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	4b13      	ldr	r3, [pc, #76]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800413e:	430a      	orrs	r2, r1
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2220      	movs	r2, #32
 8004148:	4013      	ands	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	2210      	movs	r2, #16
 8004152:	4393      	bics	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800415c:	430a      	orrs	r2, r1
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4013      	ands	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	2240      	movs	r2, #64	; 0x40
 8004172:	4393      	bics	r3, r2
 8004174:	0019      	movs	r1, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	4b04      	ldr	r3, [pc, #16]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800417c:	430a      	orrs	r2, r1
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	0018      	movs	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	b006      	add	sp, #24
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
 8004194:	fffffcff 	.word	0xfffffcff
 8004198:	fffeffff 	.word	0xfffeffff
 800419c:	00001388 	.word	0x00001388
 80041a0:	efffffff 	.word	0xefffffff

080041a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e042      	b.n	800423c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	223d      	movs	r2, #61	; 0x3d
 80041ba:	5c9b      	ldrb	r3, [r3, r2]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d107      	bne.n	80041d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	223c      	movs	r2, #60	; 0x3c
 80041c6:	2100      	movs	r1, #0
 80041c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7fe fce7 	bl	8002ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	223d      	movs	r2, #61	; 0x3d
 80041d6:	2102      	movs	r1, #2
 80041d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	0019      	movs	r1, r3
 80041e4:	0010      	movs	r0, r2
 80041e6:	f000 fee3 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2246      	movs	r2, #70	; 0x46
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	223e      	movs	r2, #62	; 0x3e
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	223f      	movs	r2, #63	; 0x3f
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2240      	movs	r2, #64	; 0x40
 8004206:	2101      	movs	r1, #1
 8004208:	5499      	strb	r1, [r3, r2]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2241      	movs	r2, #65	; 0x41
 800420e:	2101      	movs	r1, #1
 8004210:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2242      	movs	r2, #66	; 0x42
 8004216:	2101      	movs	r1, #1
 8004218:	5499      	strb	r1, [r3, r2]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2243      	movs	r2, #67	; 0x43
 800421e:	2101      	movs	r1, #1
 8004220:	5499      	strb	r1, [r3, r2]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2244      	movs	r2, #68	; 0x44
 8004226:	2101      	movs	r1, #1
 8004228:	5499      	strb	r1, [r3, r2]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2245      	movs	r2, #69	; 0x45
 800422e:	2101      	movs	r1, #1
 8004230:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	223d      	movs	r2, #61	; 0x3d
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	223d      	movs	r2, #61	; 0x3d
 8004250:	5c9b      	ldrb	r3, [r3, r2]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d001      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e03b      	b.n	80042d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	223d      	movs	r2, #61	; 0x3d
 8004260:	2102      	movs	r1, #2
 8004262:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2101      	movs	r1, #1
 8004270:	430a      	orrs	r2, r1
 8004272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_TIM_Base_Start_IT+0x98>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <HAL_TIM_Base_Start_IT+0x5a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	05db      	lsls	r3, r3, #23
 8004286:	429a      	cmp	r2, r3
 8004288:	d009      	beq.n	800429e <HAL_TIM_Base_Start_IT+0x5a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_TIM_Base_Start_IT+0x5a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d111      	bne.n	80042c2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2207      	movs	r2, #7
 80042a6:	4013      	ands	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b06      	cmp	r3, #6
 80042ae:	d010      	beq.n	80042d2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c0:	e007      	b.n	80042d2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2101      	movs	r1, #1
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b004      	add	sp, #16
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40014000 	.word	0x40014000

080042e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2101      	movs	r1, #1
 80042fc:	438a      	bics	r2, r1
 80042fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <HAL_TIM_Base_Stop_IT+0x54>)
 8004308:	4013      	ands	r3, r2
 800430a:	d10d      	bne.n	8004328 <HAL_TIM_Base_Stop_IT+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <HAL_TIM_Base_Stop_IT+0x58>)
 8004314:	4013      	ands	r3, r2
 8004316:	d107      	bne.n	8004328 <HAL_TIM_Base_Stop_IT+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2101      	movs	r1, #1
 8004324:	438a      	bics	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	223d      	movs	r2, #61	; 0x3d
 800432c:	2101      	movs	r1, #1
 800432e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	0018      	movs	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	b002      	add	sp, #8
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	00001111 	.word	0x00001111
 8004340:	00000444 	.word	0x00000444

08004344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e042      	b.n	80043dc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	223d      	movs	r2, #61	; 0x3d
 800435a:	5c9b      	ldrb	r3, [r3, r2]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d107      	bne.n	8004372 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	223c      	movs	r2, #60	; 0x3c
 8004366:	2100      	movs	r1, #0
 8004368:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 f839 	bl	80043e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	223d      	movs	r2, #61	; 0x3d
 8004376:	2102      	movs	r1, #2
 8004378:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	0019      	movs	r1, r3
 8004384:	0010      	movs	r0, r2
 8004386:	f000 fe13 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2246      	movs	r2, #70	; 0x46
 800438e:	2101      	movs	r1, #1
 8004390:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223e      	movs	r2, #62	; 0x3e
 8004396:	2101      	movs	r1, #1
 8004398:	5499      	strb	r1, [r3, r2]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	223f      	movs	r2, #63	; 0x3f
 800439e:	2101      	movs	r1, #1
 80043a0:	5499      	strb	r1, [r3, r2]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2240      	movs	r2, #64	; 0x40
 80043a6:	2101      	movs	r1, #1
 80043a8:	5499      	strb	r1, [r3, r2]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2241      	movs	r2, #65	; 0x41
 80043ae:	2101      	movs	r1, #1
 80043b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2242      	movs	r2, #66	; 0x42
 80043b6:	2101      	movs	r1, #1
 80043b8:	5499      	strb	r1, [r3, r2]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2243      	movs	r2, #67	; 0x43
 80043be:	2101      	movs	r1, #1
 80043c0:	5499      	strb	r1, [r3, r2]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2244      	movs	r2, #68	; 0x44
 80043c6:	2101      	movs	r1, #1
 80043c8:	5499      	strb	r1, [r3, r2]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2245      	movs	r2, #69	; 0x45
 80043ce:	2101      	movs	r1, #1
 80043d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	223d      	movs	r2, #61	; 0x3d
 80043d6:	2101      	movs	r1, #1
 80043d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	0018      	movs	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	b002      	add	sp, #8
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d108      	bne.n	8004416 <HAL_TIM_PWM_Start+0x22>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	223e      	movs	r2, #62	; 0x3e
 8004408:	5c9b      	ldrb	r3, [r3, r2]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	1e5a      	subs	r2, r3, #1
 8004410:	4193      	sbcs	r3, r2
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e01f      	b.n	8004456 <HAL_TIM_PWM_Start+0x62>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d108      	bne.n	800442e <HAL_TIM_PWM_Start+0x3a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	223f      	movs	r2, #63	; 0x3f
 8004420:	5c9b      	ldrb	r3, [r3, r2]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	1e5a      	subs	r2, r3, #1
 8004428:	4193      	sbcs	r3, r2
 800442a:	b2db      	uxtb	r3, r3
 800442c:	e013      	b.n	8004456 <HAL_TIM_PWM_Start+0x62>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d108      	bne.n	8004446 <HAL_TIM_PWM_Start+0x52>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2240      	movs	r2, #64	; 0x40
 8004438:	5c9b      	ldrb	r3, [r3, r2]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	4193      	sbcs	r3, r2
 8004442:	b2db      	uxtb	r3, r3
 8004444:	e007      	b.n	8004456 <HAL_TIM_PWM_Start+0x62>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2241      	movs	r2, #65	; 0x41
 800444a:	5c9b      	ldrb	r3, [r3, r2]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	4193      	sbcs	r3, r2
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e074      	b.n	8004548 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <HAL_TIM_PWM_Start+0x7a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	223e      	movs	r2, #62	; 0x3e
 8004468:	2102      	movs	r1, #2
 800446a:	5499      	strb	r1, [r3, r2]
 800446c:	e013      	b.n	8004496 <HAL_TIM_PWM_Start+0xa2>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d104      	bne.n	800447e <HAL_TIM_PWM_Start+0x8a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	223f      	movs	r2, #63	; 0x3f
 8004478:	2102      	movs	r1, #2
 800447a:	5499      	strb	r1, [r3, r2]
 800447c:	e00b      	b.n	8004496 <HAL_TIM_PWM_Start+0xa2>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d104      	bne.n	800448e <HAL_TIM_PWM_Start+0x9a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	2102      	movs	r1, #2
 800448a:	5499      	strb	r1, [r3, r2]
 800448c:	e003      	b.n	8004496 <HAL_TIM_PWM_Start+0xa2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2241      	movs	r2, #65	; 0x41
 8004492:	2102      	movs	r1, #2
 8004494:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6839      	ldr	r1, [r7, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	0018      	movs	r0, r3
 80044a0:	f001 f9ce 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a29      	ldr	r2, [pc, #164]	; (8004550 <HAL_TIM_PWM_Start+0x15c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00e      	beq.n	80044cc <HAL_TIM_PWM_Start+0xd8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a28      	ldr	r2, [pc, #160]	; (8004554 <HAL_TIM_PWM_Start+0x160>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d009      	beq.n	80044cc <HAL_TIM_PWM_Start+0xd8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a26      	ldr	r2, [pc, #152]	; (8004558 <HAL_TIM_PWM_Start+0x164>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_TIM_PWM_Start+0xd8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a25      	ldr	r2, [pc, #148]	; (800455c <HAL_TIM_PWM_Start+0x168>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d101      	bne.n	80044d0 <HAL_TIM_PWM_Start+0xdc>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_TIM_PWM_Start+0xde>
 80044d0:	2300      	movs	r3, #0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	0209      	lsls	r1, r1, #8
 80044e4:	430a      	orrs	r2, r1
 80044e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_TIM_PWM_Start+0x15c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00f      	beq.n	8004512 <HAL_TIM_PWM_Start+0x11e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	2380      	movs	r3, #128	; 0x80
 80044f8:	05db      	lsls	r3, r3, #23
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d009      	beq.n	8004512 <HAL_TIM_PWM_Start+0x11e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a17      	ldr	r2, [pc, #92]	; (8004560 <HAL_TIM_PWM_Start+0x16c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_TIM_PWM_Start+0x11e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a11      	ldr	r2, [pc, #68]	; (8004554 <HAL_TIM_PWM_Start+0x160>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d111      	bne.n	8004536 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2207      	movs	r2, #7
 800451a:	4013      	ands	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b06      	cmp	r3, #6
 8004522:	d010      	beq.n	8004546 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2101      	movs	r1, #1
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004534:	e007      	b.n	8004546 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2101      	movs	r1, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	b004      	add	sp, #16
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40014000 	.word	0x40014000
 8004558:	40014400 	.word	0x40014400
 800455c:	40014800 	.word	0x40014800
 8004560:	40000400 	.word	0x40000400

08004564 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	0018      	movs	r0, r3
 8004578:	f001 f962 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <HAL_TIM_PWM_Stop+0xdc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <HAL_TIM_PWM_Stop+0x40>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2e      	ldr	r2, [pc, #184]	; (8004644 <HAL_TIM_PWM_Stop+0xe0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_TIM_PWM_Stop+0x40>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a2c      	ldr	r2, [pc, #176]	; (8004648 <HAL_TIM_PWM_Stop+0xe4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_PWM_Stop+0x40>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2b      	ldr	r2, [pc, #172]	; (800464c <HAL_TIM_PWM_Stop+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d101      	bne.n	80045a8 <HAL_TIM_PWM_Stop+0x44>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <HAL_TIM_PWM_Stop+0x46>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d013      	beq.n	80045d6 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4a26      	ldr	r2, [pc, #152]	; (8004650 <HAL_TIM_PWM_Stop+0xec>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	d10d      	bne.n	80045d6 <HAL_TIM_PWM_Stop+0x72>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4a24      	ldr	r2, [pc, #144]	; (8004654 <HAL_TIM_PWM_Stop+0xf0>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_PWM_Stop+0x72>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4921      	ldr	r1, [pc, #132]	; (8004658 <HAL_TIM_PWM_Stop+0xf4>)
 80045d2:	400a      	ands	r2, r1
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <HAL_TIM_PWM_Stop+0xec>)
 80045de:	4013      	ands	r3, r2
 80045e0:	d10d      	bne.n	80045fe <HAL_TIM_PWM_Stop+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <HAL_TIM_PWM_Stop+0xf0>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	d107      	bne.n	80045fe <HAL_TIM_PWM_Stop+0x9a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2101      	movs	r1, #1
 80045fa:	438a      	bics	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d104      	bne.n	800460e <HAL_TIM_PWM_Stop+0xaa>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	223e      	movs	r2, #62	; 0x3e
 8004608:	2101      	movs	r1, #1
 800460a:	5499      	strb	r1, [r3, r2]
 800460c:	e013      	b.n	8004636 <HAL_TIM_PWM_Stop+0xd2>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d104      	bne.n	800461e <HAL_TIM_PWM_Stop+0xba>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	223f      	movs	r2, #63	; 0x3f
 8004618:	2101      	movs	r1, #1
 800461a:	5499      	strb	r1, [r3, r2]
 800461c:	e00b      	b.n	8004636 <HAL_TIM_PWM_Stop+0xd2>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d104      	bne.n	800462e <HAL_TIM_PWM_Stop+0xca>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2240      	movs	r2, #64	; 0x40
 8004628:	2101      	movs	r1, #1
 800462a:	5499      	strb	r1, [r3, r2]
 800462c:	e003      	b.n	8004636 <HAL_TIM_PWM_Stop+0xd2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2241      	movs	r2, #65	; 0x41
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800
 8004650:	00001111 	.word	0x00001111
 8004654:	00000444 	.word	0x00000444
 8004658:	ffff7fff 	.word	0xffff7fff

0800465c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e042      	b.n	80046f4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	223d      	movs	r2, #61	; 0x3d
 8004672:	5c9b      	ldrb	r3, [r3, r2]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	223c      	movs	r2, #60	; 0x3c
 800467e:	2100      	movs	r1, #0
 8004680:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 f839 	bl	80046fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	223d      	movs	r2, #61	; 0x3d
 800468e:	2102      	movs	r1, #2
 8004690:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	0019      	movs	r1, r3
 800469c:	0010      	movs	r0, r2
 800469e:	f000 fc87 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2246      	movs	r2, #70	; 0x46
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	223e      	movs	r2, #62	; 0x3e
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	223f      	movs	r2, #63	; 0x3f
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2240      	movs	r2, #64	; 0x40
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2241      	movs	r2, #65	; 0x41
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2242      	movs	r2, #66	; 0x42
 80046ce:	2101      	movs	r1, #1
 80046d0:	5499      	strb	r1, [r3, r2]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2243      	movs	r2, #67	; 0x43
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2244      	movs	r2, #68	; 0x44
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2245      	movs	r2, #69	; 0x45
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	223d      	movs	r2, #61	; 0x3d
 80046ee:	2101      	movs	r1, #1
 80046f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	230f      	movs	r3, #15
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <HAL_TIM_IC_Start_IT+0x22>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	223e      	movs	r2, #62	; 0x3e
 8004728:	5c9b      	ldrb	r3, [r3, r2]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e013      	b.n	8004756 <HAL_TIM_IC_Start_IT+0x4a>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b04      	cmp	r3, #4
 8004732:	d104      	bne.n	800473e <HAL_TIM_IC_Start_IT+0x32>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	223f      	movs	r2, #63	; 0x3f
 8004738:	5c9b      	ldrb	r3, [r3, r2]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e00b      	b.n	8004756 <HAL_TIM_IC_Start_IT+0x4a>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d104      	bne.n	800474e <HAL_TIM_IC_Start_IT+0x42>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	5c9b      	ldrb	r3, [r3, r2]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e003      	b.n	8004756 <HAL_TIM_IC_Start_IT+0x4a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2241      	movs	r2, #65	; 0x41
 8004752:	5c9b      	ldrb	r3, [r3, r2]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	220e      	movs	r2, #14
 8004758:	18ba      	adds	r2, r7, r2
 800475a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <HAL_TIM_IC_Start_IT+0x60>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2242      	movs	r2, #66	; 0x42
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e013      	b.n	8004794 <HAL_TIM_IC_Start_IT+0x88>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d104      	bne.n	800477c <HAL_TIM_IC_Start_IT+0x70>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2243      	movs	r2, #67	; 0x43
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e00b      	b.n	8004794 <HAL_TIM_IC_Start_IT+0x88>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d104      	bne.n	800478c <HAL_TIM_IC_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2244      	movs	r2, #68	; 0x44
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e003      	b.n	8004794 <HAL_TIM_IC_Start_IT+0x88>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2245      	movs	r2, #69	; 0x45
 8004790:	5c9b      	ldrb	r3, [r3, r2]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	210d      	movs	r1, #13
 8004796:	187a      	adds	r2, r7, r1
 8004798:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800479a:	230e      	movs	r3, #14
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d103      	bne.n	80047ac <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80047a4:	187b      	adds	r3, r7, r1
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d001      	beq.n	80047b0 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b1      	b.n	8004914 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d104      	bne.n	80047c0 <HAL_TIM_IC_Start_IT+0xb4>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	223e      	movs	r2, #62	; 0x3e
 80047ba:	2102      	movs	r1, #2
 80047bc:	5499      	strb	r1, [r3, r2]
 80047be:	e013      	b.n	80047e8 <HAL_TIM_IC_Start_IT+0xdc>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d104      	bne.n	80047d0 <HAL_TIM_IC_Start_IT+0xc4>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	223f      	movs	r2, #63	; 0x3f
 80047ca:	2102      	movs	r1, #2
 80047cc:	5499      	strb	r1, [r3, r2]
 80047ce:	e00b      	b.n	80047e8 <HAL_TIM_IC_Start_IT+0xdc>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d104      	bne.n	80047e0 <HAL_TIM_IC_Start_IT+0xd4>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2240      	movs	r2, #64	; 0x40
 80047da:	2102      	movs	r1, #2
 80047dc:	5499      	strb	r1, [r3, r2]
 80047de:	e003      	b.n	80047e8 <HAL_TIM_IC_Start_IT+0xdc>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2241      	movs	r2, #65	; 0x41
 80047e4:	2102      	movs	r1, #2
 80047e6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <HAL_TIM_IC_Start_IT+0xec>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2242      	movs	r2, #66	; 0x42
 80047f2:	2102      	movs	r1, #2
 80047f4:	5499      	strb	r1, [r3, r2]
 80047f6:	e013      	b.n	8004820 <HAL_TIM_IC_Start_IT+0x114>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d104      	bne.n	8004808 <HAL_TIM_IC_Start_IT+0xfc>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2243      	movs	r2, #67	; 0x43
 8004802:	2102      	movs	r1, #2
 8004804:	5499      	strb	r1, [r3, r2]
 8004806:	e00b      	b.n	8004820 <HAL_TIM_IC_Start_IT+0x114>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b08      	cmp	r3, #8
 800480c:	d104      	bne.n	8004818 <HAL_TIM_IC_Start_IT+0x10c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2244      	movs	r2, #68	; 0x44
 8004812:	2102      	movs	r1, #2
 8004814:	5499      	strb	r1, [r3, r2]
 8004816:	e003      	b.n	8004820 <HAL_TIM_IC_Start_IT+0x114>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2245      	movs	r2, #69	; 0x45
 800481c:	2102      	movs	r1, #2
 800481e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d02a      	beq.n	800487c <HAL_TIM_IC_Start_IT+0x170>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	d830      	bhi.n	800488e <HAL_TIM_IC_Start_IT+0x182>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d01b      	beq.n	800486a <HAL_TIM_IC_Start_IT+0x15e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d82a      	bhi.n	800488e <HAL_TIM_IC_Start_IT+0x182>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IC_Start_IT+0x13a>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b04      	cmp	r3, #4
 8004842:	d009      	beq.n	8004858 <HAL_TIM_IC_Start_IT+0x14c>
 8004844:	e023      	b.n	800488e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2102      	movs	r1, #2
 8004852:	430a      	orrs	r2, r1
 8004854:	60da      	str	r2, [r3, #12]
      break;
 8004856:	e01f      	b.n	8004898 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2104      	movs	r1, #4
 8004864:	430a      	orrs	r2, r1
 8004866:	60da      	str	r2, [r3, #12]
      break;
 8004868:	e016      	b.n	8004898 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2108      	movs	r1, #8
 8004876:	430a      	orrs	r2, r1
 8004878:	60da      	str	r2, [r3, #12]
      break;
 800487a:	e00d      	b.n	8004898 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2110      	movs	r1, #16
 8004888:	430a      	orrs	r2, r1
 800488a:	60da      	str	r2, [r3, #12]
      break;
 800488c:	e004      	b.n	8004898 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800488e:	230f      	movs	r3, #15
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
      break;
 8004896:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004898:	230f      	movs	r3, #15
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d135      	bne.n	800490e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 ffc8 	bl	8005840 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <HAL_TIM_IC_Start_IT+0x210>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00f      	beq.n	80048da <HAL_TIM_IC_Start_IT+0x1ce>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	05db      	lsls	r3, r3, #23
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d009      	beq.n	80048da <HAL_TIM_IC_Start_IT+0x1ce>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a15      	ldr	r2, [pc, #84]	; (8004920 <HAL_TIM_IC_Start_IT+0x214>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_TIM_IC_Start_IT+0x1ce>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a13      	ldr	r2, [pc, #76]	; (8004924 <HAL_TIM_IC_Start_IT+0x218>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d111      	bne.n	80048fe <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2207      	movs	r2, #7
 80048e2:	4013      	ands	r3, r2
 80048e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b06      	cmp	r3, #6
 80048ea:	d010      	beq.n	800490e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2101      	movs	r1, #1
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fc:	e007      	b.n	800490e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2101      	movs	r1, #1
 800490a:	430a      	orrs	r2, r1
 800490c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800490e:	230f      	movs	r3, #15
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	781b      	ldrb	r3, [r3, #0]
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	b004      	add	sp, #16
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40000400 	.word	0x40000400
 8004924:	40014000 	.word	0x40014000

08004928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2202      	movs	r2, #2
 8004944:	4013      	ands	r3, r2
 8004946:	d021      	beq.n	800498c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2202      	movs	r2, #2
 800494c:	4013      	ands	r3, r2
 800494e:	d01d      	beq.n	800498c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2203      	movs	r2, #3
 8004956:	4252      	negs	r2, r2
 8004958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2203      	movs	r2, #3
 8004968:	4013      	ands	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	0018      	movs	r0, r3
 8004970:	f7fe f8ae 	bl	8002ad0 <HAL_TIM_IC_CaptureCallback>
 8004974:	e007      	b.n	8004986 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 fb01 	bl	8004f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f000 fb05 	bl	8004f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2204      	movs	r2, #4
 8004990:	4013      	ands	r3, r2
 8004992:	d022      	beq.n	80049da <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2204      	movs	r2, #4
 8004998:	4013      	ands	r3, r2
 800499a:	d01e      	beq.n	80049da <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2205      	movs	r2, #5
 80049a2:	4252      	negs	r2, r2
 80049a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	23c0      	movs	r3, #192	; 0xc0
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4013      	ands	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f7fe f887 	bl	8002ad0 <HAL_TIM_IC_CaptureCallback>
 80049c2:	e007      	b.n	80049d4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f000 fada 	bl	8004f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fade 	bl	8004f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2208      	movs	r2, #8
 80049de:	4013      	ands	r3, r2
 80049e0:	d021      	beq.n	8004a26 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2208      	movs	r2, #8
 80049e6:	4013      	ands	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2209      	movs	r2, #9
 80049f0:	4252      	negs	r2, r2
 80049f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2204      	movs	r2, #4
 80049f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	2203      	movs	r2, #3
 8004a02:	4013      	ands	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f7fe f861 	bl	8002ad0 <HAL_TIM_IC_CaptureCallback>
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 fab4 	bl	8004f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 fab8 	bl	8004f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2210      	movs	r2, #16
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d022      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2210      	movs	r2, #16
 8004a32:	4013      	ands	r3, r2
 8004a34:	d01e      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2211      	movs	r2, #17
 8004a3c:	4252      	negs	r2, r2
 8004a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2208      	movs	r2, #8
 8004a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	23c0      	movs	r3, #192	; 0xc0
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fe f83a 	bl	8002ad0 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e007      	b.n	8004a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 fa8d 	bl	8004f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 fa91 	bl	8004f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2201      	movs	r2, #1
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d00c      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	4013      	ands	r3, r2
 8004a82:	d008      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	4252      	negs	r2, r2
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7fd ff73 	bl	800297c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2280      	movs	r2, #128	; 0x80
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d008      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2281      	movs	r2, #129	; 0x81
 8004aac:	4252      	negs	r2, r2
 8004aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 ffac 	bl	8005a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	4013      	ands	r3, r2
 8004abe:	d00c      	beq.n	8004ada <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2240      	movs	r2, #64	; 0x40
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d008      	beq.n	8004ada <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2241      	movs	r2, #65	; 0x41
 8004ace:	4252      	negs	r2, r2
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fa63 	bl	8004fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2220      	movs	r2, #32
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d00c      	beq.n	8004afc <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d008      	beq.n	8004afc <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2221      	movs	r2, #33	; 0x21
 8004af0:	4252      	negs	r2, r2
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 ff82 	bl	8005a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b004      	add	sp, #16
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b10:	2317      	movs	r3, #23
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	223c      	movs	r2, #60	; 0x3c
 8004b1c:	5c9b      	ldrb	r3, [r3, r2]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_IC_ConfigChannel+0x22>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e08c      	b.n	8004c40 <HAL_TIM_IC_ConfigChannel+0x13c>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	223c      	movs	r2, #60	; 0x3c
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d11b      	bne.n	8004b6c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f000 fcbe 	bl	80054c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	210c      	movs	r1, #12
 8004b54:	438a      	bics	r2, r1
 8004b56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6999      	ldr	r1, [r3, #24]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	619a      	str	r2, [r3, #24]
 8004b6a:	e062      	b.n	8004c32 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d11c      	bne.n	8004bac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f000 fd29 	bl	80055d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	492d      	ldr	r1, [pc, #180]	; (8004c48 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004b92:	400a      	ands	r2, r1
 8004b94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6999      	ldr	r1, [r3, #24]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	021a      	lsls	r2, r3, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	619a      	str	r2, [r3, #24]
 8004baa:	e042      	b.n	8004c32 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d11b      	bne.n	8004bea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f000 fd7d 	bl	80056c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	210c      	movs	r1, #12
 8004bd2:	438a      	bics	r2, r1
 8004bd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	61da      	str	r2, [r3, #28]
 8004be8:	e023      	b.n	8004c32 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d11c      	bne.n	8004c2a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6819      	ldr	r1, [r3, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f000 fd9e 	bl	8005740 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69da      	ldr	r2, [r3, #28]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	490e      	ldr	r1, [pc, #56]	; (8004c48 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004c10:	400a      	ands	r2, r1
 8004c12:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69d9      	ldr	r1, [r3, #28]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	021a      	lsls	r2, r3, #8
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	61da      	str	r2, [r3, #28]
 8004c28:	e003      	b.n	8004c32 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004c2a:	2317      	movs	r3, #23
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	223c      	movs	r2, #60	; 0x3c
 8004c36:	2100      	movs	r1, #0
 8004c38:	5499      	strb	r1, [r3, r2]

  return status;
 8004c3a:	2317      	movs	r3, #23
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	781b      	ldrb	r3, [r3, #0]
}
 8004c40:	0018      	movs	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b006      	add	sp, #24
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	fffff3ff 	.word	0xfffff3ff

08004c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2317      	movs	r3, #23
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	223c      	movs	r2, #60	; 0x3c
 8004c64:	5c9b      	ldrb	r3, [r3, r2]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e0ad      	b.n	8004dca <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	223c      	movs	r2, #60	; 0x3c
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b0c      	cmp	r3, #12
 8004c7a:	d100      	bne.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x32>
 8004c7c:	e076      	b.n	8004d6c <HAL_TIM_PWM_ConfigChannel+0x120>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d900      	bls.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004c84:	e095      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d04e      	beq.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0xde>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d900      	bls.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004c92:	e08e      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d021      	beq.n	8004ce4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004ca0:	e087      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	0011      	movs	r1, r2
 8004caa:	0018      	movs	r0, r3
 8004cac:	f000 fa0e 	bl	80050cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2108      	movs	r1, #8
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2104      	movs	r1, #4
 8004ccc:	438a      	bics	r2, r1
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	619a      	str	r2, [r3, #24]
      break;
 8004ce2:	e06b      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	0011      	movs	r1, r2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f000 fa75 	bl	80051dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2180      	movs	r1, #128	; 0x80
 8004cfe:	0109      	lsls	r1, r1, #4
 8004d00:	430a      	orrs	r2, r1
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4931      	ldr	r1, [pc, #196]	; (8004dd4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004d10:	400a      	ands	r2, r1
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	619a      	str	r2, [r3, #24]
      break;
 8004d28:	e048      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	0011      	movs	r1, r2
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 fad6 	bl	80052e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2108      	movs	r1, #8
 8004d44:	430a      	orrs	r2, r1
 8004d46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2104      	movs	r1, #4
 8004d54:	438a      	bics	r2, r1
 8004d56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69d9      	ldr	r1, [r3, #28]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	61da      	str	r2, [r3, #28]
      break;
 8004d6a:	e027      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	0011      	movs	r1, r2
 8004d74:	0018      	movs	r0, r3
 8004d76:	f000 fb3b 	bl	80053f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	0109      	lsls	r1, r1, #4
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69da      	ldr	r2, [r3, #28]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	490f      	ldr	r1, [pc, #60]	; (8004dd4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004d98:	400a      	ands	r2, r1
 8004d9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69d9      	ldr	r1, [r3, #28]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	021a      	lsls	r2, r3, #8
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	61da      	str	r2, [r3, #28]
      break;
 8004db0:	e004      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004db2:	2317      	movs	r3, #23
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
      break;
 8004dba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	223c      	movs	r2, #60	; 0x3c
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	5499      	strb	r1, [r3, r2]

  return status;
 8004dc4:	2317      	movs	r3, #23
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	781b      	ldrb	r3, [r3, #0]
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b006      	add	sp, #24
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	fffffbff 	.word	0xfffffbff

08004dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	230f      	movs	r3, #15
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	223c      	movs	r2, #60	; 0x3c
 8004dee:	5c9b      	ldrb	r3, [r3, r2]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_TIM_ConfigClockSource+0x20>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e0bc      	b.n	8004f72 <HAL_TIM_ConfigClockSource+0x19a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	223c      	movs	r2, #60	; 0x3c
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	223d      	movs	r2, #61	; 0x3d
 8004e04:	2102      	movs	r1, #2
 8004e06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2277      	movs	r2, #119	; 0x77
 8004e14:	4393      	bics	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a58      	ldr	r2, [pc, #352]	; (8004f7c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	0192      	lsls	r2, r2, #6
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d040      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0xde>
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	0192      	lsls	r2, r2, #6
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d900      	bls.n	8004e3e <HAL_TIM_ConfigClockSource+0x66>
 8004e3c:	e088      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	0152      	lsls	r2, r2, #5
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d100      	bne.n	8004e48 <HAL_TIM_ConfigClockSource+0x70>
 8004e46:	e088      	b.n	8004f5a <HAL_TIM_ConfigClockSource+0x182>
 8004e48:	2280      	movs	r2, #128	; 0x80
 8004e4a:	0152      	lsls	r2, r2, #5
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d900      	bls.n	8004e52 <HAL_TIM_ConfigClockSource+0x7a>
 8004e50:	e07e      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
 8004e52:	2b70      	cmp	r3, #112	; 0x70
 8004e54:	d018      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0xb0>
 8004e56:	d900      	bls.n	8004e5a <HAL_TIM_ConfigClockSource+0x82>
 8004e58:	e07a      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
 8004e5a:	2b60      	cmp	r3, #96	; 0x60
 8004e5c:	d04f      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x126>
 8004e5e:	d900      	bls.n	8004e62 <HAL_TIM_ConfigClockSource+0x8a>
 8004e60:	e076      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
 8004e62:	2b50      	cmp	r3, #80	; 0x50
 8004e64:	d03b      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x106>
 8004e66:	d900      	bls.n	8004e6a <HAL_TIM_ConfigClockSource+0x92>
 8004e68:	e072      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d057      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x146>
 8004e6e:	d900      	bls.n	8004e72 <HAL_TIM_ConfigClockSource+0x9a>
 8004e70:	e06e      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
 8004e72:	2b30      	cmp	r3, #48	; 0x30
 8004e74:	d063      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x166>
 8004e76:	d86b      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d060      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x166>
 8004e7c:	d868      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d05d      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x166>
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d05b      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x166>
 8004e86:	e063      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6899      	ldr	r1, [r3, #8]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f000 fcb2 	bl	8005800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2277      	movs	r2, #119	; 0x77
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]
      break;
 8004eb4:	e052      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f000 fc9b 	bl	8005800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2180      	movs	r1, #128	; 0x80
 8004ed6:	01c9      	lsls	r1, r1, #7
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
      break;
 8004edc:	e03e      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	001a      	movs	r2, r3
 8004eec:	f000 fb46 	bl	800557c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2150      	movs	r1, #80	; 0x50
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 fc68 	bl	80057cc <TIM_ITRx_SetConfig>
      break;
 8004efc:	e02e      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	f000 fba6 	bl	800565c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2160      	movs	r1, #96	; 0x60
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fc58 	bl	80057cc <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e01e      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	f000 fb26 	bl	800557c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2140      	movs	r1, #64	; 0x40
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 fc48 	bl	80057cc <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e00e      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	0019      	movs	r1, r3
 8004f48:	0010      	movs	r0, r2
 8004f4a:	f000 fc3f 	bl	80057cc <TIM_ITRx_SetConfig>
      break;
 8004f4e:	e005      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004f50:	230f      	movs	r3, #15
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
      break;
 8004f58:	e000      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004f5a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	223d      	movs	r2, #61	; 0x3d
 8004f60:	2101      	movs	r1, #1
 8004f62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	223c      	movs	r2, #60	; 0x3c
 8004f68:	2100      	movs	r1, #0
 8004f6a:	5499      	strb	r1, [r3, r2]

  return status;
 8004f6c:	230f      	movs	r3, #15
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	781b      	ldrb	r3, [r3, #0]
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b004      	add	sp, #16
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	ffff00ff 	.word	0xffff00ff

08004f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b002      	add	sp, #8
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3b      	ldr	r2, [pc, #236]	; (80050b0 <TIM_Base_SetConfig+0x100>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d008      	beq.n	8004fda <TIM_Base_SetConfig+0x2a>
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	05db      	lsls	r3, r3, #23
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d003      	beq.n	8004fda <TIM_Base_SetConfig+0x2a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a37      	ldr	r2, [pc, #220]	; (80050b4 <TIM_Base_SetConfig+0x104>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d108      	bne.n	8004fec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2270      	movs	r2, #112	; 0x70
 8004fde:	4393      	bics	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a30      	ldr	r2, [pc, #192]	; (80050b0 <TIM_Base_SetConfig+0x100>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d018      	beq.n	8005026 <TIM_Base_SetConfig+0x76>
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	05db      	lsls	r3, r3, #23
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d013      	beq.n	8005026 <TIM_Base_SetConfig+0x76>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2c      	ldr	r2, [pc, #176]	; (80050b4 <TIM_Base_SetConfig+0x104>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_Base_SetConfig+0x76>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2b      	ldr	r2, [pc, #172]	; (80050b8 <TIM_Base_SetConfig+0x108>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0x76>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <TIM_Base_SetConfig+0x10c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0x76>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a29      	ldr	r2, [pc, #164]	; (80050c0 <TIM_Base_SetConfig+0x110>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0x76>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a28      	ldr	r2, [pc, #160]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a27      	ldr	r2, [pc, #156]	; (80050c8 <TIM_Base_SetConfig+0x118>)
 800502a:	4013      	ands	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2280      	movs	r2, #128	; 0x80
 800503c:	4393      	bics	r3, r2
 800503e:	001a      	movs	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <TIM_Base_SetConfig+0x100>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <TIM_Base_SetConfig+0xce>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <TIM_Base_SetConfig+0x10c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <TIM_Base_SetConfig+0xce>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <TIM_Base_SetConfig+0x110>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_Base_SetConfig+0xce>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d103      	bne.n	8005086 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2201      	movs	r2, #1
 8005092:	4013      	ands	r3, r2
 8005094:	2b01      	cmp	r3, #1
 8005096:	d106      	bne.n	80050a6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2201      	movs	r2, #1
 800509e:	4393      	bics	r3, r2
 80050a0:	001a      	movs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	611a      	str	r2, [r3, #16]
  }
}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b004      	add	sp, #16
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40002000 	.word	0x40002000
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	fffffcff 	.word	0xfffffcff

080050cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	2201      	movs	r2, #1
 80050e2:	4393      	bics	r3, r2
 80050e4:	001a      	movs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2270      	movs	r2, #112	; 0x70
 80050fa:	4393      	bics	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2203      	movs	r2, #3
 8005102:	4393      	bics	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2202      	movs	r2, #2
 8005114:	4393      	bics	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <TIM_OC1_SetConfig+0xf8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00b      	beq.n	8005142 <TIM_OC1_SetConfig+0x76>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <TIM_OC1_SetConfig+0xfc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <TIM_OC1_SetConfig+0x76>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a25      	ldr	r2, [pc, #148]	; (80051cc <TIM_OC1_SetConfig+0x100>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_OC1_SetConfig+0x76>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a24      	ldr	r2, [pc, #144]	; (80051d0 <TIM_OC1_SetConfig+0x104>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10c      	bne.n	800515c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2208      	movs	r2, #8
 8005146:	4393      	bics	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2204      	movs	r2, #4
 8005158:	4393      	bics	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <TIM_OC1_SetConfig+0xf8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_OC1_SetConfig+0xb0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <TIM_OC1_SetConfig+0xfc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_OC1_SetConfig+0xb0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a17      	ldr	r2, [pc, #92]	; (80051cc <TIM_OC1_SetConfig+0x100>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_OC1_SetConfig+0xb0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <TIM_OC1_SetConfig+0x104>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d111      	bne.n	80051a0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <TIM_OC1_SetConfig+0x108>)
 8005180:	4013      	ands	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <TIM_OC1_SetConfig+0x10c>)
 8005188:	4013      	ands	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	46bd      	mov	sp, r7
 80051be:	b006      	add	sp, #24
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800
 80051d4:	fffffeff 	.word	0xfffffeff
 80051d8:	fffffdff 	.word	0xfffffdff

080051dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	2210      	movs	r2, #16
 80051f2:	4393      	bics	r3, r2
 80051f4:	001a      	movs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4a2e      	ldr	r2, [pc, #184]	; (80052c4 <TIM_OC2_SetConfig+0xe8>)
 800520a:	4013      	ands	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <TIM_OC2_SetConfig+0xec>)
 8005212:	4013      	ands	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2220      	movs	r2, #32
 8005226:	4393      	bics	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a24      	ldr	r2, [pc, #144]	; (80052cc <TIM_OC2_SetConfig+0xf0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d10d      	bne.n	800525a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	4393      	bics	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2240      	movs	r2, #64	; 0x40
 8005256:	4393      	bics	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a1b      	ldr	r2, [pc, #108]	; (80052cc <TIM_OC2_SetConfig+0xf0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00b      	beq.n	800527a <TIM_OC2_SetConfig+0x9e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1a      	ldr	r2, [pc, #104]	; (80052d0 <TIM_OC2_SetConfig+0xf4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_OC2_SetConfig+0x9e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <TIM_OC2_SetConfig+0xf8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_OC2_SetConfig+0x9e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <TIM_OC2_SetConfig+0xfc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d113      	bne.n	80052a2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4a17      	ldr	r2, [pc, #92]	; (80052dc <TIM_OC2_SetConfig+0x100>)
 800527e:	4013      	ands	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <TIM_OC2_SetConfig+0x104>)
 8005286:	4013      	ands	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b006      	add	sp, #24
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	ffff8fff 	.word	0xffff8fff
 80052c8:	fffffcff 	.word	0xfffffcff
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400
 80052d8:	40014800 	.word	0x40014800
 80052dc:	fffffbff 	.word	0xfffffbff
 80052e0:	fffff7ff 	.word	0xfffff7ff

080052e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4a33      	ldr	r2, [pc, #204]	; (80053c8 <TIM_OC3_SetConfig+0xe4>)
 80052fa:	401a      	ands	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2270      	movs	r2, #112	; 0x70
 8005310:	4393      	bics	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2203      	movs	r2, #3
 8005318:	4393      	bics	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4a28      	ldr	r2, [pc, #160]	; (80053cc <TIM_OC3_SetConfig+0xe8>)
 800532a:	4013      	ands	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <TIM_OC3_SetConfig+0xec>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10d      	bne.n	800535e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <TIM_OC3_SetConfig+0xf0>)
 8005346:	4013      	ands	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4a1f      	ldr	r2, [pc, #124]	; (80053d8 <TIM_OC3_SetConfig+0xf4>)
 800535a:	4013      	ands	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <TIM_OC3_SetConfig+0xec>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_OC3_SetConfig+0x9a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <TIM_OC3_SetConfig+0xf8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_OC3_SetConfig+0x9a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <TIM_OC3_SetConfig+0xfc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC3_SetConfig+0x9a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <TIM_OC3_SetConfig+0x100>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d113      	bne.n	80053a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <TIM_OC3_SetConfig+0x104>)
 8005382:	4013      	ands	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4a18      	ldr	r2, [pc, #96]	; (80053ec <TIM_OC3_SetConfig+0x108>)
 800538a:	4013      	ands	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	621a      	str	r2, [r3, #32]
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b006      	add	sp, #24
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	fffffeff 	.word	0xfffffeff
 80053cc:	fffffdff 	.word	0xfffffdff
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	fffff7ff 	.word	0xfffff7ff
 80053d8:	fffffbff 	.word	0xfffffbff
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	ffffefff 	.word	0xffffefff
 80053ec:	ffffdfff 	.word	0xffffdfff

080053f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	4a26      	ldr	r2, [pc, #152]	; (80054a0 <TIM_OC4_SetConfig+0xb0>)
 8005406:	401a      	ands	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <TIM_OC4_SetConfig+0xb4>)
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <TIM_OC4_SetConfig+0xb8>)
 8005424:	4013      	ands	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <TIM_OC4_SetConfig+0xbc>)
 8005438:	4013      	ands	r3, r2
 800543a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	031b      	lsls	r3, r3, #12
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a19      	ldr	r2, [pc, #100]	; (80054b0 <TIM_OC4_SetConfig+0xc0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00b      	beq.n	8005468 <TIM_OC4_SetConfig+0x78>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <TIM_OC4_SetConfig+0xc4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_OC4_SetConfig+0x78>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <TIM_OC4_SetConfig+0xc8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC4_SetConfig+0x78>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a16      	ldr	r2, [pc, #88]	; (80054bc <TIM_OC4_SetConfig+0xcc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d109      	bne.n	800547c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <TIM_OC4_SetConfig+0xd0>)
 800546c:	4013      	ands	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	019b      	lsls	r3, r3, #6
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	46bd      	mov	sp, r7
 800549a:	b006      	add	sp, #24
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	ffffefff 	.word	0xffffefff
 80054a4:	ffff8fff 	.word	0xffff8fff
 80054a8:	fffffcff 	.word	0xfffffcff
 80054ac:	ffffdfff 	.word	0xffffdfff
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800
 80054c0:	ffffbfff 	.word	0xffffbfff

080054c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	2201      	movs	r2, #1
 80054de:	4393      	bics	r3, r2
 80054e0:	001a      	movs	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a20      	ldr	r2, [pc, #128]	; (8005570 <TIM_TI1_SetConfig+0xac>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00c      	beq.n	800550e <TIM_TI1_SetConfig+0x4a>
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	05db      	lsls	r3, r3, #23
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d007      	beq.n	800550e <TIM_TI1_SetConfig+0x4a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <TIM_TI1_SetConfig+0xb0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_TI1_SetConfig+0x4a>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <TIM_TI1_SetConfig+0xb4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d101      	bne.n	8005512 <TIM_TI1_SetConfig+0x4e>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <TIM_TI1_SetConfig+0x50>
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2203      	movs	r2, #3
 800551c:	4393      	bics	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e003      	b.n	8005532 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2201      	movs	r2, #1
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	22f0      	movs	r2, #240	; 0xf0
 8005536:	4393      	bics	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	22ff      	movs	r2, #255	; 0xff
 8005540:	4013      	ands	r3, r2
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	220a      	movs	r2, #10
 800554c:	4393      	bics	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	220a      	movs	r2, #10
 8005554:	4013      	ands	r3, r2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b006      	add	sp, #24
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40014000 	.word	0x40014000

0800557c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	2201      	movs	r2, #1
 8005594:	4393      	bics	r3, r2
 8005596:	001a      	movs	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	22f0      	movs	r2, #240	; 0xf0
 80055a6:	4393      	bics	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	220a      	movs	r2, #10
 80055b8:	4393      	bics	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	46c0      	nop			; (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b006      	add	sp, #24
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	2210      	movs	r2, #16
 80055f2:	4393      	bics	r3, r2
 80055f4:	001a      	movs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4a14      	ldr	r2, [pc, #80]	; (8005654 <TIM_TI2_SetConfig+0x7c>)
 8005604:	4013      	ands	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4a10      	ldr	r2, [pc, #64]	; (8005658 <TIM_TI2_SetConfig+0x80>)
 8005616:	4013      	ands	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	031b      	lsls	r3, r3, #12
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	22a0      	movs	r2, #160	; 0xa0
 800562c:	4393      	bics	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	22a0      	movs	r2, #160	; 0xa0
 8005636:	4013      	ands	r3, r2
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	46bd      	mov	sp, r7
 800564e:	b006      	add	sp, #24
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	fffffcff 	.word	0xfffffcff
 8005658:	ffff0fff 	.word	0xffff0fff

0800565c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	2210      	movs	r2, #16
 8005674:	4393      	bics	r3, r2
 8005676:	001a      	movs	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4a0d      	ldr	r2, [pc, #52]	; (80056bc <TIM_TI2_ConfigInputStage+0x60>)
 8005686:	4013      	ands	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	031b      	lsls	r3, r3, #12
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	22a0      	movs	r2, #160	; 0xa0
 8005698:	4393      	bics	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b006      	add	sp, #24
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	ffff0fff 	.word	0xffff0fff

080056c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	4a17      	ldr	r2, [pc, #92]	; (8005738 <TIM_TI3_SetConfig+0x78>)
 80056da:	401a      	ands	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2203      	movs	r2, #3
 80056ea:	4393      	bics	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	22f0      	movs	r2, #240	; 0xf0
 80056fa:	4393      	bics	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	22ff      	movs	r2, #255	; 0xff
 8005704:	4013      	ands	r3, r2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4a0b      	ldr	r2, [pc, #44]	; (800573c <TIM_TI3_SetConfig+0x7c>)
 8005710:	4013      	ands	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	23a0      	movs	r3, #160	; 0xa0
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	4013      	ands	r3, r2
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	621a      	str	r2, [r3, #32]
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b006      	add	sp, #24
 8005736:	bd80      	pop	{r7, pc}
 8005738:	fffffeff 	.word	0xfffffeff
 800573c:	fffff5ff 	.word	0xfffff5ff

08005740 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	4a18      	ldr	r2, [pc, #96]	; (80057bc <TIM_TI4_SetConfig+0x7c>)
 800575a:	401a      	ands	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <TIM_TI4_SetConfig+0x80>)
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <TIM_TI4_SetConfig+0x84>)
 800577c:	4013      	ands	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	031b      	lsls	r3, r3, #12
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	4a0d      	ldr	r2, [pc, #52]	; (80057c8 <TIM_TI4_SetConfig+0x88>)
 8005792:	4013      	ands	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	031a      	lsls	r2, r3, #12
 800579a:	23a0      	movs	r3, #160	; 0xa0
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	4013      	ands	r3, r2
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b006      	add	sp, #24
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	ffffefff 	.word	0xffffefff
 80057c0:	fffffcff 	.word	0xfffffcff
 80057c4:	ffff0fff 	.word	0xffff0fff
 80057c8:	ffff5fff 	.word	0xffff5fff

080057cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2270      	movs	r2, #112	; 0x70
 80057e0:	4393      	bics	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	2207      	movs	r2, #7
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	609a      	str	r2, [r3, #8]
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b004      	add	sp, #16
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4a09      	ldr	r2, [pc, #36]	; (800583c <TIM_ETR_SetConfig+0x3c>)
 8005818:	4013      	ands	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	46c0      	nop			; (mov r8, r8)
 8005836:	46bd      	mov	sp, r7
 8005838:	b006      	add	sp, #24
 800583a:	bd80      	pop	{r7, pc}
 800583c:	ffff00ff 	.word	0xffff00ff

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	221f      	movs	r2, #31
 8005850:	4013      	ands	r3, r2
 8005852:	2201      	movs	r2, #1
 8005854:	409a      	lsls	r2, r3
 8005856:	0013      	movs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	43d2      	mvns	r2, r2
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	211f      	movs	r1, #31
 8005870:	400b      	ands	r3, r1
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4099      	lsls	r1, r3
 8005876:	000b      	movs	r3, r1
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	46bd      	mov	sp, r7
 8005882:	b006      	add	sp, #24
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	223c      	movs	r2, #60	; 0x3c
 8005896:	5c9b      	ldrb	r3, [r3, r2]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800589c:	2302      	movs	r3, #2
 800589e:	e047      	b.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	223c      	movs	r2, #60	; 0x3c
 80058a4:	2101      	movs	r1, #1
 80058a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	223d      	movs	r2, #61	; 0x3d
 80058ac:	2102      	movs	r1, #2
 80058ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2270      	movs	r2, #112	; 0x70
 80058c4:	4393      	bics	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a16      	ldr	r2, [pc, #88]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00f      	beq.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d009      	beq.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a11      	ldr	r2, [pc, #68]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a10      	ldr	r2, [pc, #64]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d10c      	bne.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2280      	movs	r2, #128	; 0x80
 8005908:	4393      	bics	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	223d      	movs	r2, #61	; 0x3d
 8005922:	2101      	movs	r1, #1
 8005924:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	223c      	movs	r2, #60	; 0x3c
 800592a:	2100      	movs	r1, #0
 800592c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	b004      	add	sp, #16
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40000400 	.word	0x40000400
 8005940:	40014000 	.word	0x40014000

08005944 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	223c      	movs	r2, #60	; 0x3c
 8005956:	5c9b      	ldrb	r3, [r3, r2]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800595c:	2302      	movs	r3, #2
 800595e:	e03e      	b.n	80059de <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	223c      	movs	r2, #60	; 0x3c
 8005964:	2101      	movs	r1, #1
 8005966:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	22ff      	movs	r2, #255	; 0xff
 800596c:	4393      	bics	r3, r2
 800596e:	001a      	movs	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800597c:	401a      	ands	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a18      	ldr	r2, [pc, #96]	; (80059ec <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800598a:	401a      	ands	r2, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005998:	401a      	ands	r2, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80059a6:	401a      	ands	r2, r3
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a11      	ldr	r2, [pc, #68]	; (80059f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80059b4:	401a      	ands	r2, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a0e      	ldr	r2, [pc, #56]	; (80059fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80059c2:	401a      	ands	r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	223c      	movs	r2, #60	; 0x3c
 80059d8:	2100      	movs	r1, #0
 80059da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	0018      	movs	r0, r3
 80059e0:	46bd      	mov	sp, r7
 80059e2:	b004      	add	sp, #16
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	fffffcff 	.word	0xfffffcff
 80059ec:	fffffbff 	.word	0xfffffbff
 80059f0:	fffff7ff 	.word	0xfffff7ff
 80059f4:	ffffefff 	.word	0xffffefff
 80059f8:	ffffdfff 	.word	0xffffdfff
 80059fc:	ffffbfff 	.word	0xffffbfff

08005a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b002      	add	sp, #8
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a18:	46c0      	nop			; (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e044      	b.n	8005abc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d107      	bne.n	8005a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2278      	movs	r2, #120	; 0x78
 8005a3e:	2100      	movs	r1, #0
 8005a40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7fd f9e7 	bl	8002e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2224      	movs	r2, #36	; 0x24
 8005a4e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	438a      	bics	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 fcd8 	bl	8006420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	0018      	movs	r0, r3
 8005a74:	f000 fb94 	bl	80061a0 <UART_SetConfig>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e01c      	b.n	8005abc <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	490d      	ldr	r1, [pc, #52]	; (8005ac4 <HAL_UART_Init+0xa4>)
 8005a8e:	400a      	ands	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	212a      	movs	r1, #42	; 0x2a
 8005a9e:	438a      	bics	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2101      	movs	r1, #1
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 fd67 	bl	8006588 <UART_CheckIdleState>
 8005aba:	0003      	movs	r3, r0
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b002      	add	sp, #8
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	ffffb7ff 	.word	0xffffb7ff

08005ac8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	1dbb      	adds	r3, r7, #6
 8005ad4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d15b      	bne.n	8005b96 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_UART_Transmit_IT+0x24>
 8005ae4:	1dbb      	adds	r3, r7, #6
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e053      	b.n	8005b98 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	015b      	lsls	r3, r3, #5
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d109      	bne.n	8005b10 <HAL_UART_Transmit_IT+0x48>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2201      	movs	r2, #1
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d001      	beq.n	8005b10 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e043      	b.n	8005b98 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1dba      	adds	r2, r7, #6
 8005b1a:	2150      	movs	r1, #80	; 0x50
 8005b1c:	8812      	ldrh	r2, [r2, #0]
 8005b1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1dba      	adds	r2, r7, #6
 8005b24:	2152      	movs	r1, #82	; 0x52
 8005b26:	8812      	ldrh	r2, [r2, #0]
 8005b28:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2284      	movs	r2, #132	; 0x84
 8005b34:	2100      	movs	r1, #0
 8005b36:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2221      	movs	r2, #33	; 0x21
 8005b3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	2380      	movs	r3, #128	; 0x80
 8005b44:	015b      	lsls	r3, r3, #5
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d107      	bne.n	8005b5a <HAL_UART_Transmit_IT+0x92>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <HAL_UART_Transmit_IT+0xd8>)
 8005b56:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b58:	e002      	b.n	8005b60 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <HAL_UART_Transmit_IT+0xdc>)
 8005b5e:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b60:	f3ef 8310 	mrs	r3, PRIMASK
 8005b64:	613b      	str	r3, [r7, #16]
  return(result);
 8005b66:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f383 8810 	msr	PRIMASK, r3
}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2180      	movs	r1, #128	; 0x80
 8005b82:	430a      	orrs	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f383 8810 	msr	PRIMASK, r3
}
 8005b90:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
  }
}
 8005b98:	0018      	movs	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b008      	add	sp, #32
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	08006963 	.word	0x08006963
 8005ba4:	080068af 	.word	0x080068af

08005ba8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b0ab      	sub	sp, #172	; 0xac
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	22a4      	movs	r2, #164	; 0xa4
 8005bb8:	18b9      	adds	r1, r7, r2
 8005bba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	20a0      	movs	r0, #160	; 0xa0
 8005bc4:	1839      	adds	r1, r7, r0
 8005bc6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	219c      	movs	r1, #156	; 0x9c
 8005bd0:	1879      	adds	r1, r7, r1
 8005bd2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bd4:	0011      	movs	r1, r2
 8005bd6:	18bb      	adds	r3, r7, r2
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a99      	ldr	r2, [pc, #612]	; (8005e40 <HAL_UART_IRQHandler+0x298>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2298      	movs	r2, #152	; 0x98
 8005be0:	18bc      	adds	r4, r7, r2
 8005be2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005be4:	18bb      	adds	r3, r7, r2
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d114      	bne.n	8005c16 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bec:	187b      	adds	r3, r7, r1
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d00f      	beq.n	8005c16 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bf6:	183b      	adds	r3, r7, r0
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d00a      	beq.n	8005c16 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d100      	bne.n	8005c0a <HAL_UART_IRQHandler+0x62>
 8005c08:	e29e      	b.n	8006148 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	0010      	movs	r0, r2
 8005c12:	4798      	blx	r3
      }
      return;
 8005c14:	e298      	b.n	8006148 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c16:	2398      	movs	r3, #152	; 0x98
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d100      	bne.n	8005c22 <HAL_UART_IRQHandler+0x7a>
 8005c20:	e114      	b.n	8005e4c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c22:	239c      	movs	r3, #156	; 0x9c
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d106      	bne.n	8005c3c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c2e:	23a0      	movs	r3, #160	; 0xa0
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a83      	ldr	r2, [pc, #524]	; (8005e44 <HAL_UART_IRQHandler+0x29c>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	d100      	bne.n	8005c3c <HAL_UART_IRQHandler+0x94>
 8005c3a:	e107      	b.n	8005e4c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c3c:	23a4      	movs	r3, #164	; 0xa4
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2201      	movs	r2, #1
 8005c44:	4013      	ands	r3, r2
 8005c46:	d012      	beq.n	8005c6e <HAL_UART_IRQHandler+0xc6>
 8005c48:	23a0      	movs	r3, #160	; 0xa0
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	4013      	ands	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2284      	movs	r2, #132	; 0x84
 8005c62:	589b      	ldr	r3, [r3, r2]
 8005c64:	2201      	movs	r2, #1
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2184      	movs	r1, #132	; 0x84
 8005c6c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c6e:	23a4      	movs	r3, #164	; 0xa4
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2202      	movs	r2, #2
 8005c76:	4013      	ands	r3, r2
 8005c78:	d011      	beq.n	8005c9e <HAL_UART_IRQHandler+0xf6>
 8005c7a:	239c      	movs	r3, #156	; 0x9c
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2201      	movs	r2, #1
 8005c82:	4013      	ands	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2284      	movs	r2, #132	; 0x84
 8005c92:	589b      	ldr	r3, [r3, r2]
 8005c94:	2204      	movs	r2, #4
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2184      	movs	r1, #132	; 0x84
 8005c9c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c9e:	23a4      	movs	r3, #164	; 0xa4
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d011      	beq.n	8005cce <HAL_UART_IRQHandler+0x126>
 8005caa:	239c      	movs	r3, #156	; 0x9c
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2284      	movs	r2, #132	; 0x84
 8005cc2:	589b      	ldr	r3, [r3, r2]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2184      	movs	r1, #132	; 0x84
 8005ccc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cce:	23a4      	movs	r3, #164	; 0xa4
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d017      	beq.n	8005d0a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cda:	23a0      	movs	r3, #160	; 0xa0
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d105      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ce6:	239c      	movs	r3, #156	; 0x9c
 8005ce8:	18fb      	adds	r3, r7, r3
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cf0:	d00b      	beq.n	8005d0a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2284      	movs	r2, #132	; 0x84
 8005cfe:	589b      	ldr	r3, [r3, r2]
 8005d00:	2208      	movs	r2, #8
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2184      	movs	r1, #132	; 0x84
 8005d08:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d0a:	23a4      	movs	r3, #164	; 0xa4
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	4013      	ands	r3, r2
 8005d16:	d013      	beq.n	8005d40 <HAL_UART_IRQHandler+0x198>
 8005d18:	23a0      	movs	r3, #160	; 0xa0
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	2380      	movs	r3, #128	; 0x80
 8005d20:	04db      	lsls	r3, r3, #19
 8005d22:	4013      	ands	r3, r2
 8005d24:	d00c      	beq.n	8005d40 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2280      	movs	r2, #128	; 0x80
 8005d2c:	0112      	lsls	r2, r2, #4
 8005d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2284      	movs	r2, #132	; 0x84
 8005d34:	589b      	ldr	r3, [r3, r2]
 8005d36:	2220      	movs	r2, #32
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2184      	movs	r1, #132	; 0x84
 8005d3e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2284      	movs	r2, #132	; 0x84
 8005d44:	589b      	ldr	r3, [r3, r2]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d100      	bne.n	8005d4c <HAL_UART_IRQHandler+0x1a4>
 8005d4a:	e1ff      	b.n	800614c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d4c:	23a4      	movs	r3, #164	; 0xa4
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2220      	movs	r2, #32
 8005d54:	4013      	ands	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d58:	23a0      	movs	r3, #160	; 0xa0
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	4013      	ands	r3, r2
 8005d62:	d008      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	0010      	movs	r0, r2
 8005d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2284      	movs	r2, #132	; 0x84
 8005d7a:	589b      	ldr	r3, [r3, r2]
 8005d7c:	2194      	movs	r1, #148	; 0x94
 8005d7e:	187a      	adds	r2, r7, r1
 8005d80:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2240      	movs	r2, #64	; 0x40
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b40      	cmp	r3, #64	; 0x40
 8005d8e:	d004      	beq.n	8005d9a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d90:	187b      	adds	r3, r7, r1
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2228      	movs	r2, #40	; 0x28
 8005d96:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d98:	d047      	beq.n	8005e2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 fd0b 	bl	80067b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2240      	movs	r2, #64	; 0x40
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d137      	bne.n	8005e20 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db0:	f3ef 8310 	mrs	r3, PRIMASK
 8005db4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005db8:	2090      	movs	r0, #144	; 0x90
 8005dba:	183a      	adds	r2, r7, r0
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc4:	f383 8810 	msr	PRIMASK, r3
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2140      	movs	r1, #64	; 0x40
 8005dd6:	438a      	bics	r2, r1
 8005dd8:	609a      	str	r2, [r3, #8]
 8005dda:	183b      	adds	r3, r7, r0
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d012      	beq.n	8005e16 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df4:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <HAL_UART_IRQHandler+0x2a0>)
 8005df6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f7fd fa89 	bl	8003314 <HAL_DMA_Abort_IT>
 8005e02:	1e03      	subs	r3, r0, #0
 8005e04:	d01a      	beq.n	8005e3c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e10:	0018      	movs	r0, r3
 8005e12:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e14:	e012      	b.n	8005e3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f000 f9ad 	bl	8006178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1e:	e00d      	b.n	8005e3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 f9a8 	bl	8006178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e28:	e008      	b.n	8005e3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f000 f9a3 	bl	8006178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2284      	movs	r2, #132	; 0x84
 8005e36:	2100      	movs	r1, #0
 8005e38:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005e3a:	e187      	b.n	800614c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3c:	46c0      	nop			; (mov r8, r8)
    return;
 8005e3e:	e185      	b.n	800614c <HAL_UART_IRQHandler+0x5a4>
 8005e40:	0000080f 	.word	0x0000080f
 8005e44:	04000120 	.word	0x04000120
 8005e48:	08006881 	.word	0x08006881

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d000      	beq.n	8005e56 <HAL_UART_IRQHandler+0x2ae>
 8005e54:	e139      	b.n	80060ca <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e56:	23a4      	movs	r3, #164	; 0xa4
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	4013      	ands	r3, r2
 8005e60:	d100      	bne.n	8005e64 <HAL_UART_IRQHandler+0x2bc>
 8005e62:	e132      	b.n	80060ca <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e64:	23a0      	movs	r3, #160	; 0xa0
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d100      	bne.n	8005e72 <HAL_UART_IRQHandler+0x2ca>
 8005e70:	e12b      	b.n	80060ca <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2210      	movs	r2, #16
 8005e78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	d000      	beq.n	8005e8a <HAL_UART_IRQHandler+0x2e2>
 8005e88:	e09f      	b.n	8005fca <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	217e      	movs	r1, #126	; 0x7e
 8005e94:	187b      	adds	r3, r7, r1
 8005e96:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005e98:	187b      	adds	r3, r7, r1
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d100      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x2fa>
 8005ea0:	e156      	b.n	8006150 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2258      	movs	r2, #88	; 0x58
 8005ea6:	5a9b      	ldrh	r3, [r3, r2]
 8005ea8:	187a      	adds	r2, r7, r1
 8005eaa:	8812      	ldrh	r2, [r2, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d300      	bcc.n	8005eb2 <HAL_UART_IRQHandler+0x30a>
 8005eb0:	e14e      	b.n	8006150 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	187a      	adds	r2, r7, r1
 8005eb6:	215a      	movs	r1, #90	; 0x5a
 8005eb8:	8812      	ldrh	r2, [r2, #0]
 8005eba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d06f      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ece:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed6:	f383 8810 	msr	PRIMASK, r3
}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	499e      	ldr	r1, [pc, #632]	; (8006160 <HAL_UART_IRQHandler+0x5b8>)
 8005ee8:	400a      	ands	r2, r1
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	f383 8810 	msr	PRIMASK, r3
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	677b      	str	r3, [r7, #116]	; 0x74
 8005f02:	2301      	movs	r3, #1
 8005f04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f08:	f383 8810 	msr	PRIMASK, r3
}
 8005f0c:	46c0      	nop			; (mov r8, r8)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2101      	movs	r1, #1
 8005f1a:	438a      	bics	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]
 8005f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f20:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f24:	f383 8810 	msr	PRIMASK, r3
}
 8005f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f32:	673b      	str	r3, [r7, #112]	; 0x70
 8005f34:	2301      	movs	r3, #1
 8005f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	f383 8810 	msr	PRIMASK, r3
}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2140      	movs	r1, #64	; 0x40
 8005f4c:	438a      	bics	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f52:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f56:	f383 8810 	msr	PRIMASK, r3
}
 8005f5a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	2120      	movs	r1, #32
 8005f62:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f74:	2301      	movs	r3, #1
 8005f76:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f7a:	f383 8810 	msr	PRIMASK, r3
}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2110      	movs	r1, #16
 8005f8c:	438a      	bics	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f92:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f96:	f383 8810 	msr	PRIMASK, r3
}
 8005f9a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7fd f97f 	bl	80032a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2258      	movs	r2, #88	; 0x58
 8005fb0:	5a9a      	ldrh	r2, [r3, r2]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	215a      	movs	r1, #90	; 0x5a
 8005fb6:	5a5b      	ldrh	r3, [r3, r1]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0011      	movs	r1, r2
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f000 f8e0 	bl	8006188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fc8:	e0c2      	b.n	8006150 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2258      	movs	r2, #88	; 0x58
 8005fce:	5a99      	ldrh	r1, [r3, r2]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	225a      	movs	r2, #90	; 0x5a
 8005fd4:	5a9b      	ldrh	r3, [r3, r2]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	208e      	movs	r0, #142	; 0x8e
 8005fda:	183b      	adds	r3, r7, r0
 8005fdc:	1a8a      	subs	r2, r1, r2
 8005fde:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	225a      	movs	r2, #90	; 0x5a
 8005fe4:	5a9b      	ldrh	r3, [r3, r2]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d100      	bne.n	8005fee <HAL_UART_IRQHandler+0x446>
 8005fec:	e0b2      	b.n	8006154 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005fee:	183b      	adds	r3, r7, r0
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d100      	bne.n	8005ff8 <HAL_UART_IRQHandler+0x450>
 8005ff6:	e0ad      	b.n	8006154 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006000:	2488      	movs	r4, #136	; 0x88
 8006002:	193a      	adds	r2, r7, r4
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	2301      	movs	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f383 8810 	msr	PRIMASK, r3
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4951      	ldr	r1, [pc, #324]	; (8006164 <HAL_UART_IRQHandler+0x5bc>)
 800601e:	400a      	ands	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	193b      	adds	r3, r7, r4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f383 8810 	msr	PRIMASK, r3
}
 800602e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006030:	f3ef 8310 	mrs	r3, PRIMASK
 8006034:	61bb      	str	r3, [r7, #24]
  return(result);
 8006036:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	2484      	movs	r4, #132	; 0x84
 800603a:	193a      	adds	r2, r7, r4
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	2301      	movs	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	f383 8810 	msr	PRIMASK, r3
}
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2101      	movs	r1, #1
 8006056:	438a      	bics	r2, r1
 8006058:	609a      	str	r2, [r3, #8]
 800605a:	193b      	adds	r3, r7, r4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	f383 8810 	msr	PRIMASK, r3
}
 8006066:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2280      	movs	r2, #128	; 0x80
 800606c:	2120      	movs	r1, #32
 800606e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607c:	f3ef 8310 	mrs	r3, PRIMASK
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006084:	2480      	movs	r4, #128	; 0x80
 8006086:	193a      	adds	r2, r7, r4
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	2301      	movs	r3, #1
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	f383 8810 	msr	PRIMASK, r3
}
 8006094:	46c0      	nop			; (mov r8, r8)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2110      	movs	r1, #16
 80060a2:	438a      	bics	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	193b      	adds	r3, r7, r4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	f383 8810 	msr	PRIMASK, r3
}
 80060b2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060ba:	183b      	adds	r3, r7, r0
 80060bc:	881a      	ldrh	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	0011      	movs	r1, r2
 80060c2:	0018      	movs	r0, r3
 80060c4:	f000 f860 	bl	8006188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060c8:	e044      	b.n	8006154 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060ca:	23a4      	movs	r3, #164	; 0xa4
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	035b      	lsls	r3, r3, #13
 80060d4:	4013      	ands	r3, r2
 80060d6:	d010      	beq.n	80060fa <HAL_UART_IRQHandler+0x552>
 80060d8:	239c      	movs	r3, #156	; 0x9c
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	03db      	lsls	r3, r3, #15
 80060e2:	4013      	ands	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2280      	movs	r2, #128	; 0x80
 80060ec:	0352      	lsls	r2, r2, #13
 80060ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 fcbe 	bl	8006a74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060f8:	e02f      	b.n	800615a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060fa:	23a4      	movs	r3, #164	; 0xa4
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2280      	movs	r2, #128	; 0x80
 8006102:	4013      	ands	r3, r2
 8006104:	d00f      	beq.n	8006126 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006106:	23a0      	movs	r3, #160	; 0xa0
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2280      	movs	r2, #128	; 0x80
 800610e:	4013      	ands	r3, r2
 8006110:	d009      	beq.n	8006126 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01e      	beq.n	8006158 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	0010      	movs	r0, r2
 8006122:	4798      	blx	r3
    }
    return;
 8006124:	e018      	b.n	8006158 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006126:	23a4      	movs	r3, #164	; 0xa4
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2240      	movs	r2, #64	; 0x40
 800612e:	4013      	ands	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_UART_IRQHandler+0x5b2>
 8006132:	23a0      	movs	r3, #160	; 0xa0
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2240      	movs	r2, #64	; 0x40
 800613a:	4013      	ands	r3, r2
 800613c:	d00d      	beq.n	800615a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	0018      	movs	r0, r3
 8006142:	f000 fc6c 	bl	8006a1e <UART_EndTransmit_IT>
    return;
 8006146:	e008      	b.n	800615a <HAL_UART_IRQHandler+0x5b2>
      return;
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	e006      	b.n	800615a <HAL_UART_IRQHandler+0x5b2>
    return;
 800614c:	46c0      	nop			; (mov r8, r8)
 800614e:	e004      	b.n	800615a <HAL_UART_IRQHandler+0x5b2>
      return;
 8006150:	46c0      	nop			; (mov r8, r8)
 8006152:	e002      	b.n	800615a <HAL_UART_IRQHandler+0x5b2>
      return;
 8006154:	46c0      	nop			; (mov r8, r8)
 8006156:	e000      	b.n	800615a <HAL_UART_IRQHandler+0x5b2>
    return;
 8006158:	46c0      	nop			; (mov r8, r8)
  }

}
 800615a:	46bd      	mov	sp, r7
 800615c:	b02b      	add	sp, #172	; 0xac
 800615e:	bd90      	pop	{r4, r7, pc}
 8006160:	fffffeff 	.word	0xfffffeff
 8006164:	fffffedf 	.word	0xfffffedf

08006168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006170:	46c0      	nop			; (mov r8, r8)
 8006172:	46bd      	mov	sp, r7
 8006174:	b002      	add	sp, #8
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	b002      	add	sp, #8
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	000a      	movs	r2, r1
 8006192:	1cbb      	adds	r3, r7, #2
 8006194:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	46bd      	mov	sp, r7
 800619a:	b002      	add	sp, #8
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061a8:	231e      	movs	r3, #30
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a8d      	ldr	r2, [pc, #564]	; (8006404 <UART_SetConfig+0x264>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	0019      	movs	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a88      	ldr	r2, [pc, #544]	; (8006408 <UART_SetConfig+0x268>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	0019      	movs	r1, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4a7f      	ldr	r2, [pc, #508]	; (800640c <UART_SetConfig+0x26c>)
 800620e:	4013      	ands	r3, r2
 8006210:	0019      	movs	r1, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	430a      	orrs	r2, r1
 800621a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a7b      	ldr	r2, [pc, #492]	; (8006410 <UART_SetConfig+0x270>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d127      	bne.n	8006276 <UART_SetConfig+0xd6>
 8006226:	4b7b      	ldr	r3, [pc, #492]	; (8006414 <UART_SetConfig+0x274>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	2203      	movs	r2, #3
 800622c:	4013      	ands	r3, r2
 800622e:	2b03      	cmp	r3, #3
 8006230:	d00d      	beq.n	800624e <UART_SetConfig+0xae>
 8006232:	d81b      	bhi.n	800626c <UART_SetConfig+0xcc>
 8006234:	2b02      	cmp	r3, #2
 8006236:	d014      	beq.n	8006262 <UART_SetConfig+0xc2>
 8006238:	d818      	bhi.n	800626c <UART_SetConfig+0xcc>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <UART_SetConfig+0xa4>
 800623e:	2b01      	cmp	r3, #1
 8006240:	d00a      	beq.n	8006258 <UART_SetConfig+0xb8>
 8006242:	e013      	b.n	800626c <UART_SetConfig+0xcc>
 8006244:	231f      	movs	r3, #31
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	2200      	movs	r2, #0
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	e021      	b.n	8006292 <UART_SetConfig+0xf2>
 800624e:	231f      	movs	r3, #31
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	2202      	movs	r2, #2
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e01c      	b.n	8006292 <UART_SetConfig+0xf2>
 8006258:	231f      	movs	r3, #31
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	2204      	movs	r2, #4
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	e017      	b.n	8006292 <UART_SetConfig+0xf2>
 8006262:	231f      	movs	r3, #31
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	2208      	movs	r2, #8
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e012      	b.n	8006292 <UART_SetConfig+0xf2>
 800626c:	231f      	movs	r3, #31
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	2210      	movs	r2, #16
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e00d      	b.n	8006292 <UART_SetConfig+0xf2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a67      	ldr	r2, [pc, #412]	; (8006418 <UART_SetConfig+0x278>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d104      	bne.n	800628a <UART_SetConfig+0xea>
 8006280:	231f      	movs	r3, #31
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	e003      	b.n	8006292 <UART_SetConfig+0xf2>
 800628a:	231f      	movs	r3, #31
 800628c:	18fb      	adds	r3, r7, r3
 800628e:	2210      	movs	r2, #16
 8006290:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	2380      	movs	r3, #128	; 0x80
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	429a      	cmp	r2, r3
 800629c:	d15c      	bne.n	8006358 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800629e:	231f      	movs	r3, #31
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d015      	beq.n	80062d4 <UART_SetConfig+0x134>
 80062a8:	dc18      	bgt.n	80062dc <UART_SetConfig+0x13c>
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d00d      	beq.n	80062ca <UART_SetConfig+0x12a>
 80062ae:	dc15      	bgt.n	80062dc <UART_SetConfig+0x13c>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <UART_SetConfig+0x11a>
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d005      	beq.n	80062c4 <UART_SetConfig+0x124>
 80062b8:	e010      	b.n	80062dc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ba:	f7fd fe7f 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 80062be:	0003      	movs	r3, r0
 80062c0:	61bb      	str	r3, [r7, #24]
        break;
 80062c2:	e012      	b.n	80062ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c4:	4b55      	ldr	r3, [pc, #340]	; (800641c <UART_SetConfig+0x27c>)
 80062c6:	61bb      	str	r3, [r7, #24]
        break;
 80062c8:	e00f      	b.n	80062ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ca:	f7fd fe17 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 80062ce:	0003      	movs	r3, r0
 80062d0:	61bb      	str	r3, [r7, #24]
        break;
 80062d2:	e00a      	b.n	80062ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	61bb      	str	r3, [r7, #24]
        break;
 80062da:	e006      	b.n	80062ea <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062e0:	231e      	movs	r3, #30
 80062e2:	18fb      	adds	r3, r7, r3
 80062e4:	2201      	movs	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
        break;
 80062e8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d100      	bne.n	80062f2 <UART_SetConfig+0x152>
 80062f0:	e07a      	b.n	80063e8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	005a      	lsls	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	18d2      	adds	r2, r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	0019      	movs	r1, r3
 8006304:	0010      	movs	r0, r2
 8006306:	f7f9 ff11 	bl	800012c <__udivsi3>
 800630a:	0003      	movs	r3, r0
 800630c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b0f      	cmp	r3, #15
 8006312:	d91c      	bls.n	800634e <UART_SetConfig+0x1ae>
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	025b      	lsls	r3, r3, #9
 800631a:	429a      	cmp	r2, r3
 800631c:	d217      	bcs.n	800634e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	b29a      	uxth	r2, r3
 8006322:	200e      	movs	r0, #14
 8006324:	183b      	adds	r3, r7, r0
 8006326:	210f      	movs	r1, #15
 8006328:	438a      	bics	r2, r1
 800632a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	b29b      	uxth	r3, r3
 8006332:	2207      	movs	r2, #7
 8006334:	4013      	ands	r3, r2
 8006336:	b299      	uxth	r1, r3
 8006338:	183b      	adds	r3, r7, r0
 800633a:	183a      	adds	r2, r7, r0
 800633c:	8812      	ldrh	r2, [r2, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	183a      	adds	r2, r7, r0
 8006348:	8812      	ldrh	r2, [r2, #0]
 800634a:	60da      	str	r2, [r3, #12]
 800634c:	e04c      	b.n	80063e8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800634e:	231e      	movs	r3, #30
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e047      	b.n	80063e8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006358:	231f      	movs	r3, #31
 800635a:	18fb      	adds	r3, r7, r3
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b08      	cmp	r3, #8
 8006360:	d015      	beq.n	800638e <UART_SetConfig+0x1ee>
 8006362:	dc18      	bgt.n	8006396 <UART_SetConfig+0x1f6>
 8006364:	2b04      	cmp	r3, #4
 8006366:	d00d      	beq.n	8006384 <UART_SetConfig+0x1e4>
 8006368:	dc15      	bgt.n	8006396 <UART_SetConfig+0x1f6>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <UART_SetConfig+0x1d4>
 800636e:	2b02      	cmp	r3, #2
 8006370:	d005      	beq.n	800637e <UART_SetConfig+0x1de>
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006374:	f7fd fe22 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 8006378:	0003      	movs	r3, r0
 800637a:	61bb      	str	r3, [r7, #24]
        break;
 800637c:	e012      	b.n	80063a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800637e:	4b27      	ldr	r3, [pc, #156]	; (800641c <UART_SetConfig+0x27c>)
 8006380:	61bb      	str	r3, [r7, #24]
        break;
 8006382:	e00f      	b.n	80063a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006384:	f7fd fdba 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8006388:	0003      	movs	r3, r0
 800638a:	61bb      	str	r3, [r7, #24]
        break;
 800638c:	e00a      	b.n	80063a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	61bb      	str	r3, [r7, #24]
        break;
 8006394:	e006      	b.n	80063a4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800639a:	231e      	movs	r3, #30
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	2201      	movs	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
        break;
 80063a2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01e      	beq.n	80063e8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	085a      	lsrs	r2, r3, #1
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	18d2      	adds	r2, r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	0019      	movs	r1, r3
 80063ba:	0010      	movs	r0, r2
 80063bc:	f7f9 feb6 	bl	800012c <__udivsi3>
 80063c0:	0003      	movs	r3, r0
 80063c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d90a      	bls.n	80063e0 <UART_SetConfig+0x240>
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	025b      	lsls	r3, r3, #9
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d205      	bcs.n	80063e0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	e003      	b.n	80063e8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80063e0:	231e      	movs	r3, #30
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063f4:	231e      	movs	r3, #30
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	781b      	ldrb	r3, [r3, #0]
}
 80063fa:	0018      	movs	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b008      	add	sp, #32
 8006400:	bd80      	pop	{r7, pc}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	ffff69f3 	.word	0xffff69f3
 8006408:	ffffcfff 	.word	0xffffcfff
 800640c:	fffff4ff 	.word	0xfffff4ff
 8006410:	40013800 	.word	0x40013800
 8006414:	40021000 	.word	0x40021000
 8006418:	40004400 	.word	0x40004400
 800641c:	007a1200 	.word	0x007a1200

08006420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2208      	movs	r2, #8
 800642e:	4013      	ands	r3, r2
 8006430:	d00b      	beq.n	800644a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4a4a      	ldr	r2, [pc, #296]	; (8006564 <UART_AdvFeatureConfig+0x144>)
 800643a:	4013      	ands	r3, r2
 800643c:	0019      	movs	r1, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2201      	movs	r2, #1
 8006450:	4013      	ands	r3, r2
 8006452:	d00b      	beq.n	800646c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	4a43      	ldr	r2, [pc, #268]	; (8006568 <UART_AdvFeatureConfig+0x148>)
 800645c:	4013      	ands	r3, r2
 800645e:	0019      	movs	r1, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	2202      	movs	r2, #2
 8006472:	4013      	ands	r3, r2
 8006474:	d00b      	beq.n	800648e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4a3b      	ldr	r2, [pc, #236]	; (800656c <UART_AdvFeatureConfig+0x14c>)
 800647e:	4013      	ands	r3, r2
 8006480:	0019      	movs	r1, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2204      	movs	r2, #4
 8006494:	4013      	ands	r3, r2
 8006496:	d00b      	beq.n	80064b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4a34      	ldr	r2, [pc, #208]	; (8006570 <UART_AdvFeatureConfig+0x150>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	0019      	movs	r1, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	2210      	movs	r2, #16
 80064b6:	4013      	ands	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a2c      	ldr	r2, [pc, #176]	; (8006574 <UART_AdvFeatureConfig+0x154>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	0019      	movs	r1, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	2220      	movs	r2, #32
 80064d8:	4013      	ands	r3, r2
 80064da:	d00b      	beq.n	80064f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	4a25      	ldr	r2, [pc, #148]	; (8006578 <UART_AdvFeatureConfig+0x158>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	0019      	movs	r1, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	2240      	movs	r2, #64	; 0x40
 80064fa:	4013      	ands	r3, r2
 80064fc:	d01d      	beq.n	800653a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	4a1d      	ldr	r2, [pc, #116]	; (800657c <UART_AdvFeatureConfig+0x15c>)
 8006506:	4013      	ands	r3, r2
 8006508:	0019      	movs	r1, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	035b      	lsls	r3, r3, #13
 800651e:	429a      	cmp	r2, r3
 8006520:	d10b      	bne.n	800653a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	4a15      	ldr	r2, [pc, #84]	; (8006580 <UART_AdvFeatureConfig+0x160>)
 800652a:	4013      	ands	r3, r2
 800652c:	0019      	movs	r1, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	2280      	movs	r2, #128	; 0x80
 8006540:	4013      	ands	r3, r2
 8006542:	d00b      	beq.n	800655c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4a0e      	ldr	r2, [pc, #56]	; (8006584 <UART_AdvFeatureConfig+0x164>)
 800654c:	4013      	ands	r3, r2
 800654e:	0019      	movs	r1, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	605a      	str	r2, [r3, #4]
  }
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b002      	add	sp, #8
 8006562:	bd80      	pop	{r7, pc}
 8006564:	ffff7fff 	.word	0xffff7fff
 8006568:	fffdffff 	.word	0xfffdffff
 800656c:	fffeffff 	.word	0xfffeffff
 8006570:	fffbffff 	.word	0xfffbffff
 8006574:	ffffefff 	.word	0xffffefff
 8006578:	ffffdfff 	.word	0xffffdfff
 800657c:	ffefffff 	.word	0xffefffff
 8006580:	ff9fffff 	.word	0xff9fffff
 8006584:	fff7ffff 	.word	0xfff7ffff

08006588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b092      	sub	sp, #72	; 0x48
 800658c:	af02      	add	r7, sp, #8
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2284      	movs	r2, #132	; 0x84
 8006594:	2100      	movs	r1, #0
 8006596:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006598:	f7fc fd9c 	bl	80030d4 <HAL_GetTick>
 800659c:	0003      	movs	r3, r0
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2208      	movs	r2, #8
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d12c      	bne.n	8006608 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b0:	2280      	movs	r2, #128	; 0x80
 80065b2:	0391      	lsls	r1, r2, #14
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4a46      	ldr	r2, [pc, #280]	; (80066d0 <UART_CheckIdleState+0x148>)
 80065b8:	9200      	str	r2, [sp, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f000 f88c 	bl	80066d8 <UART_WaitOnFlagUntilTimeout>
 80065c0:	1e03      	subs	r3, r0, #0
 80065c2:	d021      	beq.n	8006608 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c4:	f3ef 8310 	mrs	r3, PRIMASK
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ce:	2301      	movs	r3, #1
 80065d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	f383 8810 	msr	PRIMASK, r3
}
 80065d8:	46c0      	nop			; (mov r8, r8)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	438a      	bics	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	f383 8810 	msr	PRIMASK, r3
}
 80065f4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2278      	movs	r2, #120	; 0x78
 8006600:	2100      	movs	r1, #0
 8006602:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e05f      	b.n	80066c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2204      	movs	r2, #4
 8006610:	4013      	ands	r3, r2
 8006612:	2b04      	cmp	r3, #4
 8006614:	d146      	bne.n	80066a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006618:	2280      	movs	r2, #128	; 0x80
 800661a:	03d1      	lsls	r1, r2, #15
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4a2c      	ldr	r2, [pc, #176]	; (80066d0 <UART_CheckIdleState+0x148>)
 8006620:	9200      	str	r2, [sp, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	f000 f858 	bl	80066d8 <UART_WaitOnFlagUntilTimeout>
 8006628:	1e03      	subs	r3, r0, #0
 800662a:	d03b      	beq.n	80066a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662c:	f3ef 8310 	mrs	r3, PRIMASK
 8006630:	60fb      	str	r3, [r7, #12]
  return(result);
 8006632:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	2301      	movs	r3, #1
 8006638:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f383 8810 	msr	PRIMASK, r3
}
 8006640:	46c0      	nop			; (mov r8, r8)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4921      	ldr	r1, [pc, #132]	; (80066d4 <UART_CheckIdleState+0x14c>)
 800664e:	400a      	ands	r2, r1
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f383 8810 	msr	PRIMASK, r3
}
 800665c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665e:	f3ef 8310 	mrs	r3, PRIMASK
 8006662:	61bb      	str	r3, [r7, #24]
  return(result);
 8006664:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	633b      	str	r3, [r7, #48]	; 0x30
 8006668:	2301      	movs	r3, #1
 800666a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f383 8810 	msr	PRIMASK, r3
}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2101      	movs	r1, #1
 8006680:	438a      	bics	r2, r1
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	f383 8810 	msr	PRIMASK, r3
}
 800668e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2280      	movs	r2, #128	; 0x80
 8006694:	2120      	movs	r1, #32
 8006696:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2278      	movs	r2, #120	; 0x78
 800669c:	2100      	movs	r1, #0
 800669e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e011      	b.n	80066c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2280      	movs	r2, #128	; 0x80
 80066ae:	2120      	movs	r1, #32
 80066b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2278      	movs	r2, #120	; 0x78
 80066c2:	2100      	movs	r1, #0
 80066c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	0018      	movs	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	b010      	add	sp, #64	; 0x40
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	01ffffff 	.word	0x01ffffff
 80066d4:	fffffedf 	.word	0xfffffedf

080066d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	1dfb      	adds	r3, r7, #7
 80066e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e8:	e051      	b.n	800678e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	3301      	adds	r3, #1
 80066ee:	d04e      	beq.n	800678e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f0:	f7fc fcf0 	bl	80030d4 <HAL_GetTick>
 80066f4:	0002      	movs	r2, r0
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d302      	bcc.n	8006706 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e051      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2204      	movs	r2, #4
 8006712:	4013      	ands	r3, r2
 8006714:	d03b      	beq.n	800678e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b80      	cmp	r3, #128	; 0x80
 800671a:	d038      	beq.n	800678e <UART_WaitOnFlagUntilTimeout+0xb6>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d035      	beq.n	800678e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	2208      	movs	r2, #8
 800672a:	4013      	ands	r3, r2
 800672c:	2b08      	cmp	r3, #8
 800672e:	d111      	bne.n	8006754 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2208      	movs	r2, #8
 8006736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	0018      	movs	r0, r3
 800673c:	f000 f83c 	bl	80067b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2284      	movs	r2, #132	; 0x84
 8006744:	2108      	movs	r1, #8
 8006746:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2278      	movs	r2, #120	; 0x78
 800674c:	2100      	movs	r1, #0
 800674e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e02c      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	69da      	ldr	r2, [r3, #28]
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	401a      	ands	r2, r3
 8006760:	2380      	movs	r3, #128	; 0x80
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	429a      	cmp	r2, r3
 8006766:	d112      	bne.n	800678e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2280      	movs	r2, #128	; 0x80
 800676e:	0112      	lsls	r2, r2, #4
 8006770:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	0018      	movs	r0, r3
 8006776:	f000 f81f 	bl	80067b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2284      	movs	r2, #132	; 0x84
 800677e:	2120      	movs	r1, #32
 8006780:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2278      	movs	r2, #120	; 0x78
 8006786:	2100      	movs	r1, #0
 8006788:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e00f      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	4013      	ands	r3, r2
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	425a      	negs	r2, r3
 800679e:	4153      	adcs	r3, r2
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	001a      	movs	r2, r3
 80067a4:	1dfb      	adds	r3, r7, #7
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d09e      	beq.n	80066ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	0018      	movs	r0, r3
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b004      	add	sp, #16
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08e      	sub	sp, #56	; 0x38
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c0:	f3ef 8310 	mrs	r3, PRIMASK
 80067c4:	617b      	str	r3, [r7, #20]
  return(result);
 80067c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ca:	2301      	movs	r3, #1
 80067cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f383 8810 	msr	PRIMASK, r3
}
 80067d4:	46c0      	nop			; (mov r8, r8)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4926      	ldr	r1, [pc, #152]	; (800687c <UART_EndRxTransfer+0xc4>)
 80067e2:	400a      	ands	r2, r1
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f383 8810 	msr	PRIMASK, r3
}
 80067f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f2:	f3ef 8310 	mrs	r3, PRIMASK
 80067f6:	623b      	str	r3, [r7, #32]
  return(result);
 80067f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	633b      	str	r3, [r7, #48]	; 0x30
 80067fc:	2301      	movs	r3, #1
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	f383 8810 	msr	PRIMASK, r3
}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2101      	movs	r1, #1
 8006814:	438a      	bics	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	f383 8810 	msr	PRIMASK, r3
}
 8006822:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006828:	2b01      	cmp	r3, #1
 800682a:	d118      	bne.n	800685e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800682c:	f3ef 8310 	mrs	r3, PRIMASK
 8006830:	60bb      	str	r3, [r7, #8]
  return(result);
 8006832:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006836:	2301      	movs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f383 8810 	msr	PRIMASK, r3
}
 8006840:	46c0      	nop			; (mov r8, r8)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2110      	movs	r1, #16
 800684e:	438a      	bics	r2, r1
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f383 8810 	msr	PRIMASK, r3
}
 800685c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2280      	movs	r2, #128	; 0x80
 8006862:	2120      	movs	r1, #32
 8006864:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	46bd      	mov	sp, r7
 8006876:	b00e      	add	sp, #56	; 0x38
 8006878:	bd80      	pop	{r7, pc}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	fffffedf 	.word	0xfffffedf

08006880 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	225a      	movs	r2, #90	; 0x5a
 8006892:	2100      	movs	r1, #0
 8006894:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2252      	movs	r2, #82	; 0x52
 800689a:	2100      	movs	r1, #0
 800689c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	0018      	movs	r0, r3
 80068a2:	f7ff fc69 	bl	8006178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b004      	add	sp, #16
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b08a      	sub	sp, #40	; 0x28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ba:	2b21      	cmp	r3, #33	; 0x21
 80068bc:	d14d      	bne.n	800695a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2252      	movs	r2, #82	; 0x52
 80068c2:	5a9b      	ldrh	r3, [r3, r2]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d132      	bne.n	8006930 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ca:	f3ef 8310 	mrs	r3, PRIMASK
 80068ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80068d0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
 80068d4:	2301      	movs	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f383 8810 	msr	PRIMASK, r3
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2180      	movs	r1, #128	; 0x80
 80068ec:	438a      	bics	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f383 8810 	msr	PRIMASK, r3
}
 80068fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006900:	617b      	str	r3, [r7, #20]
  return(result);
 8006902:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006904:	623b      	str	r3, [r7, #32]
 8006906:	2301      	movs	r3, #1
 8006908:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	f383 8810 	msr	PRIMASK, r3
}
 8006910:	46c0      	nop			; (mov r8, r8)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2140      	movs	r1, #64	; 0x40
 800691e:	430a      	orrs	r2, r1
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f383 8810 	msr	PRIMASK, r3
}
 800692c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800692e:	e014      	b.n	800695a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006934:	781a      	ldrb	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	b292      	uxth	r2, r2
 800693c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2252      	movs	r2, #82	; 0x52
 800694c:	5a9b      	ldrh	r3, [r3, r2]
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b299      	uxth	r1, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2252      	movs	r2, #82	; 0x52
 8006958:	5299      	strh	r1, [r3, r2]
}
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	46bd      	mov	sp, r7
 800695e:	b00a      	add	sp, #40	; 0x28
 8006960:	bd80      	pop	{r7, pc}

08006962 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b08c      	sub	sp, #48	; 0x30
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696e:	2b21      	cmp	r3, #33	; 0x21
 8006970:	d151      	bne.n	8006a16 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2252      	movs	r2, #82	; 0x52
 8006976:	5a9b      	ldrh	r3, [r3, r2]
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d132      	bne.n	80069e4 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800697e:	f3ef 8310 	mrs	r3, PRIMASK
 8006982:	60fb      	str	r3, [r7, #12]
  return(result);
 8006984:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
 8006988:	2301      	movs	r3, #1
 800698a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f383 8810 	msr	PRIMASK, r3
}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2180      	movs	r1, #128	; 0x80
 80069a0:	438a      	bics	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b0:	f3ef 8310 	mrs	r3, PRIMASK
 80069b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80069b6:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ba:	2301      	movs	r3, #1
 80069bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f383 8810 	msr	PRIMASK, r3
}
 80069c4:	46c0      	nop			; (mov r8, r8)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2140      	movs	r1, #64	; 0x40
 80069d2:	430a      	orrs	r2, r1
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	f383 8810 	msr	PRIMASK, r3
}
 80069e0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80069e2:	e018      	b.n	8006a16 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	881a      	ldrh	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	05d2      	lsls	r2, r2, #23
 80069f4:	0dd2      	lsrs	r2, r2, #23
 80069f6:	b292      	uxth	r2, r2
 80069f8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fe:	1c9a      	adds	r2, r3, #2
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2252      	movs	r2, #82	; 0x52
 8006a08:	5a9b      	ldrh	r3, [r3, r2]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b299      	uxth	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2252      	movs	r2, #82	; 0x52
 8006a14:	5299      	strh	r1, [r3, r2]
}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	b00c      	add	sp, #48	; 0x30
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b086      	sub	sp, #24
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a26:	f3ef 8310 	mrs	r3, PRIMASK
 8006a2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	2301      	movs	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f383 8810 	msr	PRIMASK, r3
}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2140      	movs	r1, #64	; 0x40
 8006a48:	438a      	bics	r2, r1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f383 8810 	msr	PRIMASK, r3
}
 8006a56:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	0018      	movs	r0, r3
 8006a68:	f7ff fb7e 	bl	8006168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b006      	add	sp, #24
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a7c:	46c0      	nop			; (mov r8, r8)
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b002      	add	sp, #8
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <__errno>:
 8006a84:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <__errno+0x8>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	4770      	bx	lr
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	20000014 	.word	0x20000014

08006a90 <__libc_init_array>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	2600      	movs	r6, #0
 8006a94:	4d0c      	ldr	r5, [pc, #48]	; (8006ac8 <__libc_init_array+0x38>)
 8006a96:	4c0d      	ldr	r4, [pc, #52]	; (8006acc <__libc_init_array+0x3c>)
 8006a98:	1b64      	subs	r4, r4, r5
 8006a9a:	10a4      	asrs	r4, r4, #2
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	d109      	bne.n	8006ab4 <__libc_init_array+0x24>
 8006aa0:	2600      	movs	r6, #0
 8006aa2:	f000 fc47 	bl	8007334 <_init>
 8006aa6:	4d0a      	ldr	r5, [pc, #40]	; (8006ad0 <__libc_init_array+0x40>)
 8006aa8:	4c0a      	ldr	r4, [pc, #40]	; (8006ad4 <__libc_init_array+0x44>)
 8006aaa:	1b64      	subs	r4, r4, r5
 8006aac:	10a4      	asrs	r4, r4, #2
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	d105      	bne.n	8006abe <__libc_init_array+0x2e>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	00b3      	lsls	r3, r6, #2
 8006ab6:	58eb      	ldr	r3, [r5, r3]
 8006ab8:	4798      	blx	r3
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7ee      	b.n	8006a9c <__libc_init_array+0xc>
 8006abe:	00b3      	lsls	r3, r6, #2
 8006ac0:	58eb      	ldr	r3, [r5, r3]
 8006ac2:	4798      	blx	r3
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	e7f2      	b.n	8006aae <__libc_init_array+0x1e>
 8006ac8:	080074a4 	.word	0x080074a4
 8006acc:	080074a4 	.word	0x080074a4
 8006ad0:	080074a4 	.word	0x080074a4
 8006ad4:	080074a8 	.word	0x080074a8

08006ad8 <memset>:
 8006ad8:	0003      	movs	r3, r0
 8006ada:	1882      	adds	r2, r0, r2
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d100      	bne.n	8006ae2 <memset+0xa>
 8006ae0:	4770      	bx	lr
 8006ae2:	7019      	strb	r1, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	e7f9      	b.n	8006adc <memset+0x4>

08006ae8 <siprintf>:
 8006ae8:	b40e      	push	{r1, r2, r3}
 8006aea:	b500      	push	{lr}
 8006aec:	490b      	ldr	r1, [pc, #44]	; (8006b1c <siprintf+0x34>)
 8006aee:	b09c      	sub	sp, #112	; 0x70
 8006af0:	ab1d      	add	r3, sp, #116	; 0x74
 8006af2:	9002      	str	r0, [sp, #8]
 8006af4:	9006      	str	r0, [sp, #24]
 8006af6:	9107      	str	r1, [sp, #28]
 8006af8:	9104      	str	r1, [sp, #16]
 8006afa:	4809      	ldr	r0, [pc, #36]	; (8006b20 <siprintf+0x38>)
 8006afc:	4909      	ldr	r1, [pc, #36]	; (8006b24 <siprintf+0x3c>)
 8006afe:	cb04      	ldmia	r3!, {r2}
 8006b00:	9105      	str	r1, [sp, #20]
 8006b02:	6800      	ldr	r0, [r0, #0]
 8006b04:	a902      	add	r1, sp, #8
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	f000 f870 	bl	8006bec <_svfiprintf_r>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9a02      	ldr	r2, [sp, #8]
 8006b10:	7013      	strb	r3, [r2, #0]
 8006b12:	b01c      	add	sp, #112	; 0x70
 8006b14:	bc08      	pop	{r3}
 8006b16:	b003      	add	sp, #12
 8006b18:	4718      	bx	r3
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	7fffffff 	.word	0x7fffffff
 8006b20:	20000014 	.word	0x20000014
 8006b24:	ffff0208 	.word	0xffff0208

08006b28 <__ssputs_r>:
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	688e      	ldr	r6, [r1, #8]
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	0007      	movs	r7, r0
 8006b30:	000c      	movs	r4, r1
 8006b32:	9203      	str	r2, [sp, #12]
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	429e      	cmp	r6, r3
 8006b38:	d83c      	bhi.n	8006bb4 <__ssputs_r+0x8c>
 8006b3a:	2390      	movs	r3, #144	; 0x90
 8006b3c:	898a      	ldrh	r2, [r1, #12]
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	421a      	tst	r2, r3
 8006b42:	d034      	beq.n	8006bae <__ssputs_r+0x86>
 8006b44:	2503      	movs	r5, #3
 8006b46:	6909      	ldr	r1, [r1, #16]
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	1a5b      	subs	r3, r3, r1
 8006b4c:	9302      	str	r3, [sp, #8]
 8006b4e:	6963      	ldr	r3, [r4, #20]
 8006b50:	9802      	ldr	r0, [sp, #8]
 8006b52:	435d      	muls	r5, r3
 8006b54:	0feb      	lsrs	r3, r5, #31
 8006b56:	195d      	adds	r5, r3, r5
 8006b58:	9b01      	ldr	r3, [sp, #4]
 8006b5a:	106d      	asrs	r5, r5, #1
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	181b      	adds	r3, r3, r0
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	d900      	bls.n	8006b66 <__ssputs_r+0x3e>
 8006b64:	001d      	movs	r5, r3
 8006b66:	0553      	lsls	r3, r2, #21
 8006b68:	d532      	bpl.n	8006bd0 <__ssputs_r+0xa8>
 8006b6a:	0029      	movs	r1, r5
 8006b6c:	0038      	movs	r0, r7
 8006b6e:	f000 fb31 	bl	80071d4 <_malloc_r>
 8006b72:	1e06      	subs	r6, r0, #0
 8006b74:	d109      	bne.n	8006b8a <__ssputs_r+0x62>
 8006b76:	230c      	movs	r3, #12
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	2340      	movs	r3, #64	; 0x40
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	89a2      	ldrh	r2, [r4, #12]
 8006b80:	4240      	negs	r0, r0
 8006b82:	4313      	orrs	r3, r2
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	b005      	add	sp, #20
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8a:	9a02      	ldr	r2, [sp, #8]
 8006b8c:	6921      	ldr	r1, [r4, #16]
 8006b8e:	f000 faba 	bl	8007106 <memcpy>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <__ssputs_r+0xc0>)
 8006b96:	401a      	ands	r2, r3
 8006b98:	2380      	movs	r3, #128	; 0x80
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	9b02      	ldr	r3, [sp, #8]
 8006ba0:	6126      	str	r6, [r4, #16]
 8006ba2:	18f6      	adds	r6, r6, r3
 8006ba4:	6026      	str	r6, [r4, #0]
 8006ba6:	6165      	str	r5, [r4, #20]
 8006ba8:	9e01      	ldr	r6, [sp, #4]
 8006baa:	1aed      	subs	r5, r5, r3
 8006bac:	60a5      	str	r5, [r4, #8]
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	429e      	cmp	r6, r3
 8006bb2:	d900      	bls.n	8006bb6 <__ssputs_r+0x8e>
 8006bb4:	9e01      	ldr	r6, [sp, #4]
 8006bb6:	0032      	movs	r2, r6
 8006bb8:	9903      	ldr	r1, [sp, #12]
 8006bba:	6820      	ldr	r0, [r4, #0]
 8006bbc:	f000 faac 	bl	8007118 <memmove>
 8006bc0:	68a3      	ldr	r3, [r4, #8]
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	1b9b      	subs	r3, r3, r6
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	199e      	adds	r6, r3, r6
 8006bcc:	6026      	str	r6, [r4, #0]
 8006bce:	e7da      	b.n	8006b86 <__ssputs_r+0x5e>
 8006bd0:	002a      	movs	r2, r5
 8006bd2:	0038      	movs	r0, r7
 8006bd4:	f000 fb5c 	bl	8007290 <_realloc_r>
 8006bd8:	1e06      	subs	r6, r0, #0
 8006bda:	d1e0      	bne.n	8006b9e <__ssputs_r+0x76>
 8006bdc:	0038      	movs	r0, r7
 8006bde:	6921      	ldr	r1, [r4, #16]
 8006be0:	f000 faae 	bl	8007140 <_free_r>
 8006be4:	e7c7      	b.n	8006b76 <__ssputs_r+0x4e>
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	fffffb7f 	.word	0xfffffb7f

08006bec <_svfiprintf_r>:
 8006bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bee:	b0a1      	sub	sp, #132	; 0x84
 8006bf0:	9003      	str	r0, [sp, #12]
 8006bf2:	001d      	movs	r5, r3
 8006bf4:	898b      	ldrh	r3, [r1, #12]
 8006bf6:	000f      	movs	r7, r1
 8006bf8:	0016      	movs	r6, r2
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	d511      	bpl.n	8006c22 <_svfiprintf_r+0x36>
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10e      	bne.n	8006c22 <_svfiprintf_r+0x36>
 8006c04:	2140      	movs	r1, #64	; 0x40
 8006c06:	f000 fae5 	bl	80071d4 <_malloc_r>
 8006c0a:	6038      	str	r0, [r7, #0]
 8006c0c:	6138      	str	r0, [r7, #16]
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d105      	bne.n	8006c1e <_svfiprintf_r+0x32>
 8006c12:	230c      	movs	r3, #12
 8006c14:	9a03      	ldr	r2, [sp, #12]
 8006c16:	3801      	subs	r0, #1
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	b021      	add	sp, #132	; 0x84
 8006c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1e:	2340      	movs	r3, #64	; 0x40
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	2300      	movs	r3, #0
 8006c24:	ac08      	add	r4, sp, #32
 8006c26:	6163      	str	r3, [r4, #20]
 8006c28:	3320      	adds	r3, #32
 8006c2a:	7663      	strb	r3, [r4, #25]
 8006c2c:	3310      	adds	r3, #16
 8006c2e:	76a3      	strb	r3, [r4, #26]
 8006c30:	9507      	str	r5, [sp, #28]
 8006c32:	0035      	movs	r5, r6
 8006c34:	782b      	ldrb	r3, [r5, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <_svfiprintf_r+0x52>
 8006c3a:	2b25      	cmp	r3, #37	; 0x25
 8006c3c:	d147      	bne.n	8006cce <_svfiprintf_r+0xe2>
 8006c3e:	1bab      	subs	r3, r5, r6
 8006c40:	9305      	str	r3, [sp, #20]
 8006c42:	42b5      	cmp	r5, r6
 8006c44:	d00c      	beq.n	8006c60 <_svfiprintf_r+0x74>
 8006c46:	0032      	movs	r2, r6
 8006c48:	0039      	movs	r1, r7
 8006c4a:	9803      	ldr	r0, [sp, #12]
 8006c4c:	f7ff ff6c 	bl	8006b28 <__ssputs_r>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d100      	bne.n	8006c56 <_svfiprintf_r+0x6a>
 8006c54:	e0ae      	b.n	8006db4 <_svfiprintf_r+0x1c8>
 8006c56:	6962      	ldr	r2, [r4, #20]
 8006c58:	9b05      	ldr	r3, [sp, #20]
 8006c5a:	4694      	mov	ip, r2
 8006c5c:	4463      	add	r3, ip
 8006c5e:	6163      	str	r3, [r4, #20]
 8006c60:	782b      	ldrb	r3, [r5, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d100      	bne.n	8006c68 <_svfiprintf_r+0x7c>
 8006c66:	e0a5      	b.n	8006db4 <_svfiprintf_r+0x1c8>
 8006c68:	2201      	movs	r2, #1
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	4252      	negs	r2, r2
 8006c6e:	6062      	str	r2, [r4, #4]
 8006c70:	a904      	add	r1, sp, #16
 8006c72:	3254      	adds	r2, #84	; 0x54
 8006c74:	1852      	adds	r2, r2, r1
 8006c76:	1c6e      	adds	r6, r5, #1
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	60e3      	str	r3, [r4, #12]
 8006c7c:	60a3      	str	r3, [r4, #8]
 8006c7e:	7013      	strb	r3, [r2, #0]
 8006c80:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c82:	2205      	movs	r2, #5
 8006c84:	7831      	ldrb	r1, [r6, #0]
 8006c86:	4854      	ldr	r0, [pc, #336]	; (8006dd8 <_svfiprintf_r+0x1ec>)
 8006c88:	f000 fa32 	bl	80070f0 <memchr>
 8006c8c:	1c75      	adds	r5, r6, #1
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d11f      	bne.n	8006cd2 <_svfiprintf_r+0xe6>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	06d3      	lsls	r3, r2, #27
 8006c96:	d504      	bpl.n	8006ca2 <_svfiprintf_r+0xb6>
 8006c98:	2353      	movs	r3, #83	; 0x53
 8006c9a:	a904      	add	r1, sp, #16
 8006c9c:	185b      	adds	r3, r3, r1
 8006c9e:	2120      	movs	r1, #32
 8006ca0:	7019      	strb	r1, [r3, #0]
 8006ca2:	0713      	lsls	r3, r2, #28
 8006ca4:	d504      	bpl.n	8006cb0 <_svfiprintf_r+0xc4>
 8006ca6:	2353      	movs	r3, #83	; 0x53
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	185b      	adds	r3, r3, r1
 8006cac:	212b      	movs	r1, #43	; 0x2b
 8006cae:	7019      	strb	r1, [r3, #0]
 8006cb0:	7833      	ldrb	r3, [r6, #0]
 8006cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb4:	d016      	beq.n	8006ce4 <_svfiprintf_r+0xf8>
 8006cb6:	0035      	movs	r5, r6
 8006cb8:	2100      	movs	r1, #0
 8006cba:	200a      	movs	r0, #10
 8006cbc:	68e3      	ldr	r3, [r4, #12]
 8006cbe:	782a      	ldrb	r2, [r5, #0]
 8006cc0:	1c6e      	adds	r6, r5, #1
 8006cc2:	3a30      	subs	r2, #48	; 0x30
 8006cc4:	2a09      	cmp	r2, #9
 8006cc6:	d94e      	bls.n	8006d66 <_svfiprintf_r+0x17a>
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	d111      	bne.n	8006cf0 <_svfiprintf_r+0x104>
 8006ccc:	e017      	b.n	8006cfe <_svfiprintf_r+0x112>
 8006cce:	3501      	adds	r5, #1
 8006cd0:	e7b0      	b.n	8006c34 <_svfiprintf_r+0x48>
 8006cd2:	4b41      	ldr	r3, [pc, #260]	; (8006dd8 <_svfiprintf_r+0x1ec>)
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	1ac0      	subs	r0, r0, r3
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4083      	lsls	r3, r0
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	002e      	movs	r6, r5
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	e7ce      	b.n	8006c82 <_svfiprintf_r+0x96>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	1d19      	adds	r1, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	9107      	str	r1, [sp, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	db01      	blt.n	8006cf4 <_svfiprintf_r+0x108>
 8006cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cf2:	e004      	b.n	8006cfe <_svfiprintf_r+0x112>
 8006cf4:	425b      	negs	r3, r3
 8006cf6:	60e3      	str	r3, [r4, #12]
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	782b      	ldrb	r3, [r5, #0]
 8006d00:	2b2e      	cmp	r3, #46	; 0x2e
 8006d02:	d10a      	bne.n	8006d1a <_svfiprintf_r+0x12e>
 8006d04:	786b      	ldrb	r3, [r5, #1]
 8006d06:	2b2a      	cmp	r3, #42	; 0x2a
 8006d08:	d135      	bne.n	8006d76 <_svfiprintf_r+0x18a>
 8006d0a:	9b07      	ldr	r3, [sp, #28]
 8006d0c:	3502      	adds	r5, #2
 8006d0e:	1d1a      	adds	r2, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	9207      	str	r2, [sp, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	db2b      	blt.n	8006d70 <_svfiprintf_r+0x184>
 8006d18:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1a:	4e30      	ldr	r6, [pc, #192]	; (8006ddc <_svfiprintf_r+0x1f0>)
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	0030      	movs	r0, r6
 8006d20:	7829      	ldrb	r1, [r5, #0]
 8006d22:	f000 f9e5 	bl	80070f0 <memchr>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d006      	beq.n	8006d38 <_svfiprintf_r+0x14c>
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	1b80      	subs	r0, r0, r6
 8006d2e:	4083      	lsls	r3, r0
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	3501      	adds	r5, #1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	7829      	ldrb	r1, [r5, #0]
 8006d3a:	2206      	movs	r2, #6
 8006d3c:	4828      	ldr	r0, [pc, #160]	; (8006de0 <_svfiprintf_r+0x1f4>)
 8006d3e:	1c6e      	adds	r6, r5, #1
 8006d40:	7621      	strb	r1, [r4, #24]
 8006d42:	f000 f9d5 	bl	80070f0 <memchr>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d03c      	beq.n	8006dc4 <_svfiprintf_r+0x1d8>
 8006d4a:	4b26      	ldr	r3, [pc, #152]	; (8006de4 <_svfiprintf_r+0x1f8>)
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d125      	bne.n	8006d9c <_svfiprintf_r+0x1b0>
 8006d50:	2207      	movs	r2, #7
 8006d52:	9b07      	ldr	r3, [sp, #28]
 8006d54:	3307      	adds	r3, #7
 8006d56:	4393      	bics	r3, r2
 8006d58:	3308      	adds	r3, #8
 8006d5a:	9307      	str	r3, [sp, #28]
 8006d5c:	6963      	ldr	r3, [r4, #20]
 8006d5e:	9a04      	ldr	r2, [sp, #16]
 8006d60:	189b      	adds	r3, r3, r2
 8006d62:	6163      	str	r3, [r4, #20]
 8006d64:	e765      	b.n	8006c32 <_svfiprintf_r+0x46>
 8006d66:	4343      	muls	r3, r0
 8006d68:	0035      	movs	r5, r6
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	189b      	adds	r3, r3, r2
 8006d6e:	e7a6      	b.n	8006cbe <_svfiprintf_r+0xd2>
 8006d70:	2301      	movs	r3, #1
 8006d72:	425b      	negs	r3, r3
 8006d74:	e7d0      	b.n	8006d18 <_svfiprintf_r+0x12c>
 8006d76:	2300      	movs	r3, #0
 8006d78:	200a      	movs	r0, #10
 8006d7a:	001a      	movs	r2, r3
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	6063      	str	r3, [r4, #4]
 8006d80:	7829      	ldrb	r1, [r5, #0]
 8006d82:	1c6e      	adds	r6, r5, #1
 8006d84:	3930      	subs	r1, #48	; 0x30
 8006d86:	2909      	cmp	r1, #9
 8006d88:	d903      	bls.n	8006d92 <_svfiprintf_r+0x1a6>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0c5      	beq.n	8006d1a <_svfiprintf_r+0x12e>
 8006d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d90:	e7c3      	b.n	8006d1a <_svfiprintf_r+0x12e>
 8006d92:	4342      	muls	r2, r0
 8006d94:	0035      	movs	r5, r6
 8006d96:	2301      	movs	r3, #1
 8006d98:	1852      	adds	r2, r2, r1
 8006d9a:	e7f1      	b.n	8006d80 <_svfiprintf_r+0x194>
 8006d9c:	ab07      	add	r3, sp, #28
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	003a      	movs	r2, r7
 8006da2:	0021      	movs	r1, r4
 8006da4:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <_svfiprintf_r+0x1fc>)
 8006da6:	9803      	ldr	r0, [sp, #12]
 8006da8:	e000      	b.n	8006dac <_svfiprintf_r+0x1c0>
 8006daa:	bf00      	nop
 8006dac:	9004      	str	r0, [sp, #16]
 8006dae:	9b04      	ldr	r3, [sp, #16]
 8006db0:	3301      	adds	r3, #1
 8006db2:	d1d3      	bne.n	8006d5c <_svfiprintf_r+0x170>
 8006db4:	89bb      	ldrh	r3, [r7, #12]
 8006db6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006db8:	065b      	lsls	r3, r3, #25
 8006dba:	d400      	bmi.n	8006dbe <_svfiprintf_r+0x1d2>
 8006dbc:	e72d      	b.n	8006c1a <_svfiprintf_r+0x2e>
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	4240      	negs	r0, r0
 8006dc2:	e72a      	b.n	8006c1a <_svfiprintf_r+0x2e>
 8006dc4:	ab07      	add	r3, sp, #28
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	003a      	movs	r2, r7
 8006dca:	0021      	movs	r1, r4
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <_svfiprintf_r+0x1fc>)
 8006dce:	9803      	ldr	r0, [sp, #12]
 8006dd0:	f000 f87c 	bl	8006ecc <_printf_i>
 8006dd4:	e7ea      	b.n	8006dac <_svfiprintf_r+0x1c0>
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	08007470 	.word	0x08007470
 8006ddc:	08007476 	.word	0x08007476
 8006de0:	0800747a 	.word	0x0800747a
 8006de4:	00000000 	.word	0x00000000
 8006de8:	08006b29 	.word	0x08006b29

08006dec <_printf_common>:
 8006dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dee:	0015      	movs	r5, r2
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	688a      	ldr	r2, [r1, #8]
 8006df4:	690b      	ldr	r3, [r1, #16]
 8006df6:	000c      	movs	r4, r1
 8006df8:	9000      	str	r0, [sp, #0]
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	da00      	bge.n	8006e00 <_printf_common+0x14>
 8006dfe:	0013      	movs	r3, r2
 8006e00:	0022      	movs	r2, r4
 8006e02:	602b      	str	r3, [r5, #0]
 8006e04:	3243      	adds	r2, #67	; 0x43
 8006e06:	7812      	ldrb	r2, [r2, #0]
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	d001      	beq.n	8006e10 <_printf_common+0x24>
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	069b      	lsls	r3, r3, #26
 8006e14:	d502      	bpl.n	8006e1c <_printf_common+0x30>
 8006e16:	682b      	ldr	r3, [r5, #0]
 8006e18:	3302      	adds	r3, #2
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	6822      	ldr	r2, [r4, #0]
 8006e1e:	2306      	movs	r3, #6
 8006e20:	0017      	movs	r7, r2
 8006e22:	401f      	ands	r7, r3
 8006e24:	421a      	tst	r2, r3
 8006e26:	d027      	beq.n	8006e78 <_printf_common+0x8c>
 8006e28:	0023      	movs	r3, r4
 8006e2a:	3343      	adds	r3, #67	; 0x43
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	1e5a      	subs	r2, r3, #1
 8006e30:	4193      	sbcs	r3, r2
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	0692      	lsls	r2, r2, #26
 8006e36:	d430      	bmi.n	8006e9a <_printf_common+0xae>
 8006e38:	0022      	movs	r2, r4
 8006e3a:	9901      	ldr	r1, [sp, #4]
 8006e3c:	9800      	ldr	r0, [sp, #0]
 8006e3e:	9e08      	ldr	r6, [sp, #32]
 8006e40:	3243      	adds	r2, #67	; 0x43
 8006e42:	47b0      	blx	r6
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d025      	beq.n	8006e94 <_printf_common+0xa8>
 8006e48:	2306      	movs	r3, #6
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	682a      	ldr	r2, [r5, #0]
 8006e4e:	68e1      	ldr	r1, [r4, #12]
 8006e50:	2500      	movs	r5, #0
 8006e52:	4003      	ands	r3, r0
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d103      	bne.n	8006e60 <_printf_common+0x74>
 8006e58:	1a8d      	subs	r5, r1, r2
 8006e5a:	43eb      	mvns	r3, r5
 8006e5c:	17db      	asrs	r3, r3, #31
 8006e5e:	401d      	ands	r5, r3
 8006e60:	68a3      	ldr	r3, [r4, #8]
 8006e62:	6922      	ldr	r2, [r4, #16]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	dd01      	ble.n	8006e6c <_printf_common+0x80>
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	18ed      	adds	r5, r5, r3
 8006e6c:	2700      	movs	r7, #0
 8006e6e:	42bd      	cmp	r5, r7
 8006e70:	d120      	bne.n	8006eb4 <_printf_common+0xc8>
 8006e72:	2000      	movs	r0, #0
 8006e74:	e010      	b.n	8006e98 <_printf_common+0xac>
 8006e76:	3701      	adds	r7, #1
 8006e78:	68e3      	ldr	r3, [r4, #12]
 8006e7a:	682a      	ldr	r2, [r5, #0]
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	42bb      	cmp	r3, r7
 8006e80:	ddd2      	ble.n	8006e28 <_printf_common+0x3c>
 8006e82:	0022      	movs	r2, r4
 8006e84:	2301      	movs	r3, #1
 8006e86:	9901      	ldr	r1, [sp, #4]
 8006e88:	9800      	ldr	r0, [sp, #0]
 8006e8a:	9e08      	ldr	r6, [sp, #32]
 8006e8c:	3219      	adds	r2, #25
 8006e8e:	47b0      	blx	r6
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d1f0      	bne.n	8006e76 <_printf_common+0x8a>
 8006e94:	2001      	movs	r0, #1
 8006e96:	4240      	negs	r0, r0
 8006e98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e9a:	2030      	movs	r0, #48	; 0x30
 8006e9c:	18e1      	adds	r1, r4, r3
 8006e9e:	3143      	adds	r1, #67	; 0x43
 8006ea0:	7008      	strb	r0, [r1, #0]
 8006ea2:	0021      	movs	r1, r4
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	3145      	adds	r1, #69	; 0x45
 8006ea8:	7809      	ldrb	r1, [r1, #0]
 8006eaa:	18a2      	adds	r2, r4, r2
 8006eac:	3243      	adds	r2, #67	; 0x43
 8006eae:	3302      	adds	r3, #2
 8006eb0:	7011      	strb	r1, [r2, #0]
 8006eb2:	e7c1      	b.n	8006e38 <_printf_common+0x4c>
 8006eb4:	0022      	movs	r2, r4
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	9901      	ldr	r1, [sp, #4]
 8006eba:	9800      	ldr	r0, [sp, #0]
 8006ebc:	9e08      	ldr	r6, [sp, #32]
 8006ebe:	321a      	adds	r2, #26
 8006ec0:	47b0      	blx	r6
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	d0e6      	beq.n	8006e94 <_printf_common+0xa8>
 8006ec6:	3701      	adds	r7, #1
 8006ec8:	e7d1      	b.n	8006e6e <_printf_common+0x82>
	...

08006ecc <_printf_i>:
 8006ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ece:	b08b      	sub	sp, #44	; 0x2c
 8006ed0:	9206      	str	r2, [sp, #24]
 8006ed2:	000a      	movs	r2, r1
 8006ed4:	3243      	adds	r2, #67	; 0x43
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	9005      	str	r0, [sp, #20]
 8006eda:	9204      	str	r2, [sp, #16]
 8006edc:	7e0a      	ldrb	r2, [r1, #24]
 8006ede:	000c      	movs	r4, r1
 8006ee0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ee2:	2a78      	cmp	r2, #120	; 0x78
 8006ee4:	d806      	bhi.n	8006ef4 <_printf_i+0x28>
 8006ee6:	2a62      	cmp	r2, #98	; 0x62
 8006ee8:	d808      	bhi.n	8006efc <_printf_i+0x30>
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	d100      	bne.n	8006ef0 <_printf_i+0x24>
 8006eee:	e0c0      	b.n	8007072 <_printf_i+0x1a6>
 8006ef0:	2a58      	cmp	r2, #88	; 0x58
 8006ef2:	d052      	beq.n	8006f9a <_printf_i+0xce>
 8006ef4:	0026      	movs	r6, r4
 8006ef6:	3642      	adds	r6, #66	; 0x42
 8006ef8:	7032      	strb	r2, [r6, #0]
 8006efa:	e022      	b.n	8006f42 <_printf_i+0x76>
 8006efc:	0010      	movs	r0, r2
 8006efe:	3863      	subs	r0, #99	; 0x63
 8006f00:	2815      	cmp	r0, #21
 8006f02:	d8f7      	bhi.n	8006ef4 <_printf_i+0x28>
 8006f04:	f7f9 f908 	bl	8000118 <__gnu_thumb1_case_shi>
 8006f08:	001f0016 	.word	0x001f0016
 8006f0c:	fff6fff6 	.word	0xfff6fff6
 8006f10:	fff6fff6 	.word	0xfff6fff6
 8006f14:	fff6001f 	.word	0xfff6001f
 8006f18:	fff6fff6 	.word	0xfff6fff6
 8006f1c:	00a8fff6 	.word	0x00a8fff6
 8006f20:	009a0036 	.word	0x009a0036
 8006f24:	fff6fff6 	.word	0xfff6fff6
 8006f28:	fff600b9 	.word	0xfff600b9
 8006f2c:	fff60036 	.word	0xfff60036
 8006f30:	009efff6 	.word	0x009efff6
 8006f34:	0026      	movs	r6, r4
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	3642      	adds	r6, #66	; 0x42
 8006f3a:	1d11      	adds	r1, r2, #4
 8006f3c:	6019      	str	r1, [r3, #0]
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	7033      	strb	r3, [r6, #0]
 8006f42:	2301      	movs	r3, #1
 8006f44:	e0a7      	b.n	8007096 <_printf_i+0x1ca>
 8006f46:	6808      	ldr	r0, [r1, #0]
 8006f48:	6819      	ldr	r1, [r3, #0]
 8006f4a:	1d0a      	adds	r2, r1, #4
 8006f4c:	0605      	lsls	r5, r0, #24
 8006f4e:	d50b      	bpl.n	8006f68 <_printf_i+0x9c>
 8006f50:	680d      	ldr	r5, [r1, #0]
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	da03      	bge.n	8006f60 <_printf_i+0x94>
 8006f58:	232d      	movs	r3, #45	; 0x2d
 8006f5a:	9a04      	ldr	r2, [sp, #16]
 8006f5c:	426d      	negs	r5, r5
 8006f5e:	7013      	strb	r3, [r2, #0]
 8006f60:	4b61      	ldr	r3, [pc, #388]	; (80070e8 <_printf_i+0x21c>)
 8006f62:	270a      	movs	r7, #10
 8006f64:	9303      	str	r3, [sp, #12]
 8006f66:	e032      	b.n	8006fce <_printf_i+0x102>
 8006f68:	680d      	ldr	r5, [r1, #0]
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	0641      	lsls	r1, r0, #25
 8006f6e:	d5f1      	bpl.n	8006f54 <_printf_i+0x88>
 8006f70:	b22d      	sxth	r5, r5
 8006f72:	e7ef      	b.n	8006f54 <_printf_i+0x88>
 8006f74:	680d      	ldr	r5, [r1, #0]
 8006f76:	6819      	ldr	r1, [r3, #0]
 8006f78:	1d08      	adds	r0, r1, #4
 8006f7a:	6018      	str	r0, [r3, #0]
 8006f7c:	062e      	lsls	r6, r5, #24
 8006f7e:	d501      	bpl.n	8006f84 <_printf_i+0xb8>
 8006f80:	680d      	ldr	r5, [r1, #0]
 8006f82:	e003      	b.n	8006f8c <_printf_i+0xc0>
 8006f84:	066d      	lsls	r5, r5, #25
 8006f86:	d5fb      	bpl.n	8006f80 <_printf_i+0xb4>
 8006f88:	680d      	ldr	r5, [r1, #0]
 8006f8a:	b2ad      	uxth	r5, r5
 8006f8c:	4b56      	ldr	r3, [pc, #344]	; (80070e8 <_printf_i+0x21c>)
 8006f8e:	270a      	movs	r7, #10
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	2a6f      	cmp	r2, #111	; 0x6f
 8006f94:	d117      	bne.n	8006fc6 <_printf_i+0xfa>
 8006f96:	2708      	movs	r7, #8
 8006f98:	e015      	b.n	8006fc6 <_printf_i+0xfa>
 8006f9a:	3145      	adds	r1, #69	; 0x45
 8006f9c:	700a      	strb	r2, [r1, #0]
 8006f9e:	4a52      	ldr	r2, [pc, #328]	; (80070e8 <_printf_i+0x21c>)
 8006fa0:	9203      	str	r2, [sp, #12]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	6821      	ldr	r1, [r4, #0]
 8006fa6:	ca20      	ldmia	r2!, {r5}
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	0608      	lsls	r0, r1, #24
 8006fac:	d550      	bpl.n	8007050 <_printf_i+0x184>
 8006fae:	07cb      	lsls	r3, r1, #31
 8006fb0:	d502      	bpl.n	8006fb8 <_printf_i+0xec>
 8006fb2:	2320      	movs	r3, #32
 8006fb4:	4319      	orrs	r1, r3
 8006fb6:	6021      	str	r1, [r4, #0]
 8006fb8:	2710      	movs	r7, #16
 8006fba:	2d00      	cmp	r5, #0
 8006fbc:	d103      	bne.n	8006fc6 <_printf_i+0xfa>
 8006fbe:	2320      	movs	r3, #32
 8006fc0:	6822      	ldr	r2, [r4, #0]
 8006fc2:	439a      	bics	r2, r3
 8006fc4:	6022      	str	r2, [r4, #0]
 8006fc6:	0023      	movs	r3, r4
 8006fc8:	2200      	movs	r2, #0
 8006fca:	3343      	adds	r3, #67	; 0x43
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	6863      	ldr	r3, [r4, #4]
 8006fd0:	60a3      	str	r3, [r4, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	db03      	blt.n	8006fde <_printf_i+0x112>
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	6821      	ldr	r1, [r4, #0]
 8006fda:	4391      	bics	r1, r2
 8006fdc:	6021      	str	r1, [r4, #0]
 8006fde:	2d00      	cmp	r5, #0
 8006fe0:	d102      	bne.n	8006fe8 <_printf_i+0x11c>
 8006fe2:	9e04      	ldr	r6, [sp, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00c      	beq.n	8007002 <_printf_i+0x136>
 8006fe8:	9e04      	ldr	r6, [sp, #16]
 8006fea:	0028      	movs	r0, r5
 8006fec:	0039      	movs	r1, r7
 8006fee:	f7f9 f923 	bl	8000238 <__aeabi_uidivmod>
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	3e01      	subs	r6, #1
 8006ff6:	5c5b      	ldrb	r3, [r3, r1]
 8006ff8:	7033      	strb	r3, [r6, #0]
 8006ffa:	002b      	movs	r3, r5
 8006ffc:	0005      	movs	r5, r0
 8006ffe:	429f      	cmp	r7, r3
 8007000:	d9f3      	bls.n	8006fea <_printf_i+0x11e>
 8007002:	2f08      	cmp	r7, #8
 8007004:	d109      	bne.n	800701a <_printf_i+0x14e>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	07db      	lsls	r3, r3, #31
 800700a:	d506      	bpl.n	800701a <_printf_i+0x14e>
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	6922      	ldr	r2, [r4, #16]
 8007010:	4293      	cmp	r3, r2
 8007012:	dc02      	bgt.n	800701a <_printf_i+0x14e>
 8007014:	2330      	movs	r3, #48	; 0x30
 8007016:	3e01      	subs	r6, #1
 8007018:	7033      	strb	r3, [r6, #0]
 800701a:	9b04      	ldr	r3, [sp, #16]
 800701c:	1b9b      	subs	r3, r3, r6
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	9b07      	ldr	r3, [sp, #28]
 8007022:	0021      	movs	r1, r4
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	9805      	ldr	r0, [sp, #20]
 8007028:	9b06      	ldr	r3, [sp, #24]
 800702a:	aa09      	add	r2, sp, #36	; 0x24
 800702c:	f7ff fede 	bl	8006dec <_printf_common>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d135      	bne.n	80070a0 <_printf_i+0x1d4>
 8007034:	2001      	movs	r0, #1
 8007036:	4240      	negs	r0, r0
 8007038:	b00b      	add	sp, #44	; 0x2c
 800703a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800703c:	2220      	movs	r2, #32
 800703e:	6809      	ldr	r1, [r1, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	6022      	str	r2, [r4, #0]
 8007044:	0022      	movs	r2, r4
 8007046:	2178      	movs	r1, #120	; 0x78
 8007048:	3245      	adds	r2, #69	; 0x45
 800704a:	7011      	strb	r1, [r2, #0]
 800704c:	4a27      	ldr	r2, [pc, #156]	; (80070ec <_printf_i+0x220>)
 800704e:	e7a7      	b.n	8006fa0 <_printf_i+0xd4>
 8007050:	0648      	lsls	r0, r1, #25
 8007052:	d5ac      	bpl.n	8006fae <_printf_i+0xe2>
 8007054:	b2ad      	uxth	r5, r5
 8007056:	e7aa      	b.n	8006fae <_printf_i+0xe2>
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	680d      	ldr	r5, [r1, #0]
 800705c:	1d10      	adds	r0, r2, #4
 800705e:	6949      	ldr	r1, [r1, #20]
 8007060:	6018      	str	r0, [r3, #0]
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	062e      	lsls	r6, r5, #24
 8007066:	d501      	bpl.n	800706c <_printf_i+0x1a0>
 8007068:	6019      	str	r1, [r3, #0]
 800706a:	e002      	b.n	8007072 <_printf_i+0x1a6>
 800706c:	066d      	lsls	r5, r5, #25
 800706e:	d5fb      	bpl.n	8007068 <_printf_i+0x19c>
 8007070:	8019      	strh	r1, [r3, #0]
 8007072:	2300      	movs	r3, #0
 8007074:	9e04      	ldr	r6, [sp, #16]
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	e7d2      	b.n	8007020 <_printf_i+0x154>
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	1d11      	adds	r1, r2, #4
 800707e:	6019      	str	r1, [r3, #0]
 8007080:	6816      	ldr	r6, [r2, #0]
 8007082:	2100      	movs	r1, #0
 8007084:	0030      	movs	r0, r6
 8007086:	6862      	ldr	r2, [r4, #4]
 8007088:	f000 f832 	bl	80070f0 <memchr>
 800708c:	2800      	cmp	r0, #0
 800708e:	d001      	beq.n	8007094 <_printf_i+0x1c8>
 8007090:	1b80      	subs	r0, r0, r6
 8007092:	6060      	str	r0, [r4, #4]
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	6123      	str	r3, [r4, #16]
 8007098:	2300      	movs	r3, #0
 800709a:	9a04      	ldr	r2, [sp, #16]
 800709c:	7013      	strb	r3, [r2, #0]
 800709e:	e7bf      	b.n	8007020 <_printf_i+0x154>
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	0032      	movs	r2, r6
 80070a4:	9906      	ldr	r1, [sp, #24]
 80070a6:	9805      	ldr	r0, [sp, #20]
 80070a8:	9d07      	ldr	r5, [sp, #28]
 80070aa:	47a8      	blx	r5
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d0c1      	beq.n	8007034 <_printf_i+0x168>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	079b      	lsls	r3, r3, #30
 80070b4:	d415      	bmi.n	80070e2 <_printf_i+0x216>
 80070b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b8:	68e0      	ldr	r0, [r4, #12]
 80070ba:	4298      	cmp	r0, r3
 80070bc:	dabc      	bge.n	8007038 <_printf_i+0x16c>
 80070be:	0018      	movs	r0, r3
 80070c0:	e7ba      	b.n	8007038 <_printf_i+0x16c>
 80070c2:	0022      	movs	r2, r4
 80070c4:	2301      	movs	r3, #1
 80070c6:	9906      	ldr	r1, [sp, #24]
 80070c8:	9805      	ldr	r0, [sp, #20]
 80070ca:	9e07      	ldr	r6, [sp, #28]
 80070cc:	3219      	adds	r2, #25
 80070ce:	47b0      	blx	r6
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d0af      	beq.n	8007034 <_printf_i+0x168>
 80070d4:	3501      	adds	r5, #1
 80070d6:	68e3      	ldr	r3, [r4, #12]
 80070d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070da:	1a9b      	subs	r3, r3, r2
 80070dc:	42ab      	cmp	r3, r5
 80070de:	dcf0      	bgt.n	80070c2 <_printf_i+0x1f6>
 80070e0:	e7e9      	b.n	80070b6 <_printf_i+0x1ea>
 80070e2:	2500      	movs	r5, #0
 80070e4:	e7f7      	b.n	80070d6 <_printf_i+0x20a>
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	08007481 	.word	0x08007481
 80070ec:	08007492 	.word	0x08007492

080070f0 <memchr>:
 80070f0:	b2c9      	uxtb	r1, r1
 80070f2:	1882      	adds	r2, r0, r2
 80070f4:	4290      	cmp	r0, r2
 80070f6:	d101      	bne.n	80070fc <memchr+0xc>
 80070f8:	2000      	movs	r0, #0
 80070fa:	4770      	bx	lr
 80070fc:	7803      	ldrb	r3, [r0, #0]
 80070fe:	428b      	cmp	r3, r1
 8007100:	d0fb      	beq.n	80070fa <memchr+0xa>
 8007102:	3001      	adds	r0, #1
 8007104:	e7f6      	b.n	80070f4 <memchr+0x4>

08007106 <memcpy>:
 8007106:	2300      	movs	r3, #0
 8007108:	b510      	push	{r4, lr}
 800710a:	429a      	cmp	r2, r3
 800710c:	d100      	bne.n	8007110 <memcpy+0xa>
 800710e:	bd10      	pop	{r4, pc}
 8007110:	5ccc      	ldrb	r4, [r1, r3]
 8007112:	54c4      	strb	r4, [r0, r3]
 8007114:	3301      	adds	r3, #1
 8007116:	e7f8      	b.n	800710a <memcpy+0x4>

08007118 <memmove>:
 8007118:	b510      	push	{r4, lr}
 800711a:	4288      	cmp	r0, r1
 800711c:	d902      	bls.n	8007124 <memmove+0xc>
 800711e:	188b      	adds	r3, r1, r2
 8007120:	4298      	cmp	r0, r3
 8007122:	d303      	bcc.n	800712c <memmove+0x14>
 8007124:	2300      	movs	r3, #0
 8007126:	e007      	b.n	8007138 <memmove+0x20>
 8007128:	5c8b      	ldrb	r3, [r1, r2]
 800712a:	5483      	strb	r3, [r0, r2]
 800712c:	3a01      	subs	r2, #1
 800712e:	d2fb      	bcs.n	8007128 <memmove+0x10>
 8007130:	bd10      	pop	{r4, pc}
 8007132:	5ccc      	ldrb	r4, [r1, r3]
 8007134:	54c4      	strb	r4, [r0, r3]
 8007136:	3301      	adds	r3, #1
 8007138:	429a      	cmp	r2, r3
 800713a:	d1fa      	bne.n	8007132 <memmove+0x1a>
 800713c:	e7f8      	b.n	8007130 <memmove+0x18>
	...

08007140 <_free_r>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	0005      	movs	r5, r0
 8007144:	2900      	cmp	r1, #0
 8007146:	d010      	beq.n	800716a <_free_r+0x2a>
 8007148:	1f0c      	subs	r4, r1, #4
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	da00      	bge.n	8007152 <_free_r+0x12>
 8007150:	18e4      	adds	r4, r4, r3
 8007152:	0028      	movs	r0, r5
 8007154:	f000 f8d4 	bl	8007300 <__malloc_lock>
 8007158:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <_free_r+0x90>)
 800715a:	6813      	ldr	r3, [r2, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <_free_r+0x2c>
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	6014      	str	r4, [r2, #0]
 8007164:	0028      	movs	r0, r5
 8007166:	f000 f8d3 	bl	8007310 <__malloc_unlock>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	42a3      	cmp	r3, r4
 800716e:	d908      	bls.n	8007182 <_free_r+0x42>
 8007170:	6821      	ldr	r1, [r4, #0]
 8007172:	1860      	adds	r0, r4, r1
 8007174:	4283      	cmp	r3, r0
 8007176:	d1f3      	bne.n	8007160 <_free_r+0x20>
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	1841      	adds	r1, r0, r1
 800717e:	6021      	str	r1, [r4, #0]
 8007180:	e7ee      	b.n	8007160 <_free_r+0x20>
 8007182:	001a      	movs	r2, r3
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <_free_r+0x4e>
 800718a:	42a3      	cmp	r3, r4
 800718c:	d9f9      	bls.n	8007182 <_free_r+0x42>
 800718e:	6811      	ldr	r1, [r2, #0]
 8007190:	1850      	adds	r0, r2, r1
 8007192:	42a0      	cmp	r0, r4
 8007194:	d10b      	bne.n	80071ae <_free_r+0x6e>
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	1809      	adds	r1, r1, r0
 800719a:	1850      	adds	r0, r2, r1
 800719c:	6011      	str	r1, [r2, #0]
 800719e:	4283      	cmp	r3, r0
 80071a0:	d1e0      	bne.n	8007164 <_free_r+0x24>
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	1841      	adds	r1, r0, r1
 80071a8:	6011      	str	r1, [r2, #0]
 80071aa:	6053      	str	r3, [r2, #4]
 80071ac:	e7da      	b.n	8007164 <_free_r+0x24>
 80071ae:	42a0      	cmp	r0, r4
 80071b0:	d902      	bls.n	80071b8 <_free_r+0x78>
 80071b2:	230c      	movs	r3, #12
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	e7d5      	b.n	8007164 <_free_r+0x24>
 80071b8:	6821      	ldr	r1, [r4, #0]
 80071ba:	1860      	adds	r0, r4, r1
 80071bc:	4283      	cmp	r3, r0
 80071be:	d103      	bne.n	80071c8 <_free_r+0x88>
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	1841      	adds	r1, r0, r1
 80071c6:	6021      	str	r1, [r4, #0]
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	6054      	str	r4, [r2, #4]
 80071cc:	e7ca      	b.n	8007164 <_free_r+0x24>
 80071ce:	46c0      	nop			; (mov r8, r8)
 80071d0:	20000128 	.word	0x20000128

080071d4 <_malloc_r>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	2303      	movs	r3, #3
 80071d8:	1ccd      	adds	r5, r1, #3
 80071da:	439d      	bics	r5, r3
 80071dc:	3508      	adds	r5, #8
 80071de:	0006      	movs	r6, r0
 80071e0:	2d0c      	cmp	r5, #12
 80071e2:	d21f      	bcs.n	8007224 <_malloc_r+0x50>
 80071e4:	250c      	movs	r5, #12
 80071e6:	42a9      	cmp	r1, r5
 80071e8:	d81e      	bhi.n	8007228 <_malloc_r+0x54>
 80071ea:	0030      	movs	r0, r6
 80071ec:	f000 f888 	bl	8007300 <__malloc_lock>
 80071f0:	4925      	ldr	r1, [pc, #148]	; (8007288 <_malloc_r+0xb4>)
 80071f2:	680a      	ldr	r2, [r1, #0]
 80071f4:	0014      	movs	r4, r2
 80071f6:	2c00      	cmp	r4, #0
 80071f8:	d11a      	bne.n	8007230 <_malloc_r+0x5c>
 80071fa:	4f24      	ldr	r7, [pc, #144]	; (800728c <_malloc_r+0xb8>)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <_malloc_r+0x38>
 8007202:	0021      	movs	r1, r4
 8007204:	0030      	movs	r0, r6
 8007206:	f000 f869 	bl	80072dc <_sbrk_r>
 800720a:	6038      	str	r0, [r7, #0]
 800720c:	0029      	movs	r1, r5
 800720e:	0030      	movs	r0, r6
 8007210:	f000 f864 	bl	80072dc <_sbrk_r>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d12b      	bne.n	8007270 <_malloc_r+0x9c>
 8007218:	230c      	movs	r3, #12
 800721a:	0030      	movs	r0, r6
 800721c:	6033      	str	r3, [r6, #0]
 800721e:	f000 f877 	bl	8007310 <__malloc_unlock>
 8007222:	e003      	b.n	800722c <_malloc_r+0x58>
 8007224:	2d00      	cmp	r5, #0
 8007226:	dade      	bge.n	80071e6 <_malloc_r+0x12>
 8007228:	230c      	movs	r3, #12
 800722a:	6033      	str	r3, [r6, #0]
 800722c:	2000      	movs	r0, #0
 800722e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	1b5b      	subs	r3, r3, r5
 8007234:	d419      	bmi.n	800726a <_malloc_r+0x96>
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d903      	bls.n	8007242 <_malloc_r+0x6e>
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	18e4      	adds	r4, r4, r3
 800723e:	6025      	str	r5, [r4, #0]
 8007240:	e003      	b.n	800724a <_malloc_r+0x76>
 8007242:	6863      	ldr	r3, [r4, #4]
 8007244:	42a2      	cmp	r2, r4
 8007246:	d10e      	bne.n	8007266 <_malloc_r+0x92>
 8007248:	600b      	str	r3, [r1, #0]
 800724a:	0030      	movs	r0, r6
 800724c:	f000 f860 	bl	8007310 <__malloc_unlock>
 8007250:	0020      	movs	r0, r4
 8007252:	2207      	movs	r2, #7
 8007254:	300b      	adds	r0, #11
 8007256:	1d23      	adds	r3, r4, #4
 8007258:	4390      	bics	r0, r2
 800725a:	1ac2      	subs	r2, r0, r3
 800725c:	4298      	cmp	r0, r3
 800725e:	d0e6      	beq.n	800722e <_malloc_r+0x5a>
 8007260:	1a1b      	subs	r3, r3, r0
 8007262:	50a3      	str	r3, [r4, r2]
 8007264:	e7e3      	b.n	800722e <_malloc_r+0x5a>
 8007266:	6053      	str	r3, [r2, #4]
 8007268:	e7ef      	b.n	800724a <_malloc_r+0x76>
 800726a:	0022      	movs	r2, r4
 800726c:	6864      	ldr	r4, [r4, #4]
 800726e:	e7c2      	b.n	80071f6 <_malloc_r+0x22>
 8007270:	2303      	movs	r3, #3
 8007272:	1cc4      	adds	r4, r0, #3
 8007274:	439c      	bics	r4, r3
 8007276:	42a0      	cmp	r0, r4
 8007278:	d0e1      	beq.n	800723e <_malloc_r+0x6a>
 800727a:	1a21      	subs	r1, r4, r0
 800727c:	0030      	movs	r0, r6
 800727e:	f000 f82d 	bl	80072dc <_sbrk_r>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d1db      	bne.n	800723e <_malloc_r+0x6a>
 8007286:	e7c7      	b.n	8007218 <_malloc_r+0x44>
 8007288:	20000128 	.word	0x20000128
 800728c:	2000012c 	.word	0x2000012c

08007290 <_realloc_r>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	0007      	movs	r7, r0
 8007294:	000d      	movs	r5, r1
 8007296:	0016      	movs	r6, r2
 8007298:	2900      	cmp	r1, #0
 800729a:	d105      	bne.n	80072a8 <_realloc_r+0x18>
 800729c:	0011      	movs	r1, r2
 800729e:	f7ff ff99 	bl	80071d4 <_malloc_r>
 80072a2:	0004      	movs	r4, r0
 80072a4:	0020      	movs	r0, r4
 80072a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	d103      	bne.n	80072b4 <_realloc_r+0x24>
 80072ac:	f7ff ff48 	bl	8007140 <_free_r>
 80072b0:	0034      	movs	r4, r6
 80072b2:	e7f7      	b.n	80072a4 <_realloc_r+0x14>
 80072b4:	f000 f834 	bl	8007320 <_malloc_usable_size_r>
 80072b8:	002c      	movs	r4, r5
 80072ba:	42b0      	cmp	r0, r6
 80072bc:	d2f2      	bcs.n	80072a4 <_realloc_r+0x14>
 80072be:	0031      	movs	r1, r6
 80072c0:	0038      	movs	r0, r7
 80072c2:	f7ff ff87 	bl	80071d4 <_malloc_r>
 80072c6:	1e04      	subs	r4, r0, #0
 80072c8:	d0ec      	beq.n	80072a4 <_realloc_r+0x14>
 80072ca:	0029      	movs	r1, r5
 80072cc:	0032      	movs	r2, r6
 80072ce:	f7ff ff1a 	bl	8007106 <memcpy>
 80072d2:	0029      	movs	r1, r5
 80072d4:	0038      	movs	r0, r7
 80072d6:	f7ff ff33 	bl	8007140 <_free_r>
 80072da:	e7e3      	b.n	80072a4 <_realloc_r+0x14>

080072dc <_sbrk_r>:
 80072dc:	2300      	movs	r3, #0
 80072de:	b570      	push	{r4, r5, r6, lr}
 80072e0:	4d06      	ldr	r5, [pc, #24]	; (80072fc <_sbrk_r+0x20>)
 80072e2:	0004      	movs	r4, r0
 80072e4:	0008      	movs	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fb fe34 	bl	8002f54 <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d103      	bne.n	80072f8 <_sbrk_r+0x1c>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d000      	beq.n	80072f8 <_sbrk_r+0x1c>
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	bd70      	pop	{r4, r5, r6, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	20000324 	.word	0x20000324

08007300 <__malloc_lock>:
 8007300:	b510      	push	{r4, lr}
 8007302:	4802      	ldr	r0, [pc, #8]	; (800730c <__malloc_lock+0xc>)
 8007304:	f000 f814 	bl	8007330 <__retarget_lock_acquire_recursive>
 8007308:	bd10      	pop	{r4, pc}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	2000032c 	.word	0x2000032c

08007310 <__malloc_unlock>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4802      	ldr	r0, [pc, #8]	; (800731c <__malloc_unlock+0xc>)
 8007314:	f000 f80d 	bl	8007332 <__retarget_lock_release_recursive>
 8007318:	bd10      	pop	{r4, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	2000032c 	.word	0x2000032c

08007320 <_malloc_usable_size_r>:
 8007320:	1f0b      	subs	r3, r1, #4
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	1f18      	subs	r0, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	da01      	bge.n	800732e <_malloc_usable_size_r+0xe>
 800732a:	580b      	ldr	r3, [r1, r0]
 800732c:	18c0      	adds	r0, r0, r3
 800732e:	4770      	bx	lr

08007330 <__retarget_lock_acquire_recursive>:
 8007330:	4770      	bx	lr

08007332 <__retarget_lock_release_recursive>:
 8007332:	4770      	bx	lr

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
