
Line Follower V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c30  08006c30  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006c30  08006c30  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c30  08006c30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000010  08006c48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08006c48  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f28d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef8  00000000  00000000  0002f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000311c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00031e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128b3  00000000  00000000  00032a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f05e  00000000  00000000  0004532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071d61  00000000  00000000  00054389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c60ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003010  00000000  00000000  000c6140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ac0 	.word	0x08006ac0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08006ac0 	.word	0x08006ac0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fa57 	bl	80016dc <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f979 	bl	800152c <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fde0 	bl	8000e08 <__aeabi_dsub>
 8000248:	f001 f970 	bl	800152c <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_i2f>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	2800      	cmp	r0, #0
 8000260:	d013      	beq.n	800028a <__aeabi_i2f+0x2e>
 8000262:	17c3      	asrs	r3, r0, #31
 8000264:	18c5      	adds	r5, r0, r3
 8000266:	405d      	eors	r5, r3
 8000268:	0fc4      	lsrs	r4, r0, #31
 800026a:	0028      	movs	r0, r5
 800026c:	f001 fa40 	bl	80016f0 <__clzsi2>
 8000270:	239e      	movs	r3, #158	; 0x9e
 8000272:	0001      	movs	r1, r0
 8000274:	1a1b      	subs	r3, r3, r0
 8000276:	2b96      	cmp	r3, #150	; 0x96
 8000278:	dc0f      	bgt.n	800029a <__aeabi_i2f+0x3e>
 800027a:	2808      	cmp	r0, #8
 800027c:	dd01      	ble.n	8000282 <__aeabi_i2f+0x26>
 800027e:	3908      	subs	r1, #8
 8000280:	408d      	lsls	r5, r1
 8000282:	026d      	lsls	r5, r5, #9
 8000284:	0a6d      	lsrs	r5, r5, #9
 8000286:	b2d8      	uxtb	r0, r3
 8000288:	e002      	b.n	8000290 <__aeabi_i2f+0x34>
 800028a:	2400      	movs	r4, #0
 800028c:	2000      	movs	r0, #0
 800028e:	2500      	movs	r5, #0
 8000290:	05c0      	lsls	r0, r0, #23
 8000292:	4328      	orrs	r0, r5
 8000294:	07e4      	lsls	r4, r4, #31
 8000296:	4320      	orrs	r0, r4
 8000298:	bd70      	pop	{r4, r5, r6, pc}
 800029a:	2b99      	cmp	r3, #153	; 0x99
 800029c:	dd0b      	ble.n	80002b6 <__aeabi_i2f+0x5a>
 800029e:	2205      	movs	r2, #5
 80002a0:	002e      	movs	r6, r5
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	40d6      	lsrs	r6, r2
 80002a6:	0002      	movs	r2, r0
 80002a8:	321b      	adds	r2, #27
 80002aa:	4095      	lsls	r5, r2
 80002ac:	0028      	movs	r0, r5
 80002ae:	1e45      	subs	r5, r0, #1
 80002b0:	41a8      	sbcs	r0, r5
 80002b2:	0035      	movs	r5, r6
 80002b4:	4305      	orrs	r5, r0
 80002b6:	2905      	cmp	r1, #5
 80002b8:	dd01      	ble.n	80002be <__aeabi_i2f+0x62>
 80002ba:	1f4a      	subs	r2, r1, #5
 80002bc:	4095      	lsls	r5, r2
 80002be:	002a      	movs	r2, r5
 80002c0:	4e08      	ldr	r6, [pc, #32]	; (80002e4 <__aeabi_i2f+0x88>)
 80002c2:	4032      	ands	r2, r6
 80002c4:	0768      	lsls	r0, r5, #29
 80002c6:	d009      	beq.n	80002dc <__aeabi_i2f+0x80>
 80002c8:	200f      	movs	r0, #15
 80002ca:	4028      	ands	r0, r5
 80002cc:	2804      	cmp	r0, #4
 80002ce:	d005      	beq.n	80002dc <__aeabi_i2f+0x80>
 80002d0:	3204      	adds	r2, #4
 80002d2:	0150      	lsls	r0, r2, #5
 80002d4:	d502      	bpl.n	80002dc <__aeabi_i2f+0x80>
 80002d6:	239f      	movs	r3, #159	; 0x9f
 80002d8:	4032      	ands	r2, r6
 80002da:	1a5b      	subs	r3, r3, r1
 80002dc:	0192      	lsls	r2, r2, #6
 80002de:	0a55      	lsrs	r5, r2, #9
 80002e0:	b2d8      	uxtb	r0, r3
 80002e2:	e7d5      	b.n	8000290 <__aeabi_i2f+0x34>
 80002e4:	fbffffff 	.word	0xfbffffff

080002e8 <__aeabi_ui2f>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	1e05      	subs	r5, r0, #0
 80002ec:	d00e      	beq.n	800030c <__aeabi_ui2f+0x24>
 80002ee:	f001 f9ff 	bl	80016f0 <__clzsi2>
 80002f2:	239e      	movs	r3, #158	; 0x9e
 80002f4:	0004      	movs	r4, r0
 80002f6:	1a1b      	subs	r3, r3, r0
 80002f8:	2b96      	cmp	r3, #150	; 0x96
 80002fa:	dc0c      	bgt.n	8000316 <__aeabi_ui2f+0x2e>
 80002fc:	2808      	cmp	r0, #8
 80002fe:	dd01      	ble.n	8000304 <__aeabi_ui2f+0x1c>
 8000300:	3c08      	subs	r4, #8
 8000302:	40a5      	lsls	r5, r4
 8000304:	026d      	lsls	r5, r5, #9
 8000306:	0a6d      	lsrs	r5, r5, #9
 8000308:	b2d8      	uxtb	r0, r3
 800030a:	e001      	b.n	8000310 <__aeabi_ui2f+0x28>
 800030c:	2000      	movs	r0, #0
 800030e:	2500      	movs	r5, #0
 8000310:	05c0      	lsls	r0, r0, #23
 8000312:	4328      	orrs	r0, r5
 8000314:	bd70      	pop	{r4, r5, r6, pc}
 8000316:	2b99      	cmp	r3, #153	; 0x99
 8000318:	dd09      	ble.n	800032e <__aeabi_ui2f+0x46>
 800031a:	0002      	movs	r2, r0
 800031c:	0029      	movs	r1, r5
 800031e:	321b      	adds	r2, #27
 8000320:	4091      	lsls	r1, r2
 8000322:	1e4a      	subs	r2, r1, #1
 8000324:	4191      	sbcs	r1, r2
 8000326:	2205      	movs	r2, #5
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	40d5      	lsrs	r5, r2
 800032c:	430d      	orrs	r5, r1
 800032e:	2c05      	cmp	r4, #5
 8000330:	dd01      	ble.n	8000336 <__aeabi_ui2f+0x4e>
 8000332:	1f62      	subs	r2, r4, #5
 8000334:	4095      	lsls	r5, r2
 8000336:	0029      	movs	r1, r5
 8000338:	4e08      	ldr	r6, [pc, #32]	; (800035c <__aeabi_ui2f+0x74>)
 800033a:	4031      	ands	r1, r6
 800033c:	076a      	lsls	r2, r5, #29
 800033e:	d009      	beq.n	8000354 <__aeabi_ui2f+0x6c>
 8000340:	200f      	movs	r0, #15
 8000342:	4028      	ands	r0, r5
 8000344:	2804      	cmp	r0, #4
 8000346:	d005      	beq.n	8000354 <__aeabi_ui2f+0x6c>
 8000348:	3104      	adds	r1, #4
 800034a:	014a      	lsls	r2, r1, #5
 800034c:	d502      	bpl.n	8000354 <__aeabi_ui2f+0x6c>
 800034e:	239f      	movs	r3, #159	; 0x9f
 8000350:	4031      	ands	r1, r6
 8000352:	1b1b      	subs	r3, r3, r4
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	0a4d      	lsrs	r5, r1, #9
 8000358:	b2d8      	uxtb	r0, r3
 800035a:	e7d9      	b.n	8000310 <__aeabi_ui2f+0x28>
 800035c:	fbffffff 	.word	0xfbffffff

08000360 <__aeabi_ddiv>:
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	4657      	mov	r7, sl
 8000364:	464e      	mov	r6, r9
 8000366:	4645      	mov	r5, r8
 8000368:	46de      	mov	lr, fp
 800036a:	b5e0      	push	{r5, r6, r7, lr}
 800036c:	4681      	mov	r9, r0
 800036e:	0005      	movs	r5, r0
 8000370:	030c      	lsls	r4, r1, #12
 8000372:	0048      	lsls	r0, r1, #1
 8000374:	4692      	mov	sl, r2
 8000376:	001f      	movs	r7, r3
 8000378:	b085      	sub	sp, #20
 800037a:	0b24      	lsrs	r4, r4, #12
 800037c:	0d40      	lsrs	r0, r0, #21
 800037e:	0fce      	lsrs	r6, r1, #31
 8000380:	2800      	cmp	r0, #0
 8000382:	d059      	beq.n	8000438 <__aeabi_ddiv+0xd8>
 8000384:	4b87      	ldr	r3, [pc, #540]	; (80005a4 <__aeabi_ddiv+0x244>)
 8000386:	4298      	cmp	r0, r3
 8000388:	d100      	bne.n	800038c <__aeabi_ddiv+0x2c>
 800038a:	e098      	b.n	80004be <__aeabi_ddiv+0x15e>
 800038c:	0f6b      	lsrs	r3, r5, #29
 800038e:	00e4      	lsls	r4, r4, #3
 8000390:	431c      	orrs	r4, r3
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	041b      	lsls	r3, r3, #16
 8000396:	4323      	orrs	r3, r4
 8000398:	4698      	mov	r8, r3
 800039a:	4b83      	ldr	r3, [pc, #524]	; (80005a8 <__aeabi_ddiv+0x248>)
 800039c:	00ed      	lsls	r5, r5, #3
 800039e:	469b      	mov	fp, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	4699      	mov	r9, r3
 80003a4:	4483      	add	fp, r0
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	033c      	lsls	r4, r7, #12
 80003aa:	007b      	lsls	r3, r7, #1
 80003ac:	4650      	mov	r0, sl
 80003ae:	0b24      	lsrs	r4, r4, #12
 80003b0:	0d5b      	lsrs	r3, r3, #21
 80003b2:	0fff      	lsrs	r7, r7, #31
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d067      	beq.n	8000488 <__aeabi_ddiv+0x128>
 80003b8:	4a7a      	ldr	r2, [pc, #488]	; (80005a4 <__aeabi_ddiv+0x244>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d018      	beq.n	80003f0 <__aeabi_ddiv+0x90>
 80003be:	497a      	ldr	r1, [pc, #488]	; (80005a8 <__aeabi_ddiv+0x248>)
 80003c0:	0f42      	lsrs	r2, r0, #29
 80003c2:	468c      	mov	ip, r1
 80003c4:	00e4      	lsls	r4, r4, #3
 80003c6:	4659      	mov	r1, fp
 80003c8:	4314      	orrs	r4, r2
 80003ca:	2280      	movs	r2, #128	; 0x80
 80003cc:	4463      	add	r3, ip
 80003ce:	0412      	lsls	r2, r2, #16
 80003d0:	1acb      	subs	r3, r1, r3
 80003d2:	4314      	orrs	r4, r2
 80003d4:	469b      	mov	fp, r3
 80003d6:	00c2      	lsls	r2, r0, #3
 80003d8:	2000      	movs	r0, #0
 80003da:	0033      	movs	r3, r6
 80003dc:	407b      	eors	r3, r7
 80003de:	469a      	mov	sl, r3
 80003e0:	464b      	mov	r3, r9
 80003e2:	2b0f      	cmp	r3, #15
 80003e4:	d900      	bls.n	80003e8 <__aeabi_ddiv+0x88>
 80003e6:	e0ef      	b.n	80005c8 <__aeabi_ddiv+0x268>
 80003e8:	4970      	ldr	r1, [pc, #448]	; (80005ac <__aeabi_ddiv+0x24c>)
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	58cb      	ldr	r3, [r1, r3]
 80003ee:	469f      	mov	pc, r3
 80003f0:	4b6f      	ldr	r3, [pc, #444]	; (80005b0 <__aeabi_ddiv+0x250>)
 80003f2:	4652      	mov	r2, sl
 80003f4:	469c      	mov	ip, r3
 80003f6:	4322      	orrs	r2, r4
 80003f8:	44e3      	add	fp, ip
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	d000      	beq.n	8000400 <__aeabi_ddiv+0xa0>
 80003fe:	e095      	b.n	800052c <__aeabi_ddiv+0x1cc>
 8000400:	4649      	mov	r1, r9
 8000402:	2302      	movs	r3, #2
 8000404:	4319      	orrs	r1, r3
 8000406:	4689      	mov	r9, r1
 8000408:	2400      	movs	r4, #0
 800040a:	2002      	movs	r0, #2
 800040c:	e7e5      	b.n	80003da <__aeabi_ddiv+0x7a>
 800040e:	2300      	movs	r3, #0
 8000410:	2400      	movs	r4, #0
 8000412:	2500      	movs	r5, #0
 8000414:	4652      	mov	r2, sl
 8000416:	051b      	lsls	r3, r3, #20
 8000418:	4323      	orrs	r3, r4
 800041a:	07d2      	lsls	r2, r2, #31
 800041c:	4313      	orrs	r3, r2
 800041e:	0028      	movs	r0, r5
 8000420:	0019      	movs	r1, r3
 8000422:	b005      	add	sp, #20
 8000424:	bcf0      	pop	{r4, r5, r6, r7}
 8000426:	46bb      	mov	fp, r7
 8000428:	46b2      	mov	sl, r6
 800042a:	46a9      	mov	r9, r5
 800042c:	46a0      	mov	r8, r4
 800042e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000430:	2400      	movs	r4, #0
 8000432:	2500      	movs	r5, #0
 8000434:	4b5b      	ldr	r3, [pc, #364]	; (80005a4 <__aeabi_ddiv+0x244>)
 8000436:	e7ed      	b.n	8000414 <__aeabi_ddiv+0xb4>
 8000438:	464b      	mov	r3, r9
 800043a:	4323      	orrs	r3, r4
 800043c:	4698      	mov	r8, r3
 800043e:	d100      	bne.n	8000442 <__aeabi_ddiv+0xe2>
 8000440:	e089      	b.n	8000556 <__aeabi_ddiv+0x1f6>
 8000442:	2c00      	cmp	r4, #0
 8000444:	d100      	bne.n	8000448 <__aeabi_ddiv+0xe8>
 8000446:	e1e0      	b.n	800080a <__aeabi_ddiv+0x4aa>
 8000448:	0020      	movs	r0, r4
 800044a:	f001 f951 	bl	80016f0 <__clzsi2>
 800044e:	0001      	movs	r1, r0
 8000450:	0002      	movs	r2, r0
 8000452:	390b      	subs	r1, #11
 8000454:	231d      	movs	r3, #29
 8000456:	1a5b      	subs	r3, r3, r1
 8000458:	4649      	mov	r1, r9
 800045a:	0010      	movs	r0, r2
 800045c:	40d9      	lsrs	r1, r3
 800045e:	3808      	subs	r0, #8
 8000460:	4084      	lsls	r4, r0
 8000462:	000b      	movs	r3, r1
 8000464:	464d      	mov	r5, r9
 8000466:	4323      	orrs	r3, r4
 8000468:	4698      	mov	r8, r3
 800046a:	4085      	lsls	r5, r0
 800046c:	4851      	ldr	r0, [pc, #324]	; (80005b4 <__aeabi_ddiv+0x254>)
 800046e:	033c      	lsls	r4, r7, #12
 8000470:	1a83      	subs	r3, r0, r2
 8000472:	469b      	mov	fp, r3
 8000474:	2300      	movs	r3, #0
 8000476:	4699      	mov	r9, r3
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	007b      	lsls	r3, r7, #1
 800047c:	4650      	mov	r0, sl
 800047e:	0b24      	lsrs	r4, r4, #12
 8000480:	0d5b      	lsrs	r3, r3, #21
 8000482:	0fff      	lsrs	r7, r7, #31
 8000484:	2b00      	cmp	r3, #0
 8000486:	d197      	bne.n	80003b8 <__aeabi_ddiv+0x58>
 8000488:	4652      	mov	r2, sl
 800048a:	4322      	orrs	r2, r4
 800048c:	d055      	beq.n	800053a <__aeabi_ddiv+0x1da>
 800048e:	2c00      	cmp	r4, #0
 8000490:	d100      	bne.n	8000494 <__aeabi_ddiv+0x134>
 8000492:	e1ca      	b.n	800082a <__aeabi_ddiv+0x4ca>
 8000494:	0020      	movs	r0, r4
 8000496:	f001 f92b 	bl	80016f0 <__clzsi2>
 800049a:	0002      	movs	r2, r0
 800049c:	3a0b      	subs	r2, #11
 800049e:	231d      	movs	r3, #29
 80004a0:	0001      	movs	r1, r0
 80004a2:	1a9b      	subs	r3, r3, r2
 80004a4:	4652      	mov	r2, sl
 80004a6:	3908      	subs	r1, #8
 80004a8:	40da      	lsrs	r2, r3
 80004aa:	408c      	lsls	r4, r1
 80004ac:	4314      	orrs	r4, r2
 80004ae:	4652      	mov	r2, sl
 80004b0:	408a      	lsls	r2, r1
 80004b2:	4b41      	ldr	r3, [pc, #260]	; (80005b8 <__aeabi_ddiv+0x258>)
 80004b4:	4458      	add	r0, fp
 80004b6:	469b      	mov	fp, r3
 80004b8:	4483      	add	fp, r0
 80004ba:	2000      	movs	r0, #0
 80004bc:	e78d      	b.n	80003da <__aeabi_ddiv+0x7a>
 80004be:	464b      	mov	r3, r9
 80004c0:	4323      	orrs	r3, r4
 80004c2:	4698      	mov	r8, r3
 80004c4:	d140      	bne.n	8000548 <__aeabi_ddiv+0x1e8>
 80004c6:	2308      	movs	r3, #8
 80004c8:	4699      	mov	r9, r3
 80004ca:	3b06      	subs	r3, #6
 80004cc:	2500      	movs	r5, #0
 80004ce:	4683      	mov	fp, r0
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	e769      	b.n	80003a8 <__aeabi_ddiv+0x48>
 80004d4:	46b2      	mov	sl, r6
 80004d6:	9b00      	ldr	r3, [sp, #0]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d0a9      	beq.n	8000430 <__aeabi_ddiv+0xd0>
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d100      	bne.n	80004e2 <__aeabi_ddiv+0x182>
 80004e0:	e211      	b.n	8000906 <__aeabi_ddiv+0x5a6>
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d093      	beq.n	800040e <__aeabi_ddiv+0xae>
 80004e6:	4a35      	ldr	r2, [pc, #212]	; (80005bc <__aeabi_ddiv+0x25c>)
 80004e8:	445a      	add	r2, fp
 80004ea:	2a00      	cmp	r2, #0
 80004ec:	dc00      	bgt.n	80004f0 <__aeabi_ddiv+0x190>
 80004ee:	e13c      	b.n	800076a <__aeabi_ddiv+0x40a>
 80004f0:	076b      	lsls	r3, r5, #29
 80004f2:	d000      	beq.n	80004f6 <__aeabi_ddiv+0x196>
 80004f4:	e1a7      	b.n	8000846 <__aeabi_ddiv+0x4e6>
 80004f6:	08ed      	lsrs	r5, r5, #3
 80004f8:	4643      	mov	r3, r8
 80004fa:	01db      	lsls	r3, r3, #7
 80004fc:	d506      	bpl.n	800050c <__aeabi_ddiv+0x1ac>
 80004fe:	4642      	mov	r2, r8
 8000500:	4b2f      	ldr	r3, [pc, #188]	; (80005c0 <__aeabi_ddiv+0x260>)
 8000502:	401a      	ands	r2, r3
 8000504:	4690      	mov	r8, r2
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	00d2      	lsls	r2, r2, #3
 800050a:	445a      	add	r2, fp
 800050c:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <__aeabi_ddiv+0x264>)
 800050e:	429a      	cmp	r2, r3
 8000510:	dc8e      	bgt.n	8000430 <__aeabi_ddiv+0xd0>
 8000512:	4643      	mov	r3, r8
 8000514:	0552      	lsls	r2, r2, #21
 8000516:	0758      	lsls	r0, r3, #29
 8000518:	025c      	lsls	r4, r3, #9
 800051a:	4305      	orrs	r5, r0
 800051c:	0b24      	lsrs	r4, r4, #12
 800051e:	0d53      	lsrs	r3, r2, #21
 8000520:	e778      	b.n	8000414 <__aeabi_ddiv+0xb4>
 8000522:	46ba      	mov	sl, r7
 8000524:	46a0      	mov	r8, r4
 8000526:	0015      	movs	r5, r2
 8000528:	9000      	str	r0, [sp, #0]
 800052a:	e7d4      	b.n	80004d6 <__aeabi_ddiv+0x176>
 800052c:	464a      	mov	r2, r9
 800052e:	2303      	movs	r3, #3
 8000530:	431a      	orrs	r2, r3
 8000532:	4691      	mov	r9, r2
 8000534:	2003      	movs	r0, #3
 8000536:	4652      	mov	r2, sl
 8000538:	e74f      	b.n	80003da <__aeabi_ddiv+0x7a>
 800053a:	4649      	mov	r1, r9
 800053c:	2301      	movs	r3, #1
 800053e:	4319      	orrs	r1, r3
 8000540:	4689      	mov	r9, r1
 8000542:	2400      	movs	r4, #0
 8000544:	2001      	movs	r0, #1
 8000546:	e748      	b.n	80003da <__aeabi_ddiv+0x7a>
 8000548:	230c      	movs	r3, #12
 800054a:	4699      	mov	r9, r3
 800054c:	3b09      	subs	r3, #9
 800054e:	46a0      	mov	r8, r4
 8000550:	4683      	mov	fp, r0
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	e728      	b.n	80003a8 <__aeabi_ddiv+0x48>
 8000556:	2304      	movs	r3, #4
 8000558:	4699      	mov	r9, r3
 800055a:	2300      	movs	r3, #0
 800055c:	469b      	mov	fp, r3
 800055e:	3301      	adds	r3, #1
 8000560:	2500      	movs	r5, #0
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	e720      	b.n	80003a8 <__aeabi_ddiv+0x48>
 8000566:	2300      	movs	r3, #0
 8000568:	2480      	movs	r4, #128	; 0x80
 800056a:	469a      	mov	sl, r3
 800056c:	2500      	movs	r5, #0
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <__aeabi_ddiv+0x244>)
 8000570:	0324      	lsls	r4, r4, #12
 8000572:	e74f      	b.n	8000414 <__aeabi_ddiv+0xb4>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	4641      	mov	r1, r8
 8000578:	031b      	lsls	r3, r3, #12
 800057a:	4219      	tst	r1, r3
 800057c:	d008      	beq.n	8000590 <__aeabi_ddiv+0x230>
 800057e:	421c      	tst	r4, r3
 8000580:	d106      	bne.n	8000590 <__aeabi_ddiv+0x230>
 8000582:	431c      	orrs	r4, r3
 8000584:	0324      	lsls	r4, r4, #12
 8000586:	46ba      	mov	sl, r7
 8000588:	0015      	movs	r5, r2
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <__aeabi_ddiv+0x244>)
 800058c:	0b24      	lsrs	r4, r4, #12
 800058e:	e741      	b.n	8000414 <__aeabi_ddiv+0xb4>
 8000590:	2480      	movs	r4, #128	; 0x80
 8000592:	4643      	mov	r3, r8
 8000594:	0324      	lsls	r4, r4, #12
 8000596:	431c      	orrs	r4, r3
 8000598:	0324      	lsls	r4, r4, #12
 800059a:	46b2      	mov	sl, r6
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <__aeabi_ddiv+0x244>)
 800059e:	0b24      	lsrs	r4, r4, #12
 80005a0:	e738      	b.n	8000414 <__aeabi_ddiv+0xb4>
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	000007ff 	.word	0x000007ff
 80005a8:	fffffc01 	.word	0xfffffc01
 80005ac:	08006b58 	.word	0x08006b58
 80005b0:	fffff801 	.word	0xfffff801
 80005b4:	fffffc0d 	.word	0xfffffc0d
 80005b8:	000003f3 	.word	0x000003f3
 80005bc:	000003ff 	.word	0x000003ff
 80005c0:	feffffff 	.word	0xfeffffff
 80005c4:	000007fe 	.word	0x000007fe
 80005c8:	4544      	cmp	r4, r8
 80005ca:	d200      	bcs.n	80005ce <__aeabi_ddiv+0x26e>
 80005cc:	e116      	b.n	80007fc <__aeabi_ddiv+0x49c>
 80005ce:	d100      	bne.n	80005d2 <__aeabi_ddiv+0x272>
 80005d0:	e111      	b.n	80007f6 <__aeabi_ddiv+0x496>
 80005d2:	2301      	movs	r3, #1
 80005d4:	425b      	negs	r3, r3
 80005d6:	469c      	mov	ip, r3
 80005d8:	002e      	movs	r6, r5
 80005da:	4640      	mov	r0, r8
 80005dc:	2500      	movs	r5, #0
 80005de:	44e3      	add	fp, ip
 80005e0:	0223      	lsls	r3, r4, #8
 80005e2:	0e14      	lsrs	r4, r2, #24
 80005e4:	431c      	orrs	r4, r3
 80005e6:	0c1b      	lsrs	r3, r3, #16
 80005e8:	4699      	mov	r9, r3
 80005ea:	0423      	lsls	r3, r4, #16
 80005ec:	0c1f      	lsrs	r7, r3, #16
 80005ee:	0212      	lsls	r2, r2, #8
 80005f0:	4649      	mov	r1, r9
 80005f2:	9200      	str	r2, [sp, #0]
 80005f4:	9701      	str	r7, [sp, #4]
 80005f6:	f7ff fe0d 	bl	8000214 <__aeabi_uidivmod>
 80005fa:	0002      	movs	r2, r0
 80005fc:	437a      	muls	r2, r7
 80005fe:	040b      	lsls	r3, r1, #16
 8000600:	0c31      	lsrs	r1, r6, #16
 8000602:	4680      	mov	r8, r0
 8000604:	4319      	orrs	r1, r3
 8000606:	428a      	cmp	r2, r1
 8000608:	d90b      	bls.n	8000622 <__aeabi_ddiv+0x2c2>
 800060a:	2301      	movs	r3, #1
 800060c:	425b      	negs	r3, r3
 800060e:	469c      	mov	ip, r3
 8000610:	1909      	adds	r1, r1, r4
 8000612:	44e0      	add	r8, ip
 8000614:	428c      	cmp	r4, r1
 8000616:	d804      	bhi.n	8000622 <__aeabi_ddiv+0x2c2>
 8000618:	428a      	cmp	r2, r1
 800061a:	d902      	bls.n	8000622 <__aeabi_ddiv+0x2c2>
 800061c:	1e83      	subs	r3, r0, #2
 800061e:	4698      	mov	r8, r3
 8000620:	1909      	adds	r1, r1, r4
 8000622:	1a88      	subs	r0, r1, r2
 8000624:	4649      	mov	r1, r9
 8000626:	f7ff fdf5 	bl	8000214 <__aeabi_uidivmod>
 800062a:	0409      	lsls	r1, r1, #16
 800062c:	468c      	mov	ip, r1
 800062e:	0431      	lsls	r1, r6, #16
 8000630:	4666      	mov	r6, ip
 8000632:	9a01      	ldr	r2, [sp, #4]
 8000634:	0c09      	lsrs	r1, r1, #16
 8000636:	4342      	muls	r2, r0
 8000638:	0003      	movs	r3, r0
 800063a:	4331      	orrs	r1, r6
 800063c:	428a      	cmp	r2, r1
 800063e:	d904      	bls.n	800064a <__aeabi_ddiv+0x2ea>
 8000640:	1909      	adds	r1, r1, r4
 8000642:	3b01      	subs	r3, #1
 8000644:	428c      	cmp	r4, r1
 8000646:	d800      	bhi.n	800064a <__aeabi_ddiv+0x2ea>
 8000648:	e111      	b.n	800086e <__aeabi_ddiv+0x50e>
 800064a:	1a89      	subs	r1, r1, r2
 800064c:	4642      	mov	r2, r8
 800064e:	9e00      	ldr	r6, [sp, #0]
 8000650:	0412      	lsls	r2, r2, #16
 8000652:	431a      	orrs	r2, r3
 8000654:	0c33      	lsrs	r3, r6, #16
 8000656:	001f      	movs	r7, r3
 8000658:	0c10      	lsrs	r0, r2, #16
 800065a:	4690      	mov	r8, r2
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	0413      	lsls	r3, r2, #16
 8000660:	0432      	lsls	r2, r6, #16
 8000662:	0c16      	lsrs	r6, r2, #16
 8000664:	0032      	movs	r2, r6
 8000666:	0c1b      	lsrs	r3, r3, #16
 8000668:	435a      	muls	r2, r3
 800066a:	9603      	str	r6, [sp, #12]
 800066c:	437b      	muls	r3, r7
 800066e:	4346      	muls	r6, r0
 8000670:	4378      	muls	r0, r7
 8000672:	0c17      	lsrs	r7, r2, #16
 8000674:	46bc      	mov	ip, r7
 8000676:	199b      	adds	r3, r3, r6
 8000678:	4463      	add	r3, ip
 800067a:	429e      	cmp	r6, r3
 800067c:	d903      	bls.n	8000686 <__aeabi_ddiv+0x326>
 800067e:	2680      	movs	r6, #128	; 0x80
 8000680:	0276      	lsls	r6, r6, #9
 8000682:	46b4      	mov	ip, r6
 8000684:	4460      	add	r0, ip
 8000686:	0c1e      	lsrs	r6, r3, #16
 8000688:	1830      	adds	r0, r6, r0
 800068a:	0416      	lsls	r6, r2, #16
 800068c:	041b      	lsls	r3, r3, #16
 800068e:	0c36      	lsrs	r6, r6, #16
 8000690:	199e      	adds	r6, r3, r6
 8000692:	4281      	cmp	r1, r0
 8000694:	d200      	bcs.n	8000698 <__aeabi_ddiv+0x338>
 8000696:	e09c      	b.n	80007d2 <__aeabi_ddiv+0x472>
 8000698:	d100      	bne.n	800069c <__aeabi_ddiv+0x33c>
 800069a:	e097      	b.n	80007cc <__aeabi_ddiv+0x46c>
 800069c:	1bae      	subs	r6, r5, r6
 800069e:	1a09      	subs	r1, r1, r0
 80006a0:	42b5      	cmp	r5, r6
 80006a2:	4180      	sbcs	r0, r0
 80006a4:	4240      	negs	r0, r0
 80006a6:	1a08      	subs	r0, r1, r0
 80006a8:	4284      	cmp	r4, r0
 80006aa:	d100      	bne.n	80006ae <__aeabi_ddiv+0x34e>
 80006ac:	e111      	b.n	80008d2 <__aeabi_ddiv+0x572>
 80006ae:	4649      	mov	r1, r9
 80006b0:	f7ff fdb0 	bl	8000214 <__aeabi_uidivmod>
 80006b4:	9a01      	ldr	r2, [sp, #4]
 80006b6:	040b      	lsls	r3, r1, #16
 80006b8:	4342      	muls	r2, r0
 80006ba:	0c31      	lsrs	r1, r6, #16
 80006bc:	0005      	movs	r5, r0
 80006be:	4319      	orrs	r1, r3
 80006c0:	428a      	cmp	r2, r1
 80006c2:	d907      	bls.n	80006d4 <__aeabi_ddiv+0x374>
 80006c4:	1909      	adds	r1, r1, r4
 80006c6:	3d01      	subs	r5, #1
 80006c8:	428c      	cmp	r4, r1
 80006ca:	d803      	bhi.n	80006d4 <__aeabi_ddiv+0x374>
 80006cc:	428a      	cmp	r2, r1
 80006ce:	d901      	bls.n	80006d4 <__aeabi_ddiv+0x374>
 80006d0:	1e85      	subs	r5, r0, #2
 80006d2:	1909      	adds	r1, r1, r4
 80006d4:	1a88      	subs	r0, r1, r2
 80006d6:	4649      	mov	r1, r9
 80006d8:	f7ff fd9c 	bl	8000214 <__aeabi_uidivmod>
 80006dc:	0409      	lsls	r1, r1, #16
 80006de:	468c      	mov	ip, r1
 80006e0:	0431      	lsls	r1, r6, #16
 80006e2:	4666      	mov	r6, ip
 80006e4:	9a01      	ldr	r2, [sp, #4]
 80006e6:	0c09      	lsrs	r1, r1, #16
 80006e8:	4342      	muls	r2, r0
 80006ea:	0003      	movs	r3, r0
 80006ec:	4331      	orrs	r1, r6
 80006ee:	428a      	cmp	r2, r1
 80006f0:	d907      	bls.n	8000702 <__aeabi_ddiv+0x3a2>
 80006f2:	1909      	adds	r1, r1, r4
 80006f4:	3b01      	subs	r3, #1
 80006f6:	428c      	cmp	r4, r1
 80006f8:	d803      	bhi.n	8000702 <__aeabi_ddiv+0x3a2>
 80006fa:	428a      	cmp	r2, r1
 80006fc:	d901      	bls.n	8000702 <__aeabi_ddiv+0x3a2>
 80006fe:	1e83      	subs	r3, r0, #2
 8000700:	1909      	adds	r1, r1, r4
 8000702:	9e03      	ldr	r6, [sp, #12]
 8000704:	1a89      	subs	r1, r1, r2
 8000706:	0032      	movs	r2, r6
 8000708:	042d      	lsls	r5, r5, #16
 800070a:	431d      	orrs	r5, r3
 800070c:	9f02      	ldr	r7, [sp, #8]
 800070e:	042b      	lsls	r3, r5, #16
 8000710:	0c1b      	lsrs	r3, r3, #16
 8000712:	435a      	muls	r2, r3
 8000714:	437b      	muls	r3, r7
 8000716:	469c      	mov	ip, r3
 8000718:	0c28      	lsrs	r0, r5, #16
 800071a:	4346      	muls	r6, r0
 800071c:	0c13      	lsrs	r3, r2, #16
 800071e:	44b4      	add	ip, r6
 8000720:	4463      	add	r3, ip
 8000722:	4378      	muls	r0, r7
 8000724:	429e      	cmp	r6, r3
 8000726:	d903      	bls.n	8000730 <__aeabi_ddiv+0x3d0>
 8000728:	2680      	movs	r6, #128	; 0x80
 800072a:	0276      	lsls	r6, r6, #9
 800072c:	46b4      	mov	ip, r6
 800072e:	4460      	add	r0, ip
 8000730:	0c1e      	lsrs	r6, r3, #16
 8000732:	0412      	lsls	r2, r2, #16
 8000734:	041b      	lsls	r3, r3, #16
 8000736:	0c12      	lsrs	r2, r2, #16
 8000738:	1830      	adds	r0, r6, r0
 800073a:	189b      	adds	r3, r3, r2
 800073c:	4281      	cmp	r1, r0
 800073e:	d306      	bcc.n	800074e <__aeabi_ddiv+0x3ee>
 8000740:	d002      	beq.n	8000748 <__aeabi_ddiv+0x3e8>
 8000742:	2301      	movs	r3, #1
 8000744:	431d      	orrs	r5, r3
 8000746:	e6ce      	b.n	80004e6 <__aeabi_ddiv+0x186>
 8000748:	2b00      	cmp	r3, #0
 800074a:	d100      	bne.n	800074e <__aeabi_ddiv+0x3ee>
 800074c:	e6cb      	b.n	80004e6 <__aeabi_ddiv+0x186>
 800074e:	1861      	adds	r1, r4, r1
 8000750:	1e6e      	subs	r6, r5, #1
 8000752:	42a1      	cmp	r1, r4
 8000754:	d200      	bcs.n	8000758 <__aeabi_ddiv+0x3f8>
 8000756:	e0a4      	b.n	80008a2 <__aeabi_ddiv+0x542>
 8000758:	4281      	cmp	r1, r0
 800075a:	d200      	bcs.n	800075e <__aeabi_ddiv+0x3fe>
 800075c:	e0c9      	b.n	80008f2 <__aeabi_ddiv+0x592>
 800075e:	d100      	bne.n	8000762 <__aeabi_ddiv+0x402>
 8000760:	e0d9      	b.n	8000916 <__aeabi_ddiv+0x5b6>
 8000762:	0035      	movs	r5, r6
 8000764:	e7ed      	b.n	8000742 <__aeabi_ddiv+0x3e2>
 8000766:	2501      	movs	r5, #1
 8000768:	426d      	negs	r5, r5
 800076a:	2101      	movs	r1, #1
 800076c:	1a89      	subs	r1, r1, r2
 800076e:	2938      	cmp	r1, #56	; 0x38
 8000770:	dd00      	ble.n	8000774 <__aeabi_ddiv+0x414>
 8000772:	e64c      	b.n	800040e <__aeabi_ddiv+0xae>
 8000774:	291f      	cmp	r1, #31
 8000776:	dc00      	bgt.n	800077a <__aeabi_ddiv+0x41a>
 8000778:	e07f      	b.n	800087a <__aeabi_ddiv+0x51a>
 800077a:	231f      	movs	r3, #31
 800077c:	425b      	negs	r3, r3
 800077e:	1a9a      	subs	r2, r3, r2
 8000780:	4643      	mov	r3, r8
 8000782:	40d3      	lsrs	r3, r2
 8000784:	2920      	cmp	r1, #32
 8000786:	d004      	beq.n	8000792 <__aeabi_ddiv+0x432>
 8000788:	4644      	mov	r4, r8
 800078a:	4a65      	ldr	r2, [pc, #404]	; (8000920 <__aeabi_ddiv+0x5c0>)
 800078c:	445a      	add	r2, fp
 800078e:	4094      	lsls	r4, r2
 8000790:	4325      	orrs	r5, r4
 8000792:	1e6a      	subs	r2, r5, #1
 8000794:	4195      	sbcs	r5, r2
 8000796:	2207      	movs	r2, #7
 8000798:	432b      	orrs	r3, r5
 800079a:	0015      	movs	r5, r2
 800079c:	2400      	movs	r4, #0
 800079e:	401d      	ands	r5, r3
 80007a0:	421a      	tst	r2, r3
 80007a2:	d100      	bne.n	80007a6 <__aeabi_ddiv+0x446>
 80007a4:	e0a1      	b.n	80008ea <__aeabi_ddiv+0x58a>
 80007a6:	220f      	movs	r2, #15
 80007a8:	2400      	movs	r4, #0
 80007aa:	401a      	ands	r2, r3
 80007ac:	2a04      	cmp	r2, #4
 80007ae:	d100      	bne.n	80007b2 <__aeabi_ddiv+0x452>
 80007b0:	e098      	b.n	80008e4 <__aeabi_ddiv+0x584>
 80007b2:	1d1a      	adds	r2, r3, #4
 80007b4:	429a      	cmp	r2, r3
 80007b6:	419b      	sbcs	r3, r3
 80007b8:	425b      	negs	r3, r3
 80007ba:	18e4      	adds	r4, r4, r3
 80007bc:	0013      	movs	r3, r2
 80007be:	0222      	lsls	r2, r4, #8
 80007c0:	d400      	bmi.n	80007c4 <__aeabi_ddiv+0x464>
 80007c2:	e08f      	b.n	80008e4 <__aeabi_ddiv+0x584>
 80007c4:	2301      	movs	r3, #1
 80007c6:	2400      	movs	r4, #0
 80007c8:	2500      	movs	r5, #0
 80007ca:	e623      	b.n	8000414 <__aeabi_ddiv+0xb4>
 80007cc:	42b5      	cmp	r5, r6
 80007ce:	d300      	bcc.n	80007d2 <__aeabi_ddiv+0x472>
 80007d0:	e764      	b.n	800069c <__aeabi_ddiv+0x33c>
 80007d2:	4643      	mov	r3, r8
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	9b00      	ldr	r3, [sp, #0]
 80007d8:	469c      	mov	ip, r3
 80007da:	4465      	add	r5, ip
 80007dc:	001f      	movs	r7, r3
 80007de:	429d      	cmp	r5, r3
 80007e0:	419b      	sbcs	r3, r3
 80007e2:	425b      	negs	r3, r3
 80007e4:	191b      	adds	r3, r3, r4
 80007e6:	18c9      	adds	r1, r1, r3
 80007e8:	428c      	cmp	r4, r1
 80007ea:	d23a      	bcs.n	8000862 <__aeabi_ddiv+0x502>
 80007ec:	4288      	cmp	r0, r1
 80007ee:	d863      	bhi.n	80008b8 <__aeabi_ddiv+0x558>
 80007f0:	d060      	beq.n	80008b4 <__aeabi_ddiv+0x554>
 80007f2:	4690      	mov	r8, r2
 80007f4:	e752      	b.n	800069c <__aeabi_ddiv+0x33c>
 80007f6:	42aa      	cmp	r2, r5
 80007f8:	d900      	bls.n	80007fc <__aeabi_ddiv+0x49c>
 80007fa:	e6ea      	b.n	80005d2 <__aeabi_ddiv+0x272>
 80007fc:	4643      	mov	r3, r8
 80007fe:	07de      	lsls	r6, r3, #31
 8000800:	0858      	lsrs	r0, r3, #1
 8000802:	086b      	lsrs	r3, r5, #1
 8000804:	431e      	orrs	r6, r3
 8000806:	07ed      	lsls	r5, r5, #31
 8000808:	e6ea      	b.n	80005e0 <__aeabi_ddiv+0x280>
 800080a:	4648      	mov	r0, r9
 800080c:	f000 ff70 	bl	80016f0 <__clzsi2>
 8000810:	0001      	movs	r1, r0
 8000812:	0002      	movs	r2, r0
 8000814:	3115      	adds	r1, #21
 8000816:	3220      	adds	r2, #32
 8000818:	291c      	cmp	r1, #28
 800081a:	dc00      	bgt.n	800081e <__aeabi_ddiv+0x4be>
 800081c:	e61a      	b.n	8000454 <__aeabi_ddiv+0xf4>
 800081e:	464b      	mov	r3, r9
 8000820:	3808      	subs	r0, #8
 8000822:	4083      	lsls	r3, r0
 8000824:	2500      	movs	r5, #0
 8000826:	4698      	mov	r8, r3
 8000828:	e620      	b.n	800046c <__aeabi_ddiv+0x10c>
 800082a:	f000 ff61 	bl	80016f0 <__clzsi2>
 800082e:	0003      	movs	r3, r0
 8000830:	001a      	movs	r2, r3
 8000832:	3215      	adds	r2, #21
 8000834:	3020      	adds	r0, #32
 8000836:	2a1c      	cmp	r2, #28
 8000838:	dc00      	bgt.n	800083c <__aeabi_ddiv+0x4dc>
 800083a:	e630      	b.n	800049e <__aeabi_ddiv+0x13e>
 800083c:	4654      	mov	r4, sl
 800083e:	3b08      	subs	r3, #8
 8000840:	2200      	movs	r2, #0
 8000842:	409c      	lsls	r4, r3
 8000844:	e635      	b.n	80004b2 <__aeabi_ddiv+0x152>
 8000846:	230f      	movs	r3, #15
 8000848:	402b      	ands	r3, r5
 800084a:	2b04      	cmp	r3, #4
 800084c:	d100      	bne.n	8000850 <__aeabi_ddiv+0x4f0>
 800084e:	e652      	b.n	80004f6 <__aeabi_ddiv+0x196>
 8000850:	2305      	movs	r3, #5
 8000852:	425b      	negs	r3, r3
 8000854:	42ab      	cmp	r3, r5
 8000856:	419b      	sbcs	r3, r3
 8000858:	3504      	adds	r5, #4
 800085a:	425b      	negs	r3, r3
 800085c:	08ed      	lsrs	r5, r5, #3
 800085e:	4498      	add	r8, r3
 8000860:	e64a      	b.n	80004f8 <__aeabi_ddiv+0x198>
 8000862:	428c      	cmp	r4, r1
 8000864:	d1c5      	bne.n	80007f2 <__aeabi_ddiv+0x492>
 8000866:	42af      	cmp	r7, r5
 8000868:	d9c0      	bls.n	80007ec <__aeabi_ddiv+0x48c>
 800086a:	4690      	mov	r8, r2
 800086c:	e716      	b.n	800069c <__aeabi_ddiv+0x33c>
 800086e:	428a      	cmp	r2, r1
 8000870:	d800      	bhi.n	8000874 <__aeabi_ddiv+0x514>
 8000872:	e6ea      	b.n	800064a <__aeabi_ddiv+0x2ea>
 8000874:	1e83      	subs	r3, r0, #2
 8000876:	1909      	adds	r1, r1, r4
 8000878:	e6e7      	b.n	800064a <__aeabi_ddiv+0x2ea>
 800087a:	4a2a      	ldr	r2, [pc, #168]	; (8000924 <__aeabi_ddiv+0x5c4>)
 800087c:	0028      	movs	r0, r5
 800087e:	445a      	add	r2, fp
 8000880:	4643      	mov	r3, r8
 8000882:	4095      	lsls	r5, r2
 8000884:	4093      	lsls	r3, r2
 8000886:	40c8      	lsrs	r0, r1
 8000888:	1e6a      	subs	r2, r5, #1
 800088a:	4195      	sbcs	r5, r2
 800088c:	4644      	mov	r4, r8
 800088e:	4303      	orrs	r3, r0
 8000890:	432b      	orrs	r3, r5
 8000892:	40cc      	lsrs	r4, r1
 8000894:	075a      	lsls	r2, r3, #29
 8000896:	d092      	beq.n	80007be <__aeabi_ddiv+0x45e>
 8000898:	220f      	movs	r2, #15
 800089a:	401a      	ands	r2, r3
 800089c:	2a04      	cmp	r2, #4
 800089e:	d188      	bne.n	80007b2 <__aeabi_ddiv+0x452>
 80008a0:	e78d      	b.n	80007be <__aeabi_ddiv+0x45e>
 80008a2:	0035      	movs	r5, r6
 80008a4:	4281      	cmp	r1, r0
 80008a6:	d000      	beq.n	80008aa <__aeabi_ddiv+0x54a>
 80008a8:	e74b      	b.n	8000742 <__aeabi_ddiv+0x3e2>
 80008aa:	9a00      	ldr	r2, [sp, #0]
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d000      	beq.n	80008b2 <__aeabi_ddiv+0x552>
 80008b0:	e747      	b.n	8000742 <__aeabi_ddiv+0x3e2>
 80008b2:	e618      	b.n	80004e6 <__aeabi_ddiv+0x186>
 80008b4:	42ae      	cmp	r6, r5
 80008b6:	d99c      	bls.n	80007f2 <__aeabi_ddiv+0x492>
 80008b8:	2302      	movs	r3, #2
 80008ba:	425b      	negs	r3, r3
 80008bc:	469c      	mov	ip, r3
 80008be:	9b00      	ldr	r3, [sp, #0]
 80008c0:	44e0      	add	r8, ip
 80008c2:	469c      	mov	ip, r3
 80008c4:	4465      	add	r5, ip
 80008c6:	429d      	cmp	r5, r3
 80008c8:	419b      	sbcs	r3, r3
 80008ca:	425b      	negs	r3, r3
 80008cc:	191b      	adds	r3, r3, r4
 80008ce:	18c9      	adds	r1, r1, r3
 80008d0:	e6e4      	b.n	800069c <__aeabi_ddiv+0x33c>
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <__aeabi_ddiv+0x5c8>)
 80008d4:	445a      	add	r2, fp
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	dc00      	bgt.n	80008dc <__aeabi_ddiv+0x57c>
 80008da:	e744      	b.n	8000766 <__aeabi_ddiv+0x406>
 80008dc:	2301      	movs	r3, #1
 80008de:	2500      	movs	r5, #0
 80008e0:	4498      	add	r8, r3
 80008e2:	e609      	b.n	80004f8 <__aeabi_ddiv+0x198>
 80008e4:	0765      	lsls	r5, r4, #29
 80008e6:	0264      	lsls	r4, r4, #9
 80008e8:	0b24      	lsrs	r4, r4, #12
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	431d      	orrs	r5, r3
 80008ee:	2300      	movs	r3, #0
 80008f0:	e590      	b.n	8000414 <__aeabi_ddiv+0xb4>
 80008f2:	9e00      	ldr	r6, [sp, #0]
 80008f4:	3d02      	subs	r5, #2
 80008f6:	0072      	lsls	r2, r6, #1
 80008f8:	42b2      	cmp	r2, r6
 80008fa:	41bf      	sbcs	r7, r7
 80008fc:	427f      	negs	r7, r7
 80008fe:	193c      	adds	r4, r7, r4
 8000900:	1909      	adds	r1, r1, r4
 8000902:	9200      	str	r2, [sp, #0]
 8000904:	e7ce      	b.n	80008a4 <__aeabi_ddiv+0x544>
 8000906:	2480      	movs	r4, #128	; 0x80
 8000908:	4643      	mov	r3, r8
 800090a:	0324      	lsls	r4, r4, #12
 800090c:	431c      	orrs	r4, r3
 800090e:	0324      	lsls	r4, r4, #12
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <__aeabi_ddiv+0x5cc>)
 8000912:	0b24      	lsrs	r4, r4, #12
 8000914:	e57e      	b.n	8000414 <__aeabi_ddiv+0xb4>
 8000916:	9a00      	ldr	r2, [sp, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3ea      	bcc.n	80008f2 <__aeabi_ddiv+0x592>
 800091c:	0035      	movs	r5, r6
 800091e:	e7c4      	b.n	80008aa <__aeabi_ddiv+0x54a>
 8000920:	0000043e 	.word	0x0000043e
 8000924:	0000041e 	.word	0x0000041e
 8000928:	000003ff 	.word	0x000003ff
 800092c:	000007ff 	.word	0x000007ff

08000930 <__aeabi_dmul>:
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	4657      	mov	r7, sl
 8000934:	464e      	mov	r6, r9
 8000936:	4645      	mov	r5, r8
 8000938:	46de      	mov	lr, fp
 800093a:	b5e0      	push	{r5, r6, r7, lr}
 800093c:	4698      	mov	r8, r3
 800093e:	030c      	lsls	r4, r1, #12
 8000940:	004b      	lsls	r3, r1, #1
 8000942:	0006      	movs	r6, r0
 8000944:	4692      	mov	sl, r2
 8000946:	b087      	sub	sp, #28
 8000948:	0b24      	lsrs	r4, r4, #12
 800094a:	0d5b      	lsrs	r3, r3, #21
 800094c:	0fcf      	lsrs	r7, r1, #31
 800094e:	2b00      	cmp	r3, #0
 8000950:	d06c      	beq.n	8000a2c <__aeabi_dmul+0xfc>
 8000952:	4add      	ldr	r2, [pc, #884]	; (8000cc8 <__aeabi_dmul+0x398>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d100      	bne.n	800095a <__aeabi_dmul+0x2a>
 8000958:	e086      	b.n	8000a68 <__aeabi_dmul+0x138>
 800095a:	0f42      	lsrs	r2, r0, #29
 800095c:	00e4      	lsls	r4, r4, #3
 800095e:	4314      	orrs	r4, r2
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0412      	lsls	r2, r2, #16
 8000964:	4314      	orrs	r4, r2
 8000966:	4ad9      	ldr	r2, [pc, #868]	; (8000ccc <__aeabi_dmul+0x39c>)
 8000968:	00c5      	lsls	r5, r0, #3
 800096a:	4694      	mov	ip, r2
 800096c:	4463      	add	r3, ip
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2300      	movs	r3, #0
 8000972:	4699      	mov	r9, r3
 8000974:	469b      	mov	fp, r3
 8000976:	4643      	mov	r3, r8
 8000978:	4642      	mov	r2, r8
 800097a:	031e      	lsls	r6, r3, #12
 800097c:	0fd2      	lsrs	r2, r2, #31
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4650      	mov	r0, sl
 8000982:	4690      	mov	r8, r2
 8000984:	0b36      	lsrs	r6, r6, #12
 8000986:	0d5b      	lsrs	r3, r3, #21
 8000988:	d100      	bne.n	800098c <__aeabi_dmul+0x5c>
 800098a:	e078      	b.n	8000a7e <__aeabi_dmul+0x14e>
 800098c:	4ace      	ldr	r2, [pc, #824]	; (8000cc8 <__aeabi_dmul+0x398>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d01d      	beq.n	80009ce <__aeabi_dmul+0x9e>
 8000992:	49ce      	ldr	r1, [pc, #824]	; (8000ccc <__aeabi_dmul+0x39c>)
 8000994:	0f42      	lsrs	r2, r0, #29
 8000996:	468c      	mov	ip, r1
 8000998:	9900      	ldr	r1, [sp, #0]
 800099a:	4463      	add	r3, ip
 800099c:	00f6      	lsls	r6, r6, #3
 800099e:	468c      	mov	ip, r1
 80009a0:	4316      	orrs	r6, r2
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	449c      	add	ip, r3
 80009a6:	0412      	lsls	r2, r2, #16
 80009a8:	4663      	mov	r3, ip
 80009aa:	4316      	orrs	r6, r2
 80009ac:	00c2      	lsls	r2, r0, #3
 80009ae:	2000      	movs	r0, #0
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	9900      	ldr	r1, [sp, #0]
 80009b4:	4643      	mov	r3, r8
 80009b6:	3101      	adds	r1, #1
 80009b8:	468c      	mov	ip, r1
 80009ba:	4649      	mov	r1, r9
 80009bc:	407b      	eors	r3, r7
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	290f      	cmp	r1, #15
 80009c2:	d900      	bls.n	80009c6 <__aeabi_dmul+0x96>
 80009c4:	e07e      	b.n	8000ac4 <__aeabi_dmul+0x194>
 80009c6:	4bc2      	ldr	r3, [pc, #776]	; (8000cd0 <__aeabi_dmul+0x3a0>)
 80009c8:	0089      	lsls	r1, r1, #2
 80009ca:	5859      	ldr	r1, [r3, r1]
 80009cc:	468f      	mov	pc, r1
 80009ce:	4652      	mov	r2, sl
 80009d0:	9b00      	ldr	r3, [sp, #0]
 80009d2:	4332      	orrs	r2, r6
 80009d4:	d000      	beq.n	80009d8 <__aeabi_dmul+0xa8>
 80009d6:	e156      	b.n	8000c86 <__aeabi_dmul+0x356>
 80009d8:	49bb      	ldr	r1, [pc, #748]	; (8000cc8 <__aeabi_dmul+0x398>)
 80009da:	2600      	movs	r6, #0
 80009dc:	468c      	mov	ip, r1
 80009de:	4463      	add	r3, ip
 80009e0:	4649      	mov	r1, r9
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2302      	movs	r3, #2
 80009e6:	4319      	orrs	r1, r3
 80009e8:	4689      	mov	r9, r1
 80009ea:	2002      	movs	r0, #2
 80009ec:	e7e1      	b.n	80009b2 <__aeabi_dmul+0x82>
 80009ee:	4643      	mov	r3, r8
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	0034      	movs	r4, r6
 80009f4:	0015      	movs	r5, r2
 80009f6:	4683      	mov	fp, r0
 80009f8:	465b      	mov	r3, fp
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d05e      	beq.n	8000abc <__aeabi_dmul+0x18c>
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dmul+0xd4>
 8000a02:	e1f3      	b.n	8000dec <__aeabi_dmul+0x4bc>
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d000      	beq.n	8000a0a <__aeabi_dmul+0xda>
 8000a08:	e118      	b.n	8000c3c <__aeabi_dmul+0x30c>
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2400      	movs	r4, #0
 8000a0e:	2500      	movs	r5, #0
 8000a10:	9b01      	ldr	r3, [sp, #4]
 8000a12:	0512      	lsls	r2, r2, #20
 8000a14:	4322      	orrs	r2, r4
 8000a16:	07db      	lsls	r3, r3, #31
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	0028      	movs	r0, r5
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	b007      	add	sp, #28
 8000a20:	bcf0      	pop	{r4, r5, r6, r7}
 8000a22:	46bb      	mov	fp, r7
 8000a24:	46b2      	mov	sl, r6
 8000a26:	46a9      	mov	r9, r5
 8000a28:	46a0      	mov	r8, r4
 8000a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2c:	0025      	movs	r5, r4
 8000a2e:	4305      	orrs	r5, r0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dmul+0x104>
 8000a32:	e141      	b.n	8000cb8 <__aeabi_dmul+0x388>
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dmul+0x10a>
 8000a38:	e1ad      	b.n	8000d96 <__aeabi_dmul+0x466>
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	f000 fe58 	bl	80016f0 <__clzsi2>
 8000a40:	0001      	movs	r1, r0
 8000a42:	0002      	movs	r2, r0
 8000a44:	390b      	subs	r1, #11
 8000a46:	231d      	movs	r3, #29
 8000a48:	0010      	movs	r0, r2
 8000a4a:	1a5b      	subs	r3, r3, r1
 8000a4c:	0031      	movs	r1, r6
 8000a4e:	0035      	movs	r5, r6
 8000a50:	3808      	subs	r0, #8
 8000a52:	4084      	lsls	r4, r0
 8000a54:	40d9      	lsrs	r1, r3
 8000a56:	4085      	lsls	r5, r0
 8000a58:	430c      	orrs	r4, r1
 8000a5a:	489e      	ldr	r0, [pc, #632]	; (8000cd4 <__aeabi_dmul+0x3a4>)
 8000a5c:	1a83      	subs	r3, r0, r2
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2300      	movs	r3, #0
 8000a62:	4699      	mov	r9, r3
 8000a64:	469b      	mov	fp, r3
 8000a66:	e786      	b.n	8000976 <__aeabi_dmul+0x46>
 8000a68:	0005      	movs	r5, r0
 8000a6a:	4325      	orrs	r5, r4
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_dmul+0x140>
 8000a6e:	e11c      	b.n	8000caa <__aeabi_dmul+0x37a>
 8000a70:	2208      	movs	r2, #8
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2302      	movs	r3, #2
 8000a76:	2400      	movs	r4, #0
 8000a78:	4691      	mov	r9, r2
 8000a7a:	469b      	mov	fp, r3
 8000a7c:	e77b      	b.n	8000976 <__aeabi_dmul+0x46>
 8000a7e:	4652      	mov	r2, sl
 8000a80:	4332      	orrs	r2, r6
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dmul+0x156>
 8000a84:	e10a      	b.n	8000c9c <__aeabi_dmul+0x36c>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_dmul+0x15c>
 8000a8a:	e176      	b.n	8000d7a <__aeabi_dmul+0x44a>
 8000a8c:	0030      	movs	r0, r6
 8000a8e:	f000 fe2f 	bl	80016f0 <__clzsi2>
 8000a92:	0002      	movs	r2, r0
 8000a94:	3a0b      	subs	r2, #11
 8000a96:	231d      	movs	r3, #29
 8000a98:	0001      	movs	r1, r0
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	4652      	mov	r2, sl
 8000a9e:	3908      	subs	r1, #8
 8000aa0:	40da      	lsrs	r2, r3
 8000aa2:	408e      	lsls	r6, r1
 8000aa4:	4316      	orrs	r6, r2
 8000aa6:	4652      	mov	r2, sl
 8000aa8:	408a      	lsls	r2, r1
 8000aaa:	9b00      	ldr	r3, [sp, #0]
 8000aac:	4989      	ldr	r1, [pc, #548]	; (8000cd4 <__aeabi_dmul+0x3a4>)
 8000aae:	1a18      	subs	r0, r3, r0
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	468c      	mov	ip, r1
 8000ab4:	4463      	add	r3, ip
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	e77a      	b.n	80009b2 <__aeabi_dmul+0x82>
 8000abc:	2400      	movs	r4, #0
 8000abe:	2500      	movs	r5, #0
 8000ac0:	4a81      	ldr	r2, [pc, #516]	; (8000cc8 <__aeabi_dmul+0x398>)
 8000ac2:	e7a5      	b.n	8000a10 <__aeabi_dmul+0xe0>
 8000ac4:	0c2f      	lsrs	r7, r5, #16
 8000ac6:	042d      	lsls	r5, r5, #16
 8000ac8:	0c2d      	lsrs	r5, r5, #16
 8000aca:	002b      	movs	r3, r5
 8000acc:	0c11      	lsrs	r1, r2, #16
 8000ace:	0412      	lsls	r2, r2, #16
 8000ad0:	0c12      	lsrs	r2, r2, #16
 8000ad2:	4353      	muls	r3, r2
 8000ad4:	4698      	mov	r8, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	0028      	movs	r0, r5
 8000ada:	437b      	muls	r3, r7
 8000adc:	4699      	mov	r9, r3
 8000ade:	4348      	muls	r0, r1
 8000ae0:	4448      	add	r0, r9
 8000ae2:	4683      	mov	fp, r0
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	000b      	movs	r3, r1
 8000ae8:	0c00      	lsrs	r0, r0, #16
 8000aea:	4682      	mov	sl, r0
 8000aec:	4658      	mov	r0, fp
 8000aee:	437b      	muls	r3, r7
 8000af0:	4450      	add	r0, sl
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	4581      	cmp	r9, r0
 8000af6:	d906      	bls.n	8000b06 <__aeabi_dmul+0x1d6>
 8000af8:	469a      	mov	sl, r3
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	025b      	lsls	r3, r3, #9
 8000afe:	4699      	mov	r9, r3
 8000b00:	44ca      	add	sl, r9
 8000b02:	4653      	mov	r3, sl
 8000b04:	9302      	str	r3, [sp, #8]
 8000b06:	0c03      	lsrs	r3, r0, #16
 8000b08:	469b      	mov	fp, r3
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	041b      	lsls	r3, r3, #16
 8000b0e:	0400      	lsls	r0, r0, #16
 8000b10:	0c1b      	lsrs	r3, r3, #16
 8000b12:	4698      	mov	r8, r3
 8000b14:	0003      	movs	r3, r0
 8000b16:	4443      	add	r3, r8
 8000b18:	9304      	str	r3, [sp, #16]
 8000b1a:	0c33      	lsrs	r3, r6, #16
 8000b1c:	4699      	mov	r9, r3
 8000b1e:	002b      	movs	r3, r5
 8000b20:	0436      	lsls	r6, r6, #16
 8000b22:	0c36      	lsrs	r6, r6, #16
 8000b24:	4373      	muls	r3, r6
 8000b26:	4698      	mov	r8, r3
 8000b28:	0033      	movs	r3, r6
 8000b2a:	437b      	muls	r3, r7
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	464b      	mov	r3, r9
 8000b30:	435d      	muls	r5, r3
 8000b32:	435f      	muls	r7, r3
 8000b34:	4643      	mov	r3, r8
 8000b36:	4455      	add	r5, sl
 8000b38:	0c18      	lsrs	r0, r3, #16
 8000b3a:	1940      	adds	r0, r0, r5
 8000b3c:	4582      	cmp	sl, r0
 8000b3e:	d903      	bls.n	8000b48 <__aeabi_dmul+0x218>
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	025b      	lsls	r3, r3, #9
 8000b44:	469a      	mov	sl, r3
 8000b46:	4457      	add	r7, sl
 8000b48:	0c05      	lsrs	r5, r0, #16
 8000b4a:	19eb      	adds	r3, r5, r7
 8000b4c:	9305      	str	r3, [sp, #20]
 8000b4e:	4643      	mov	r3, r8
 8000b50:	041d      	lsls	r5, r3, #16
 8000b52:	0c2d      	lsrs	r5, r5, #16
 8000b54:	0400      	lsls	r0, r0, #16
 8000b56:	1940      	adds	r0, r0, r5
 8000b58:	0c25      	lsrs	r5, r4, #16
 8000b5a:	0424      	lsls	r4, r4, #16
 8000b5c:	0c24      	lsrs	r4, r4, #16
 8000b5e:	0027      	movs	r7, r4
 8000b60:	4357      	muls	r7, r2
 8000b62:	436a      	muls	r2, r5
 8000b64:	4690      	mov	r8, r2
 8000b66:	002a      	movs	r2, r5
 8000b68:	0c3b      	lsrs	r3, r7, #16
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	434a      	muls	r2, r1
 8000b6e:	4361      	muls	r1, r4
 8000b70:	4441      	add	r1, r8
 8000b72:	4451      	add	r1, sl
 8000b74:	4483      	add	fp, r0
 8000b76:	4588      	cmp	r8, r1
 8000b78:	d903      	bls.n	8000b82 <__aeabi_dmul+0x252>
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	025b      	lsls	r3, r3, #9
 8000b7e:	4698      	mov	r8, r3
 8000b80:	4442      	add	r2, r8
 8000b82:	043f      	lsls	r7, r7, #16
 8000b84:	0c0b      	lsrs	r3, r1, #16
 8000b86:	0c3f      	lsrs	r7, r7, #16
 8000b88:	0409      	lsls	r1, r1, #16
 8000b8a:	19c9      	adds	r1, r1, r7
 8000b8c:	0027      	movs	r7, r4
 8000b8e:	4698      	mov	r8, r3
 8000b90:	464b      	mov	r3, r9
 8000b92:	4377      	muls	r7, r6
 8000b94:	435c      	muls	r4, r3
 8000b96:	436e      	muls	r6, r5
 8000b98:	435d      	muls	r5, r3
 8000b9a:	0c3b      	lsrs	r3, r7, #16
 8000b9c:	4699      	mov	r9, r3
 8000b9e:	19a4      	adds	r4, r4, r6
 8000ba0:	444c      	add	r4, r9
 8000ba2:	4442      	add	r2, r8
 8000ba4:	9503      	str	r5, [sp, #12]
 8000ba6:	42a6      	cmp	r6, r4
 8000ba8:	d904      	bls.n	8000bb4 <__aeabi_dmul+0x284>
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	4698      	mov	r8, r3
 8000bb0:	4445      	add	r5, r8
 8000bb2:	9503      	str	r5, [sp, #12]
 8000bb4:	9b02      	ldr	r3, [sp, #8]
 8000bb6:	043f      	lsls	r7, r7, #16
 8000bb8:	445b      	add	r3, fp
 8000bba:	001e      	movs	r6, r3
 8000bbc:	4283      	cmp	r3, r0
 8000bbe:	4180      	sbcs	r0, r0
 8000bc0:	0423      	lsls	r3, r4, #16
 8000bc2:	4698      	mov	r8, r3
 8000bc4:	9b05      	ldr	r3, [sp, #20]
 8000bc6:	0c3f      	lsrs	r7, r7, #16
 8000bc8:	4447      	add	r7, r8
 8000bca:	4698      	mov	r8, r3
 8000bcc:	1876      	adds	r6, r6, r1
 8000bce:	428e      	cmp	r6, r1
 8000bd0:	4189      	sbcs	r1, r1
 8000bd2:	4447      	add	r7, r8
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	183d      	adds	r5, r7, r0
 8000bd8:	46a8      	mov	r8, r5
 8000bda:	4693      	mov	fp, r2
 8000bdc:	4249      	negs	r1, r1
 8000bde:	468a      	mov	sl, r1
 8000be0:	44c3      	add	fp, r8
 8000be2:	429f      	cmp	r7, r3
 8000be4:	41bf      	sbcs	r7, r7
 8000be6:	4580      	cmp	r8, r0
 8000be8:	4180      	sbcs	r0, r0
 8000bea:	9b03      	ldr	r3, [sp, #12]
 8000bec:	44da      	add	sl, fp
 8000bee:	4698      	mov	r8, r3
 8000bf0:	4653      	mov	r3, sl
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	427f      	negs	r7, r7
 8000bf6:	4307      	orrs	r7, r0
 8000bf8:	0c24      	lsrs	r4, r4, #16
 8000bfa:	4593      	cmp	fp, r2
 8000bfc:	4192      	sbcs	r2, r2
 8000bfe:	458a      	cmp	sl, r1
 8000c00:	4189      	sbcs	r1, r1
 8000c02:	193f      	adds	r7, r7, r4
 8000c04:	0ddc      	lsrs	r4, r3, #23
 8000c06:	9b04      	ldr	r3, [sp, #16]
 8000c08:	0275      	lsls	r5, r6, #9
 8000c0a:	431d      	orrs	r5, r3
 8000c0c:	1e68      	subs	r0, r5, #1
 8000c0e:	4185      	sbcs	r5, r0
 8000c10:	4653      	mov	r3, sl
 8000c12:	4252      	negs	r2, r2
 8000c14:	4249      	negs	r1, r1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	18bf      	adds	r7, r7, r2
 8000c1a:	4447      	add	r7, r8
 8000c1c:	0df6      	lsrs	r6, r6, #23
 8000c1e:	027f      	lsls	r7, r7, #9
 8000c20:	4335      	orrs	r5, r6
 8000c22:	025a      	lsls	r2, r3, #9
 8000c24:	433c      	orrs	r4, r7
 8000c26:	4315      	orrs	r5, r2
 8000c28:	01fb      	lsls	r3, r7, #7
 8000c2a:	d400      	bmi.n	8000c2e <__aeabi_dmul+0x2fe>
 8000c2c:	e0c1      	b.n	8000db2 <__aeabi_dmul+0x482>
 8000c2e:	2101      	movs	r1, #1
 8000c30:	086a      	lsrs	r2, r5, #1
 8000c32:	400d      	ands	r5, r1
 8000c34:	4315      	orrs	r5, r2
 8000c36:	07e2      	lsls	r2, r4, #31
 8000c38:	4315      	orrs	r5, r2
 8000c3a:	0864      	lsrs	r4, r4, #1
 8000c3c:	4926      	ldr	r1, [pc, #152]	; (8000cd8 <__aeabi_dmul+0x3a8>)
 8000c3e:	4461      	add	r1, ip
 8000c40:	2900      	cmp	r1, #0
 8000c42:	dd56      	ble.n	8000cf2 <__aeabi_dmul+0x3c2>
 8000c44:	076b      	lsls	r3, r5, #29
 8000c46:	d009      	beq.n	8000c5c <__aeabi_dmul+0x32c>
 8000c48:	220f      	movs	r2, #15
 8000c4a:	402a      	ands	r2, r5
 8000c4c:	2a04      	cmp	r2, #4
 8000c4e:	d005      	beq.n	8000c5c <__aeabi_dmul+0x32c>
 8000c50:	1d2a      	adds	r2, r5, #4
 8000c52:	42aa      	cmp	r2, r5
 8000c54:	41ad      	sbcs	r5, r5
 8000c56:	426d      	negs	r5, r5
 8000c58:	1964      	adds	r4, r4, r5
 8000c5a:	0015      	movs	r5, r2
 8000c5c:	01e3      	lsls	r3, r4, #7
 8000c5e:	d504      	bpl.n	8000c6a <__aeabi_dmul+0x33a>
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <__aeabi_dmul+0x3ac>)
 8000c64:	00c9      	lsls	r1, r1, #3
 8000c66:	4014      	ands	r4, r2
 8000c68:	4461      	add	r1, ip
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <__aeabi_dmul+0x3b0>)
 8000c6c:	4291      	cmp	r1, r2
 8000c6e:	dd00      	ble.n	8000c72 <__aeabi_dmul+0x342>
 8000c70:	e724      	b.n	8000abc <__aeabi_dmul+0x18c>
 8000c72:	0762      	lsls	r2, r4, #29
 8000c74:	08ed      	lsrs	r5, r5, #3
 8000c76:	0264      	lsls	r4, r4, #9
 8000c78:	0549      	lsls	r1, r1, #21
 8000c7a:	4315      	orrs	r5, r2
 8000c7c:	0b24      	lsrs	r4, r4, #12
 8000c7e:	0d4a      	lsrs	r2, r1, #21
 8000c80:	e6c6      	b.n	8000a10 <__aeabi_dmul+0xe0>
 8000c82:	9701      	str	r7, [sp, #4]
 8000c84:	e6b8      	b.n	80009f8 <__aeabi_dmul+0xc8>
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <__aeabi_dmul+0x398>)
 8000c88:	2003      	movs	r0, #3
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	4463      	add	r3, ip
 8000c8e:	464a      	mov	r2, r9
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2303      	movs	r3, #3
 8000c94:	431a      	orrs	r2, r3
 8000c96:	4691      	mov	r9, r2
 8000c98:	4652      	mov	r2, sl
 8000c9a:	e68a      	b.n	80009b2 <__aeabi_dmul+0x82>
 8000c9c:	4649      	mov	r1, r9
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	4689      	mov	r9, r1
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	e683      	b.n	80009b2 <__aeabi_dmul+0x82>
 8000caa:	220c      	movs	r2, #12
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2303      	movs	r3, #3
 8000cb0:	0005      	movs	r5, r0
 8000cb2:	4691      	mov	r9, r2
 8000cb4:	469b      	mov	fp, r3
 8000cb6:	e65e      	b.n	8000976 <__aeabi_dmul+0x46>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	4699      	mov	r9, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	e656      	b.n	8000976 <__aeabi_dmul+0x46>
 8000cc8:	000007ff 	.word	0x000007ff
 8000ccc:	fffffc01 	.word	0xfffffc01
 8000cd0:	08006b98 	.word	0x08006b98
 8000cd4:	fffffc0d 	.word	0xfffffc0d
 8000cd8:	000003ff 	.word	0x000003ff
 8000cdc:	feffffff 	.word	0xfeffffff
 8000ce0:	000007fe 	.word	0x000007fe
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2480      	movs	r4, #128	; 0x80
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4a44      	ldr	r2, [pc, #272]	; (8000dfc <__aeabi_dmul+0x4cc>)
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	0324      	lsls	r4, r4, #12
 8000cf0:	e68e      	b.n	8000a10 <__aeabi_dmul+0xe0>
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	1a40      	subs	r0, r0, r1
 8000cf6:	2838      	cmp	r0, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dmul+0x3cc>
 8000cfa:	e686      	b.n	8000a0a <__aeabi_dmul+0xda>
 8000cfc:	281f      	cmp	r0, #31
 8000cfe:	dd5b      	ble.n	8000db8 <__aeabi_dmul+0x488>
 8000d00:	221f      	movs	r2, #31
 8000d02:	0023      	movs	r3, r4
 8000d04:	4252      	negs	r2, r2
 8000d06:	1a51      	subs	r1, r2, r1
 8000d08:	40cb      	lsrs	r3, r1
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	2820      	cmp	r0, #32
 8000d0e:	d003      	beq.n	8000d18 <__aeabi_dmul+0x3e8>
 8000d10:	4a3b      	ldr	r2, [pc, #236]	; (8000e00 <__aeabi_dmul+0x4d0>)
 8000d12:	4462      	add	r2, ip
 8000d14:	4094      	lsls	r4, r2
 8000d16:	4325      	orrs	r5, r4
 8000d18:	1e6a      	subs	r2, r5, #1
 8000d1a:	4195      	sbcs	r5, r2
 8000d1c:	002a      	movs	r2, r5
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	2107      	movs	r1, #7
 8000d22:	000d      	movs	r5, r1
 8000d24:	2400      	movs	r4, #0
 8000d26:	4015      	ands	r5, r2
 8000d28:	4211      	tst	r1, r2
 8000d2a:	d05b      	beq.n	8000de4 <__aeabi_dmul+0x4b4>
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	2400      	movs	r4, #0
 8000d30:	4011      	ands	r1, r2
 8000d32:	2904      	cmp	r1, #4
 8000d34:	d053      	beq.n	8000dde <__aeabi_dmul+0x4ae>
 8000d36:	1d11      	adds	r1, r2, #4
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	4192      	sbcs	r2, r2
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	18a4      	adds	r4, r4, r2
 8000d40:	000a      	movs	r2, r1
 8000d42:	0223      	lsls	r3, r4, #8
 8000d44:	d54b      	bpl.n	8000dde <__aeabi_dmul+0x4ae>
 8000d46:	2201      	movs	r2, #1
 8000d48:	2400      	movs	r4, #0
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	e660      	b.n	8000a10 <__aeabi_dmul+0xe0>
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	031b      	lsls	r3, r3, #12
 8000d52:	421c      	tst	r4, r3
 8000d54:	d009      	beq.n	8000d6a <__aeabi_dmul+0x43a>
 8000d56:	421e      	tst	r6, r3
 8000d58:	d107      	bne.n	8000d6a <__aeabi_dmul+0x43a>
 8000d5a:	4333      	orrs	r3, r6
 8000d5c:	031c      	lsls	r4, r3, #12
 8000d5e:	4643      	mov	r3, r8
 8000d60:	0015      	movs	r5, r2
 8000d62:	0b24      	lsrs	r4, r4, #12
 8000d64:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <__aeabi_dmul+0x4cc>)
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	e652      	b.n	8000a10 <__aeabi_dmul+0xe0>
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	0312      	lsls	r2, r2, #12
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	0324      	lsls	r4, r4, #12
 8000d72:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <__aeabi_dmul+0x4cc>)
 8000d74:	0b24      	lsrs	r4, r4, #12
 8000d76:	9701      	str	r7, [sp, #4]
 8000d78:	e64a      	b.n	8000a10 <__aeabi_dmul+0xe0>
 8000d7a:	f000 fcb9 	bl	80016f0 <__clzsi2>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	001a      	movs	r2, r3
 8000d82:	3215      	adds	r2, #21
 8000d84:	3020      	adds	r0, #32
 8000d86:	2a1c      	cmp	r2, #28
 8000d88:	dc00      	bgt.n	8000d8c <__aeabi_dmul+0x45c>
 8000d8a:	e684      	b.n	8000a96 <__aeabi_dmul+0x166>
 8000d8c:	4656      	mov	r6, sl
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	2200      	movs	r2, #0
 8000d92:	409e      	lsls	r6, r3
 8000d94:	e689      	b.n	8000aaa <__aeabi_dmul+0x17a>
 8000d96:	f000 fcab 	bl	80016f0 <__clzsi2>
 8000d9a:	0001      	movs	r1, r0
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	3115      	adds	r1, #21
 8000da0:	3220      	adds	r2, #32
 8000da2:	291c      	cmp	r1, #28
 8000da4:	dc00      	bgt.n	8000da8 <__aeabi_dmul+0x478>
 8000da6:	e64e      	b.n	8000a46 <__aeabi_dmul+0x116>
 8000da8:	0034      	movs	r4, r6
 8000daa:	3808      	subs	r0, #8
 8000dac:	2500      	movs	r5, #0
 8000dae:	4084      	lsls	r4, r0
 8000db0:	e653      	b.n	8000a5a <__aeabi_dmul+0x12a>
 8000db2:	9b00      	ldr	r3, [sp, #0]
 8000db4:	469c      	mov	ip, r3
 8000db6:	e741      	b.n	8000c3c <__aeabi_dmul+0x30c>
 8000db8:	4912      	ldr	r1, [pc, #72]	; (8000e04 <__aeabi_dmul+0x4d4>)
 8000dba:	0022      	movs	r2, r4
 8000dbc:	4461      	add	r1, ip
 8000dbe:	002e      	movs	r6, r5
 8000dc0:	408d      	lsls	r5, r1
 8000dc2:	408a      	lsls	r2, r1
 8000dc4:	40c6      	lsrs	r6, r0
 8000dc6:	1e69      	subs	r1, r5, #1
 8000dc8:	418d      	sbcs	r5, r1
 8000dca:	4332      	orrs	r2, r6
 8000dcc:	432a      	orrs	r2, r5
 8000dce:	40c4      	lsrs	r4, r0
 8000dd0:	0753      	lsls	r3, r2, #29
 8000dd2:	d0b6      	beq.n	8000d42 <__aeabi_dmul+0x412>
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	4011      	ands	r1, r2
 8000dd8:	2904      	cmp	r1, #4
 8000dda:	d1ac      	bne.n	8000d36 <__aeabi_dmul+0x406>
 8000ddc:	e7b1      	b.n	8000d42 <__aeabi_dmul+0x412>
 8000dde:	0765      	lsls	r5, r4, #29
 8000de0:	0264      	lsls	r4, r4, #9
 8000de2:	0b24      	lsrs	r4, r4, #12
 8000de4:	08d2      	lsrs	r2, r2, #3
 8000de6:	4315      	orrs	r5, r2
 8000de8:	2200      	movs	r2, #0
 8000dea:	e611      	b.n	8000a10 <__aeabi_dmul+0xe0>
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	0312      	lsls	r2, r2, #12
 8000df0:	4314      	orrs	r4, r2
 8000df2:	0324      	lsls	r4, r4, #12
 8000df4:	4a01      	ldr	r2, [pc, #4]	; (8000dfc <__aeabi_dmul+0x4cc>)
 8000df6:	0b24      	lsrs	r4, r4, #12
 8000df8:	e60a      	b.n	8000a10 <__aeabi_dmul+0xe0>
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	000007ff 	.word	0x000007ff
 8000e00:	0000043e 	.word	0x0000043e
 8000e04:	0000041e 	.word	0x0000041e

08000e08 <__aeabi_dsub>:
 8000e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0a:	4657      	mov	r7, sl
 8000e0c:	464e      	mov	r6, r9
 8000e0e:	4645      	mov	r5, r8
 8000e10:	46de      	mov	lr, fp
 8000e12:	0004      	movs	r4, r0
 8000e14:	b5e0      	push	{r5, r6, r7, lr}
 8000e16:	001f      	movs	r7, r3
 8000e18:	0010      	movs	r0, r2
 8000e1a:	030b      	lsls	r3, r1, #12
 8000e1c:	0f62      	lsrs	r2, r4, #29
 8000e1e:	004e      	lsls	r6, r1, #1
 8000e20:	0fcd      	lsrs	r5, r1, #31
 8000e22:	0a5b      	lsrs	r3, r3, #9
 8000e24:	0339      	lsls	r1, r7, #12
 8000e26:	4313      	orrs	r3, r2
 8000e28:	0a49      	lsrs	r1, r1, #9
 8000e2a:	00e2      	lsls	r2, r4, #3
 8000e2c:	0f44      	lsrs	r4, r0, #29
 8000e2e:	4321      	orrs	r1, r4
 8000e30:	4cc2      	ldr	r4, [pc, #776]	; (800113c <__aeabi_dsub+0x334>)
 8000e32:	4691      	mov	r9, r2
 8000e34:	4692      	mov	sl, r2
 8000e36:	00c0      	lsls	r0, r0, #3
 8000e38:	007a      	lsls	r2, r7, #1
 8000e3a:	4680      	mov	r8, r0
 8000e3c:	0d76      	lsrs	r6, r6, #21
 8000e3e:	0d52      	lsrs	r2, r2, #21
 8000e40:	0fff      	lsrs	r7, r7, #31
 8000e42:	42a2      	cmp	r2, r4
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dsub+0x40>
 8000e46:	e0b4      	b.n	8000fb2 <__aeabi_dsub+0x1aa>
 8000e48:	2401      	movs	r4, #1
 8000e4a:	4067      	eors	r7, r4
 8000e4c:	46bb      	mov	fp, r7
 8000e4e:	42bd      	cmp	r5, r7
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dsub+0x4c>
 8000e52:	e088      	b.n	8000f66 <__aeabi_dsub+0x15e>
 8000e54:	1ab4      	subs	r4, r6, r2
 8000e56:	46a4      	mov	ip, r4
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	dc00      	bgt.n	8000e5e <__aeabi_dsub+0x56>
 8000e5c:	e0b2      	b.n	8000fc4 <__aeabi_dsub+0x1bc>
 8000e5e:	2a00      	cmp	r2, #0
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dsub+0x5c>
 8000e62:	e0c5      	b.n	8000ff0 <__aeabi_dsub+0x1e8>
 8000e64:	4ab5      	ldr	r2, [pc, #724]	; (800113c <__aeabi_dsub+0x334>)
 8000e66:	4296      	cmp	r6, r2
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dsub+0x64>
 8000e6a:	e28b      	b.n	8001384 <__aeabi_dsub+0x57c>
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	0412      	lsls	r2, r2, #16
 8000e70:	4311      	orrs	r1, r2
 8000e72:	4662      	mov	r2, ip
 8000e74:	2a38      	cmp	r2, #56	; 0x38
 8000e76:	dd00      	ble.n	8000e7a <__aeabi_dsub+0x72>
 8000e78:	e1a1      	b.n	80011be <__aeabi_dsub+0x3b6>
 8000e7a:	2a1f      	cmp	r2, #31
 8000e7c:	dd00      	ble.n	8000e80 <__aeabi_dsub+0x78>
 8000e7e:	e216      	b.n	80012ae <__aeabi_dsub+0x4a6>
 8000e80:	2720      	movs	r7, #32
 8000e82:	000c      	movs	r4, r1
 8000e84:	1abf      	subs	r7, r7, r2
 8000e86:	40bc      	lsls	r4, r7
 8000e88:	0002      	movs	r2, r0
 8000e8a:	46a0      	mov	r8, r4
 8000e8c:	4664      	mov	r4, ip
 8000e8e:	40b8      	lsls	r0, r7
 8000e90:	40e2      	lsrs	r2, r4
 8000e92:	4644      	mov	r4, r8
 8000e94:	4314      	orrs	r4, r2
 8000e96:	0002      	movs	r2, r0
 8000e98:	1e50      	subs	r0, r2, #1
 8000e9a:	4182      	sbcs	r2, r0
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	40c1      	lsrs	r1, r0
 8000ea0:	4322      	orrs	r2, r4
 8000ea2:	1a5b      	subs	r3, r3, r1
 8000ea4:	4649      	mov	r1, r9
 8000ea6:	1a8c      	subs	r4, r1, r2
 8000ea8:	45a1      	cmp	r9, r4
 8000eaa:	4192      	sbcs	r2, r2
 8000eac:	4252      	negs	r2, r2
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	4643      	mov	r3, r8
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	d400      	bmi.n	8000eba <__aeabi_dsub+0xb2>
 8000eb8:	e117      	b.n	80010ea <__aeabi_dsub+0x2e2>
 8000eba:	4643      	mov	r3, r8
 8000ebc:	025b      	lsls	r3, r3, #9
 8000ebe:	0a5b      	lsrs	r3, r3, #9
 8000ec0:	4698      	mov	r8, r3
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dsub+0xc2>
 8000ec8:	e16c      	b.n	80011a4 <__aeabi_dsub+0x39c>
 8000eca:	4640      	mov	r0, r8
 8000ecc:	f000 fc10 	bl	80016f0 <__clzsi2>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	3a08      	subs	r2, #8
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	0020      	movs	r0, r4
 8000ed8:	4643      	mov	r3, r8
 8000eda:	1a89      	subs	r1, r1, r2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	40c8      	lsrs	r0, r1
 8000ee0:	4094      	lsls	r4, r2
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	4296      	cmp	r6, r2
 8000ee6:	dd00      	ble.n	8000eea <__aeabi_dsub+0xe2>
 8000ee8:	e157      	b.n	800119a <__aeabi_dsub+0x392>
 8000eea:	1b96      	subs	r6, r2, r6
 8000eec:	1c71      	adds	r1, r6, #1
 8000eee:	291f      	cmp	r1, #31
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_dsub+0xec>
 8000ef2:	e1cb      	b.n	800128c <__aeabi_dsub+0x484>
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	0026      	movs	r6, r4
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	4094      	lsls	r4, r2
 8000efe:	4090      	lsls	r0, r2
 8000f00:	40ce      	lsrs	r6, r1
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	1e62      	subs	r2, r4, #1
 8000f06:	4194      	sbcs	r4, r2
 8000f08:	4330      	orrs	r0, r6
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	4304      	orrs	r4, r0
 8000f10:	0763      	lsls	r3, r4, #29
 8000f12:	d009      	beq.n	8000f28 <__aeabi_dsub+0x120>
 8000f14:	230f      	movs	r3, #15
 8000f16:	4023      	ands	r3, r4
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d005      	beq.n	8000f28 <__aeabi_dsub+0x120>
 8000f1c:	1d23      	adds	r3, r4, #4
 8000f1e:	42a3      	cmp	r3, r4
 8000f20:	41a4      	sbcs	r4, r4
 8000f22:	4264      	negs	r4, r4
 8000f24:	44a0      	add	r8, r4
 8000f26:	001c      	movs	r4, r3
 8000f28:	4643      	mov	r3, r8
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	d400      	bmi.n	8000f30 <__aeabi_dsub+0x128>
 8000f2e:	e0df      	b.n	80010f0 <__aeabi_dsub+0x2e8>
 8000f30:	4b82      	ldr	r3, [pc, #520]	; (800113c <__aeabi_dsub+0x334>)
 8000f32:	3601      	adds	r6, #1
 8000f34:	429e      	cmp	r6, r3
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dsub+0x132>
 8000f38:	e0fb      	b.n	8001132 <__aeabi_dsub+0x32a>
 8000f3a:	4642      	mov	r2, r8
 8000f3c:	4b80      	ldr	r3, [pc, #512]	; (8001140 <__aeabi_dsub+0x338>)
 8000f3e:	08e4      	lsrs	r4, r4, #3
 8000f40:	401a      	ands	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	0571      	lsls	r1, r6, #21
 8000f46:	0752      	lsls	r2, r2, #29
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	4322      	orrs	r2, r4
 8000f4c:	0b1b      	lsrs	r3, r3, #12
 8000f4e:	0d49      	lsrs	r1, r1, #21
 8000f50:	0509      	lsls	r1, r1, #20
 8000f52:	07ed      	lsls	r5, r5, #31
 8000f54:	4319      	orrs	r1, r3
 8000f56:	4329      	orrs	r1, r5
 8000f58:	0010      	movs	r0, r2
 8000f5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f5c:	46bb      	mov	fp, r7
 8000f5e:	46b2      	mov	sl, r6
 8000f60:	46a9      	mov	r9, r5
 8000f62:	46a0      	mov	r8, r4
 8000f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f66:	1ab4      	subs	r4, r6, r2
 8000f68:	46a4      	mov	ip, r4
 8000f6a:	2c00      	cmp	r4, #0
 8000f6c:	dd58      	ble.n	8001020 <__aeabi_dsub+0x218>
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dsub+0x16c>
 8000f72:	e09e      	b.n	80010b2 <__aeabi_dsub+0x2aa>
 8000f74:	4a71      	ldr	r2, [pc, #452]	; (800113c <__aeabi_dsub+0x334>)
 8000f76:	4296      	cmp	r6, r2
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dsub+0x174>
 8000f7a:	e13b      	b.n	80011f4 <__aeabi_dsub+0x3ec>
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	0412      	lsls	r2, r2, #16
 8000f80:	4311      	orrs	r1, r2
 8000f82:	4662      	mov	r2, ip
 8000f84:	2a38      	cmp	r2, #56	; 0x38
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_dsub+0x182>
 8000f88:	e0c1      	b.n	800110e <__aeabi_dsub+0x306>
 8000f8a:	2a1f      	cmp	r2, #31
 8000f8c:	dc00      	bgt.n	8000f90 <__aeabi_dsub+0x188>
 8000f8e:	e1bb      	b.n	8001308 <__aeabi_dsub+0x500>
 8000f90:	000c      	movs	r4, r1
 8000f92:	3a20      	subs	r2, #32
 8000f94:	40d4      	lsrs	r4, r2
 8000f96:	0022      	movs	r2, r4
 8000f98:	4664      	mov	r4, ip
 8000f9a:	2c20      	cmp	r4, #32
 8000f9c:	d004      	beq.n	8000fa8 <__aeabi_dsub+0x1a0>
 8000f9e:	2740      	movs	r7, #64	; 0x40
 8000fa0:	1b3f      	subs	r7, r7, r4
 8000fa2:	40b9      	lsls	r1, r7
 8000fa4:	4308      	orrs	r0, r1
 8000fa6:	4680      	mov	r8, r0
 8000fa8:	4644      	mov	r4, r8
 8000faa:	1e61      	subs	r1, r4, #1
 8000fac:	418c      	sbcs	r4, r1
 8000fae:	4314      	orrs	r4, r2
 8000fb0:	e0b1      	b.n	8001116 <__aeabi_dsub+0x30e>
 8000fb2:	000c      	movs	r4, r1
 8000fb4:	4304      	orrs	r4, r0
 8000fb6:	d02a      	beq.n	800100e <__aeabi_dsub+0x206>
 8000fb8:	46bb      	mov	fp, r7
 8000fba:	42bd      	cmp	r5, r7
 8000fbc:	d02d      	beq.n	800101a <__aeabi_dsub+0x212>
 8000fbe:	4c61      	ldr	r4, [pc, #388]	; (8001144 <__aeabi_dsub+0x33c>)
 8000fc0:	46a4      	mov	ip, r4
 8000fc2:	44b4      	add	ip, r6
 8000fc4:	4664      	mov	r4, ip
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d05c      	beq.n	8001084 <__aeabi_dsub+0x27c>
 8000fca:	1b94      	subs	r4, r2, r6
 8000fcc:	46a4      	mov	ip, r4
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	d000      	beq.n	8000fd4 <__aeabi_dsub+0x1cc>
 8000fd2:	e115      	b.n	8001200 <__aeabi_dsub+0x3f8>
 8000fd4:	464d      	mov	r5, r9
 8000fd6:	431d      	orrs	r5, r3
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dsub+0x1d4>
 8000fda:	e1c3      	b.n	8001364 <__aeabi_dsub+0x55c>
 8000fdc:	1e65      	subs	r5, r4, #1
 8000fde:	2c01      	cmp	r4, #1
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dsub+0x1dc>
 8000fe2:	e20c      	b.n	80013fe <__aeabi_dsub+0x5f6>
 8000fe4:	4e55      	ldr	r6, [pc, #340]	; (800113c <__aeabi_dsub+0x334>)
 8000fe6:	42b4      	cmp	r4, r6
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dsub+0x1e4>
 8000fea:	e1f8      	b.n	80013de <__aeabi_dsub+0x5d6>
 8000fec:	46ac      	mov	ip, r5
 8000fee:	e10e      	b.n	800120e <__aeabi_dsub+0x406>
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	4302      	orrs	r2, r0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dsub+0x1f0>
 8000ff6:	e136      	b.n	8001266 <__aeabi_dsub+0x45e>
 8000ff8:	0022      	movs	r2, r4
 8000ffa:	3a01      	subs	r2, #1
 8000ffc:	2c01      	cmp	r4, #1
 8000ffe:	d100      	bne.n	8001002 <__aeabi_dsub+0x1fa>
 8001000:	e1c6      	b.n	8001390 <__aeabi_dsub+0x588>
 8001002:	4c4e      	ldr	r4, [pc, #312]	; (800113c <__aeabi_dsub+0x334>)
 8001004:	45a4      	cmp	ip, r4
 8001006:	d100      	bne.n	800100a <__aeabi_dsub+0x202>
 8001008:	e0f4      	b.n	80011f4 <__aeabi_dsub+0x3ec>
 800100a:	4694      	mov	ip, r2
 800100c:	e731      	b.n	8000e72 <__aeabi_dsub+0x6a>
 800100e:	2401      	movs	r4, #1
 8001010:	4067      	eors	r7, r4
 8001012:	46bb      	mov	fp, r7
 8001014:	42bd      	cmp	r5, r7
 8001016:	d000      	beq.n	800101a <__aeabi_dsub+0x212>
 8001018:	e71c      	b.n	8000e54 <__aeabi_dsub+0x4c>
 800101a:	4c4a      	ldr	r4, [pc, #296]	; (8001144 <__aeabi_dsub+0x33c>)
 800101c:	46a4      	mov	ip, r4
 800101e:	44b4      	add	ip, r6
 8001020:	4664      	mov	r4, ip
 8001022:	2c00      	cmp	r4, #0
 8001024:	d100      	bne.n	8001028 <__aeabi_dsub+0x220>
 8001026:	e0cf      	b.n	80011c8 <__aeabi_dsub+0x3c0>
 8001028:	1b94      	subs	r4, r2, r6
 800102a:	46a4      	mov	ip, r4
 800102c:	2e00      	cmp	r6, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_dsub+0x22a>
 8001030:	e15c      	b.n	80012ec <__aeabi_dsub+0x4e4>
 8001032:	4e42      	ldr	r6, [pc, #264]	; (800113c <__aeabi_dsub+0x334>)
 8001034:	42b2      	cmp	r2, r6
 8001036:	d100      	bne.n	800103a <__aeabi_dsub+0x232>
 8001038:	e1ec      	b.n	8001414 <__aeabi_dsub+0x60c>
 800103a:	2680      	movs	r6, #128	; 0x80
 800103c:	0436      	lsls	r6, r6, #16
 800103e:	4333      	orrs	r3, r6
 8001040:	4664      	mov	r4, ip
 8001042:	2c38      	cmp	r4, #56	; 0x38
 8001044:	dd00      	ble.n	8001048 <__aeabi_dsub+0x240>
 8001046:	e1b3      	b.n	80013b0 <__aeabi_dsub+0x5a8>
 8001048:	2c1f      	cmp	r4, #31
 800104a:	dd00      	ble.n	800104e <__aeabi_dsub+0x246>
 800104c:	e238      	b.n	80014c0 <__aeabi_dsub+0x6b8>
 800104e:	2620      	movs	r6, #32
 8001050:	1b36      	subs	r6, r6, r4
 8001052:	001c      	movs	r4, r3
 8001054:	40b4      	lsls	r4, r6
 8001056:	464f      	mov	r7, r9
 8001058:	46a0      	mov	r8, r4
 800105a:	4664      	mov	r4, ip
 800105c:	40e7      	lsrs	r7, r4
 800105e:	4644      	mov	r4, r8
 8001060:	433c      	orrs	r4, r7
 8001062:	464f      	mov	r7, r9
 8001064:	40b7      	lsls	r7, r6
 8001066:	003e      	movs	r6, r7
 8001068:	1e77      	subs	r7, r6, #1
 800106a:	41be      	sbcs	r6, r7
 800106c:	4334      	orrs	r4, r6
 800106e:	4666      	mov	r6, ip
 8001070:	40f3      	lsrs	r3, r6
 8001072:	18c9      	adds	r1, r1, r3
 8001074:	1824      	adds	r4, r4, r0
 8001076:	4284      	cmp	r4, r0
 8001078:	419b      	sbcs	r3, r3
 800107a:	425b      	negs	r3, r3
 800107c:	4698      	mov	r8, r3
 800107e:	0016      	movs	r6, r2
 8001080:	4488      	add	r8, r1
 8001082:	e04e      	b.n	8001122 <__aeabi_dsub+0x31a>
 8001084:	4a30      	ldr	r2, [pc, #192]	; (8001148 <__aeabi_dsub+0x340>)
 8001086:	1c74      	adds	r4, r6, #1
 8001088:	4214      	tst	r4, r2
 800108a:	d000      	beq.n	800108e <__aeabi_dsub+0x286>
 800108c:	e0d6      	b.n	800123c <__aeabi_dsub+0x434>
 800108e:	464a      	mov	r2, r9
 8001090:	431a      	orrs	r2, r3
 8001092:	2e00      	cmp	r6, #0
 8001094:	d000      	beq.n	8001098 <__aeabi_dsub+0x290>
 8001096:	e15b      	b.n	8001350 <__aeabi_dsub+0x548>
 8001098:	2a00      	cmp	r2, #0
 800109a:	d100      	bne.n	800109e <__aeabi_dsub+0x296>
 800109c:	e1a5      	b.n	80013ea <__aeabi_dsub+0x5e2>
 800109e:	000a      	movs	r2, r1
 80010a0:	4302      	orrs	r2, r0
 80010a2:	d000      	beq.n	80010a6 <__aeabi_dsub+0x29e>
 80010a4:	e1bb      	b.n	800141e <__aeabi_dsub+0x616>
 80010a6:	464a      	mov	r2, r9
 80010a8:	0759      	lsls	r1, r3, #29
 80010aa:	08d2      	lsrs	r2, r2, #3
 80010ac:	430a      	orrs	r2, r1
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	e027      	b.n	8001102 <__aeabi_dsub+0x2fa>
 80010b2:	000a      	movs	r2, r1
 80010b4:	4302      	orrs	r2, r0
 80010b6:	d100      	bne.n	80010ba <__aeabi_dsub+0x2b2>
 80010b8:	e174      	b.n	80013a4 <__aeabi_dsub+0x59c>
 80010ba:	0022      	movs	r2, r4
 80010bc:	3a01      	subs	r2, #1
 80010be:	2c01      	cmp	r4, #1
 80010c0:	d005      	beq.n	80010ce <__aeabi_dsub+0x2c6>
 80010c2:	4c1e      	ldr	r4, [pc, #120]	; (800113c <__aeabi_dsub+0x334>)
 80010c4:	45a4      	cmp	ip, r4
 80010c6:	d100      	bne.n	80010ca <__aeabi_dsub+0x2c2>
 80010c8:	e094      	b.n	80011f4 <__aeabi_dsub+0x3ec>
 80010ca:	4694      	mov	ip, r2
 80010cc:	e759      	b.n	8000f82 <__aeabi_dsub+0x17a>
 80010ce:	4448      	add	r0, r9
 80010d0:	4548      	cmp	r0, r9
 80010d2:	4192      	sbcs	r2, r2
 80010d4:	185b      	adds	r3, r3, r1
 80010d6:	4698      	mov	r8, r3
 80010d8:	0004      	movs	r4, r0
 80010da:	4252      	negs	r2, r2
 80010dc:	4490      	add	r8, r2
 80010de:	4643      	mov	r3, r8
 80010e0:	2602      	movs	r6, #2
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	d500      	bpl.n	80010e8 <__aeabi_dsub+0x2e0>
 80010e6:	e0c4      	b.n	8001272 <__aeabi_dsub+0x46a>
 80010e8:	3e01      	subs	r6, #1
 80010ea:	0763      	lsls	r3, r4, #29
 80010ec:	d000      	beq.n	80010f0 <__aeabi_dsub+0x2e8>
 80010ee:	e711      	b.n	8000f14 <__aeabi_dsub+0x10c>
 80010f0:	4643      	mov	r3, r8
 80010f2:	46b4      	mov	ip, r6
 80010f4:	0759      	lsls	r1, r3, #29
 80010f6:	08e2      	lsrs	r2, r4, #3
 80010f8:	430a      	orrs	r2, r1
 80010fa:	08db      	lsrs	r3, r3, #3
 80010fc:	490f      	ldr	r1, [pc, #60]	; (800113c <__aeabi_dsub+0x334>)
 80010fe:	458c      	cmp	ip, r1
 8001100:	d040      	beq.n	8001184 <__aeabi_dsub+0x37c>
 8001102:	4661      	mov	r1, ip
 8001104:	031b      	lsls	r3, r3, #12
 8001106:	0549      	lsls	r1, r1, #21
 8001108:	0b1b      	lsrs	r3, r3, #12
 800110a:	0d49      	lsrs	r1, r1, #21
 800110c:	e720      	b.n	8000f50 <__aeabi_dsub+0x148>
 800110e:	4301      	orrs	r1, r0
 8001110:	000c      	movs	r4, r1
 8001112:	1e61      	subs	r1, r4, #1
 8001114:	418c      	sbcs	r4, r1
 8001116:	444c      	add	r4, r9
 8001118:	454c      	cmp	r4, r9
 800111a:	4192      	sbcs	r2, r2
 800111c:	4252      	negs	r2, r2
 800111e:	4690      	mov	r8, r2
 8001120:	4498      	add	r8, r3
 8001122:	4643      	mov	r3, r8
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	d5e0      	bpl.n	80010ea <__aeabi_dsub+0x2e2>
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__aeabi_dsub+0x334>)
 800112a:	3601      	adds	r6, #1
 800112c:	429e      	cmp	r6, r3
 800112e:	d000      	beq.n	8001132 <__aeabi_dsub+0x32a>
 8001130:	e09f      	b.n	8001272 <__aeabi_dsub+0x46a>
 8001132:	0031      	movs	r1, r6
 8001134:	2300      	movs	r3, #0
 8001136:	2200      	movs	r2, #0
 8001138:	e70a      	b.n	8000f50 <__aeabi_dsub+0x148>
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	000007ff 	.word	0x000007ff
 8001140:	ff7fffff 	.word	0xff7fffff
 8001144:	fffff801 	.word	0xfffff801
 8001148:	000007fe 	.word	0x000007fe
 800114c:	2a00      	cmp	r2, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_dsub+0x34a>
 8001150:	e160      	b.n	8001414 <__aeabi_dsub+0x60c>
 8001152:	000a      	movs	r2, r1
 8001154:	4302      	orrs	r2, r0
 8001156:	d04d      	beq.n	80011f4 <__aeabi_dsub+0x3ec>
 8001158:	464a      	mov	r2, r9
 800115a:	075c      	lsls	r4, r3, #29
 800115c:	08d2      	lsrs	r2, r2, #3
 800115e:	4322      	orrs	r2, r4
 8001160:	2480      	movs	r4, #128	; 0x80
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	0324      	lsls	r4, r4, #12
 8001166:	4223      	tst	r3, r4
 8001168:	d007      	beq.n	800117a <__aeabi_dsub+0x372>
 800116a:	08ce      	lsrs	r6, r1, #3
 800116c:	4226      	tst	r6, r4
 800116e:	d104      	bne.n	800117a <__aeabi_dsub+0x372>
 8001170:	465d      	mov	r5, fp
 8001172:	0033      	movs	r3, r6
 8001174:	08c2      	lsrs	r2, r0, #3
 8001176:	0749      	lsls	r1, r1, #29
 8001178:	430a      	orrs	r2, r1
 800117a:	0f51      	lsrs	r1, r2, #29
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	08d2      	lsrs	r2, r2, #3
 8001180:	0749      	lsls	r1, r1, #29
 8001182:	430a      	orrs	r2, r1
 8001184:	0011      	movs	r1, r2
 8001186:	4319      	orrs	r1, r3
 8001188:	d100      	bne.n	800118c <__aeabi_dsub+0x384>
 800118a:	e1c8      	b.n	800151e <__aeabi_dsub+0x716>
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	0309      	lsls	r1, r1, #12
 8001190:	430b      	orrs	r3, r1
 8001192:	031b      	lsls	r3, r3, #12
 8001194:	49d5      	ldr	r1, [pc, #852]	; (80014ec <__aeabi_dsub+0x6e4>)
 8001196:	0b1b      	lsrs	r3, r3, #12
 8001198:	e6da      	b.n	8000f50 <__aeabi_dsub+0x148>
 800119a:	49d5      	ldr	r1, [pc, #852]	; (80014f0 <__aeabi_dsub+0x6e8>)
 800119c:	1ab6      	subs	r6, r6, r2
 800119e:	400b      	ands	r3, r1
 80011a0:	4698      	mov	r8, r3
 80011a2:	e6b5      	b.n	8000f10 <__aeabi_dsub+0x108>
 80011a4:	0020      	movs	r0, r4
 80011a6:	f000 faa3 	bl	80016f0 <__clzsi2>
 80011aa:	0002      	movs	r2, r0
 80011ac:	3218      	adds	r2, #24
 80011ae:	2a1f      	cmp	r2, #31
 80011b0:	dc00      	bgt.n	80011b4 <__aeabi_dsub+0x3ac>
 80011b2:	e68f      	b.n	8000ed4 <__aeabi_dsub+0xcc>
 80011b4:	0023      	movs	r3, r4
 80011b6:	3808      	subs	r0, #8
 80011b8:	4083      	lsls	r3, r0
 80011ba:	2400      	movs	r4, #0
 80011bc:	e692      	b.n	8000ee4 <__aeabi_dsub+0xdc>
 80011be:	4308      	orrs	r0, r1
 80011c0:	0002      	movs	r2, r0
 80011c2:	1e50      	subs	r0, r2, #1
 80011c4:	4182      	sbcs	r2, r0
 80011c6:	e66d      	b.n	8000ea4 <__aeabi_dsub+0x9c>
 80011c8:	4cca      	ldr	r4, [pc, #808]	; (80014f4 <__aeabi_dsub+0x6ec>)
 80011ca:	1c72      	adds	r2, r6, #1
 80011cc:	4222      	tst	r2, r4
 80011ce:	d000      	beq.n	80011d2 <__aeabi_dsub+0x3ca>
 80011d0:	e0ad      	b.n	800132e <__aeabi_dsub+0x526>
 80011d2:	464a      	mov	r2, r9
 80011d4:	431a      	orrs	r2, r3
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	d1b8      	bne.n	800114c <__aeabi_dsub+0x344>
 80011da:	2a00      	cmp	r2, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_dsub+0x3d8>
 80011de:	e158      	b.n	8001492 <__aeabi_dsub+0x68a>
 80011e0:	000a      	movs	r2, r1
 80011e2:	4302      	orrs	r2, r0
 80011e4:	d000      	beq.n	80011e8 <__aeabi_dsub+0x3e0>
 80011e6:	e159      	b.n	800149c <__aeabi_dsub+0x694>
 80011e8:	464a      	mov	r2, r9
 80011ea:	0759      	lsls	r1, r3, #29
 80011ec:	08d2      	lsrs	r2, r2, #3
 80011ee:	430a      	orrs	r2, r1
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	e786      	b.n	8001102 <__aeabi_dsub+0x2fa>
 80011f4:	464a      	mov	r2, r9
 80011f6:	0759      	lsls	r1, r3, #29
 80011f8:	08d2      	lsrs	r2, r2, #3
 80011fa:	430a      	orrs	r2, r1
 80011fc:	08db      	lsrs	r3, r3, #3
 80011fe:	e7c1      	b.n	8001184 <__aeabi_dsub+0x37c>
 8001200:	4dba      	ldr	r5, [pc, #744]	; (80014ec <__aeabi_dsub+0x6e4>)
 8001202:	42aa      	cmp	r2, r5
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x400>
 8001206:	e11e      	b.n	8001446 <__aeabi_dsub+0x63e>
 8001208:	2580      	movs	r5, #128	; 0x80
 800120a:	042d      	lsls	r5, r5, #16
 800120c:	432b      	orrs	r3, r5
 800120e:	4664      	mov	r4, ip
 8001210:	2c38      	cmp	r4, #56	; 0x38
 8001212:	dc5d      	bgt.n	80012d0 <__aeabi_dsub+0x4c8>
 8001214:	2c1f      	cmp	r4, #31
 8001216:	dd00      	ble.n	800121a <__aeabi_dsub+0x412>
 8001218:	e0d0      	b.n	80013bc <__aeabi_dsub+0x5b4>
 800121a:	2520      	movs	r5, #32
 800121c:	4667      	mov	r7, ip
 800121e:	1b2d      	subs	r5, r5, r4
 8001220:	464e      	mov	r6, r9
 8001222:	001c      	movs	r4, r3
 8001224:	40fe      	lsrs	r6, r7
 8001226:	40ac      	lsls	r4, r5
 8001228:	4334      	orrs	r4, r6
 800122a:	464e      	mov	r6, r9
 800122c:	40ae      	lsls	r6, r5
 800122e:	0035      	movs	r5, r6
 8001230:	40fb      	lsrs	r3, r7
 8001232:	1e6e      	subs	r6, r5, #1
 8001234:	41b5      	sbcs	r5, r6
 8001236:	1ac9      	subs	r1, r1, r3
 8001238:	432c      	orrs	r4, r5
 800123a:	e04e      	b.n	80012da <__aeabi_dsub+0x4d2>
 800123c:	464a      	mov	r2, r9
 800123e:	1a14      	subs	r4, r2, r0
 8001240:	45a1      	cmp	r9, r4
 8001242:	4192      	sbcs	r2, r2
 8001244:	4252      	negs	r2, r2
 8001246:	4690      	mov	r8, r2
 8001248:	1a5f      	subs	r7, r3, r1
 800124a:	003a      	movs	r2, r7
 800124c:	4647      	mov	r7, r8
 800124e:	1bd2      	subs	r2, r2, r7
 8001250:	4690      	mov	r8, r2
 8001252:	0212      	lsls	r2, r2, #8
 8001254:	d500      	bpl.n	8001258 <__aeabi_dsub+0x450>
 8001256:	e08b      	b.n	8001370 <__aeabi_dsub+0x568>
 8001258:	4642      	mov	r2, r8
 800125a:	4322      	orrs	r2, r4
 800125c:	d000      	beq.n	8001260 <__aeabi_dsub+0x458>
 800125e:	e630      	b.n	8000ec2 <__aeabi_dsub+0xba>
 8001260:	2300      	movs	r3, #0
 8001262:	2500      	movs	r5, #0
 8001264:	e74d      	b.n	8001102 <__aeabi_dsub+0x2fa>
 8001266:	464a      	mov	r2, r9
 8001268:	0759      	lsls	r1, r3, #29
 800126a:	08d2      	lsrs	r2, r2, #3
 800126c:	430a      	orrs	r2, r1
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	e744      	b.n	80010fc <__aeabi_dsub+0x2f4>
 8001272:	4642      	mov	r2, r8
 8001274:	4b9e      	ldr	r3, [pc, #632]	; (80014f0 <__aeabi_dsub+0x6e8>)
 8001276:	0861      	lsrs	r1, r4, #1
 8001278:	401a      	ands	r2, r3
 800127a:	0013      	movs	r3, r2
 800127c:	2201      	movs	r2, #1
 800127e:	4014      	ands	r4, r2
 8001280:	430c      	orrs	r4, r1
 8001282:	07da      	lsls	r2, r3, #31
 8001284:	085b      	lsrs	r3, r3, #1
 8001286:	4698      	mov	r8, r3
 8001288:	4314      	orrs	r4, r2
 800128a:	e641      	b.n	8000f10 <__aeabi_dsub+0x108>
 800128c:	001a      	movs	r2, r3
 800128e:	3e1f      	subs	r6, #31
 8001290:	40f2      	lsrs	r2, r6
 8001292:	0016      	movs	r6, r2
 8001294:	2920      	cmp	r1, #32
 8001296:	d003      	beq.n	80012a0 <__aeabi_dsub+0x498>
 8001298:	2240      	movs	r2, #64	; 0x40
 800129a:	1a51      	subs	r1, r2, r1
 800129c:	408b      	lsls	r3, r1
 800129e:	431c      	orrs	r4, r3
 80012a0:	1e62      	subs	r2, r4, #1
 80012a2:	4194      	sbcs	r4, r2
 80012a4:	2300      	movs	r3, #0
 80012a6:	4334      	orrs	r4, r6
 80012a8:	4698      	mov	r8, r3
 80012aa:	2600      	movs	r6, #0
 80012ac:	e71d      	b.n	80010ea <__aeabi_dsub+0x2e2>
 80012ae:	000c      	movs	r4, r1
 80012b0:	3a20      	subs	r2, #32
 80012b2:	40d4      	lsrs	r4, r2
 80012b4:	0022      	movs	r2, r4
 80012b6:	4664      	mov	r4, ip
 80012b8:	2c20      	cmp	r4, #32
 80012ba:	d004      	beq.n	80012c6 <__aeabi_dsub+0x4be>
 80012bc:	2740      	movs	r7, #64	; 0x40
 80012be:	1b3f      	subs	r7, r7, r4
 80012c0:	40b9      	lsls	r1, r7
 80012c2:	4308      	orrs	r0, r1
 80012c4:	4680      	mov	r8, r0
 80012c6:	4644      	mov	r4, r8
 80012c8:	1e61      	subs	r1, r4, #1
 80012ca:	418c      	sbcs	r4, r1
 80012cc:	4322      	orrs	r2, r4
 80012ce:	e5e9      	b.n	8000ea4 <__aeabi_dsub+0x9c>
 80012d0:	464c      	mov	r4, r9
 80012d2:	4323      	orrs	r3, r4
 80012d4:	001c      	movs	r4, r3
 80012d6:	1e63      	subs	r3, r4, #1
 80012d8:	419c      	sbcs	r4, r3
 80012da:	1b04      	subs	r4, r0, r4
 80012dc:	42a0      	cmp	r0, r4
 80012de:	419b      	sbcs	r3, r3
 80012e0:	425b      	negs	r3, r3
 80012e2:	1acb      	subs	r3, r1, r3
 80012e4:	4698      	mov	r8, r3
 80012e6:	465d      	mov	r5, fp
 80012e8:	0016      	movs	r6, r2
 80012ea:	e5e2      	b.n	8000eb2 <__aeabi_dsub+0xaa>
 80012ec:	464e      	mov	r6, r9
 80012ee:	431e      	orrs	r6, r3
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dsub+0x4ec>
 80012f2:	e0ae      	b.n	8001452 <__aeabi_dsub+0x64a>
 80012f4:	1e66      	subs	r6, r4, #1
 80012f6:	2c01      	cmp	r4, #1
 80012f8:	d100      	bne.n	80012fc <__aeabi_dsub+0x4f4>
 80012fa:	e0fd      	b.n	80014f8 <__aeabi_dsub+0x6f0>
 80012fc:	4f7b      	ldr	r7, [pc, #492]	; (80014ec <__aeabi_dsub+0x6e4>)
 80012fe:	42bc      	cmp	r4, r7
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x4fc>
 8001302:	e107      	b.n	8001514 <__aeabi_dsub+0x70c>
 8001304:	46b4      	mov	ip, r6
 8001306:	e69b      	b.n	8001040 <__aeabi_dsub+0x238>
 8001308:	4664      	mov	r4, ip
 800130a:	2220      	movs	r2, #32
 800130c:	1b12      	subs	r2, r2, r4
 800130e:	000c      	movs	r4, r1
 8001310:	4094      	lsls	r4, r2
 8001312:	0007      	movs	r7, r0
 8001314:	4090      	lsls	r0, r2
 8001316:	46a0      	mov	r8, r4
 8001318:	4664      	mov	r4, ip
 800131a:	1e42      	subs	r2, r0, #1
 800131c:	4190      	sbcs	r0, r2
 800131e:	4662      	mov	r2, ip
 8001320:	40e7      	lsrs	r7, r4
 8001322:	4644      	mov	r4, r8
 8001324:	40d1      	lsrs	r1, r2
 8001326:	433c      	orrs	r4, r7
 8001328:	4304      	orrs	r4, r0
 800132a:	185b      	adds	r3, r3, r1
 800132c:	e6f3      	b.n	8001116 <__aeabi_dsub+0x30e>
 800132e:	4c6f      	ldr	r4, [pc, #444]	; (80014ec <__aeabi_dsub+0x6e4>)
 8001330:	42a2      	cmp	r2, r4
 8001332:	d100      	bne.n	8001336 <__aeabi_dsub+0x52e>
 8001334:	e0d5      	b.n	80014e2 <__aeabi_dsub+0x6da>
 8001336:	4448      	add	r0, r9
 8001338:	185b      	adds	r3, r3, r1
 800133a:	4548      	cmp	r0, r9
 800133c:	4189      	sbcs	r1, r1
 800133e:	4249      	negs	r1, r1
 8001340:	185b      	adds	r3, r3, r1
 8001342:	07dc      	lsls	r4, r3, #31
 8001344:	0840      	lsrs	r0, r0, #1
 8001346:	085b      	lsrs	r3, r3, #1
 8001348:	4698      	mov	r8, r3
 800134a:	0016      	movs	r6, r2
 800134c:	4304      	orrs	r4, r0
 800134e:	e6cc      	b.n	80010ea <__aeabi_dsub+0x2e2>
 8001350:	2a00      	cmp	r2, #0
 8001352:	d000      	beq.n	8001356 <__aeabi_dsub+0x54e>
 8001354:	e082      	b.n	800145c <__aeabi_dsub+0x654>
 8001356:	000a      	movs	r2, r1
 8001358:	4302      	orrs	r2, r0
 800135a:	d140      	bne.n	80013de <__aeabi_dsub+0x5d6>
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	2500      	movs	r5, #0
 8001360:	031b      	lsls	r3, r3, #12
 8001362:	e713      	b.n	800118c <__aeabi_dsub+0x384>
 8001364:	074b      	lsls	r3, r1, #29
 8001366:	08c2      	lsrs	r2, r0, #3
 8001368:	431a      	orrs	r2, r3
 800136a:	465d      	mov	r5, fp
 800136c:	08cb      	lsrs	r3, r1, #3
 800136e:	e6c5      	b.n	80010fc <__aeabi_dsub+0x2f4>
 8001370:	464a      	mov	r2, r9
 8001372:	1a84      	subs	r4, r0, r2
 8001374:	42a0      	cmp	r0, r4
 8001376:	4192      	sbcs	r2, r2
 8001378:	1acb      	subs	r3, r1, r3
 800137a:	4252      	negs	r2, r2
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	4698      	mov	r8, r3
 8001380:	465d      	mov	r5, fp
 8001382:	e59e      	b.n	8000ec2 <__aeabi_dsub+0xba>
 8001384:	464a      	mov	r2, r9
 8001386:	0759      	lsls	r1, r3, #29
 8001388:	08d2      	lsrs	r2, r2, #3
 800138a:	430a      	orrs	r2, r1
 800138c:	08db      	lsrs	r3, r3, #3
 800138e:	e6f9      	b.n	8001184 <__aeabi_dsub+0x37c>
 8001390:	464a      	mov	r2, r9
 8001392:	1a14      	subs	r4, r2, r0
 8001394:	45a1      	cmp	r9, r4
 8001396:	4192      	sbcs	r2, r2
 8001398:	1a5b      	subs	r3, r3, r1
 800139a:	4252      	negs	r2, r2
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	4698      	mov	r8, r3
 80013a0:	2601      	movs	r6, #1
 80013a2:	e586      	b.n	8000eb2 <__aeabi_dsub+0xaa>
 80013a4:	464a      	mov	r2, r9
 80013a6:	0759      	lsls	r1, r3, #29
 80013a8:	08d2      	lsrs	r2, r2, #3
 80013aa:	430a      	orrs	r2, r1
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	e6a5      	b.n	80010fc <__aeabi_dsub+0x2f4>
 80013b0:	464c      	mov	r4, r9
 80013b2:	4323      	orrs	r3, r4
 80013b4:	001c      	movs	r4, r3
 80013b6:	1e63      	subs	r3, r4, #1
 80013b8:	419c      	sbcs	r4, r3
 80013ba:	e65b      	b.n	8001074 <__aeabi_dsub+0x26c>
 80013bc:	4665      	mov	r5, ip
 80013be:	001e      	movs	r6, r3
 80013c0:	3d20      	subs	r5, #32
 80013c2:	40ee      	lsrs	r6, r5
 80013c4:	2c20      	cmp	r4, #32
 80013c6:	d005      	beq.n	80013d4 <__aeabi_dsub+0x5cc>
 80013c8:	2540      	movs	r5, #64	; 0x40
 80013ca:	1b2d      	subs	r5, r5, r4
 80013cc:	40ab      	lsls	r3, r5
 80013ce:	464c      	mov	r4, r9
 80013d0:	431c      	orrs	r4, r3
 80013d2:	46a2      	mov	sl, r4
 80013d4:	4654      	mov	r4, sl
 80013d6:	1e63      	subs	r3, r4, #1
 80013d8:	419c      	sbcs	r4, r3
 80013da:	4334      	orrs	r4, r6
 80013dc:	e77d      	b.n	80012da <__aeabi_dsub+0x4d2>
 80013de:	074b      	lsls	r3, r1, #29
 80013e0:	08c2      	lsrs	r2, r0, #3
 80013e2:	431a      	orrs	r2, r3
 80013e4:	465d      	mov	r5, fp
 80013e6:	08cb      	lsrs	r3, r1, #3
 80013e8:	e6cc      	b.n	8001184 <__aeabi_dsub+0x37c>
 80013ea:	000a      	movs	r2, r1
 80013ec:	4302      	orrs	r2, r0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dsub+0x5ea>
 80013f0:	e736      	b.n	8001260 <__aeabi_dsub+0x458>
 80013f2:	074b      	lsls	r3, r1, #29
 80013f4:	08c2      	lsrs	r2, r0, #3
 80013f6:	431a      	orrs	r2, r3
 80013f8:	465d      	mov	r5, fp
 80013fa:	08cb      	lsrs	r3, r1, #3
 80013fc:	e681      	b.n	8001102 <__aeabi_dsub+0x2fa>
 80013fe:	464a      	mov	r2, r9
 8001400:	1a84      	subs	r4, r0, r2
 8001402:	42a0      	cmp	r0, r4
 8001404:	4192      	sbcs	r2, r2
 8001406:	1acb      	subs	r3, r1, r3
 8001408:	4252      	negs	r2, r2
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	4698      	mov	r8, r3
 800140e:	465d      	mov	r5, fp
 8001410:	2601      	movs	r6, #1
 8001412:	e54e      	b.n	8000eb2 <__aeabi_dsub+0xaa>
 8001414:	074b      	lsls	r3, r1, #29
 8001416:	08c2      	lsrs	r2, r0, #3
 8001418:	431a      	orrs	r2, r3
 800141a:	08cb      	lsrs	r3, r1, #3
 800141c:	e6b2      	b.n	8001184 <__aeabi_dsub+0x37c>
 800141e:	464a      	mov	r2, r9
 8001420:	1a14      	subs	r4, r2, r0
 8001422:	45a1      	cmp	r9, r4
 8001424:	4192      	sbcs	r2, r2
 8001426:	1a5f      	subs	r7, r3, r1
 8001428:	4252      	negs	r2, r2
 800142a:	1aba      	subs	r2, r7, r2
 800142c:	4690      	mov	r8, r2
 800142e:	0212      	lsls	r2, r2, #8
 8001430:	d56b      	bpl.n	800150a <__aeabi_dsub+0x702>
 8001432:	464a      	mov	r2, r9
 8001434:	1a84      	subs	r4, r0, r2
 8001436:	42a0      	cmp	r0, r4
 8001438:	4192      	sbcs	r2, r2
 800143a:	1acb      	subs	r3, r1, r3
 800143c:	4252      	negs	r2, r2
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	4698      	mov	r8, r3
 8001442:	465d      	mov	r5, fp
 8001444:	e564      	b.n	8000f10 <__aeabi_dsub+0x108>
 8001446:	074b      	lsls	r3, r1, #29
 8001448:	08c2      	lsrs	r2, r0, #3
 800144a:	431a      	orrs	r2, r3
 800144c:	465d      	mov	r5, fp
 800144e:	08cb      	lsrs	r3, r1, #3
 8001450:	e698      	b.n	8001184 <__aeabi_dsub+0x37c>
 8001452:	074b      	lsls	r3, r1, #29
 8001454:	08c2      	lsrs	r2, r0, #3
 8001456:	431a      	orrs	r2, r3
 8001458:	08cb      	lsrs	r3, r1, #3
 800145a:	e64f      	b.n	80010fc <__aeabi_dsub+0x2f4>
 800145c:	000a      	movs	r2, r1
 800145e:	4302      	orrs	r2, r0
 8001460:	d090      	beq.n	8001384 <__aeabi_dsub+0x57c>
 8001462:	464a      	mov	r2, r9
 8001464:	075c      	lsls	r4, r3, #29
 8001466:	08d2      	lsrs	r2, r2, #3
 8001468:	4314      	orrs	r4, r2
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	0312      	lsls	r2, r2, #12
 8001470:	4213      	tst	r3, r2
 8001472:	d008      	beq.n	8001486 <__aeabi_dsub+0x67e>
 8001474:	08ce      	lsrs	r6, r1, #3
 8001476:	4216      	tst	r6, r2
 8001478:	d105      	bne.n	8001486 <__aeabi_dsub+0x67e>
 800147a:	08c0      	lsrs	r0, r0, #3
 800147c:	0749      	lsls	r1, r1, #29
 800147e:	4308      	orrs	r0, r1
 8001480:	0004      	movs	r4, r0
 8001482:	465d      	mov	r5, fp
 8001484:	0033      	movs	r3, r6
 8001486:	0f61      	lsrs	r1, r4, #29
 8001488:	00e2      	lsls	r2, r4, #3
 800148a:	0749      	lsls	r1, r1, #29
 800148c:	08d2      	lsrs	r2, r2, #3
 800148e:	430a      	orrs	r2, r1
 8001490:	e678      	b.n	8001184 <__aeabi_dsub+0x37c>
 8001492:	074b      	lsls	r3, r1, #29
 8001494:	08c2      	lsrs	r2, r0, #3
 8001496:	431a      	orrs	r2, r3
 8001498:	08cb      	lsrs	r3, r1, #3
 800149a:	e632      	b.n	8001102 <__aeabi_dsub+0x2fa>
 800149c:	4448      	add	r0, r9
 800149e:	185b      	adds	r3, r3, r1
 80014a0:	4548      	cmp	r0, r9
 80014a2:	4192      	sbcs	r2, r2
 80014a4:	4698      	mov	r8, r3
 80014a6:	4252      	negs	r2, r2
 80014a8:	4490      	add	r8, r2
 80014aa:	4643      	mov	r3, r8
 80014ac:	0004      	movs	r4, r0
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	d400      	bmi.n	80014b4 <__aeabi_dsub+0x6ac>
 80014b2:	e61a      	b.n	80010ea <__aeabi_dsub+0x2e2>
 80014b4:	4642      	mov	r2, r8
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <__aeabi_dsub+0x6e8>)
 80014b8:	2601      	movs	r6, #1
 80014ba:	401a      	ands	r2, r3
 80014bc:	4690      	mov	r8, r2
 80014be:	e614      	b.n	80010ea <__aeabi_dsub+0x2e2>
 80014c0:	4666      	mov	r6, ip
 80014c2:	001f      	movs	r7, r3
 80014c4:	3e20      	subs	r6, #32
 80014c6:	40f7      	lsrs	r7, r6
 80014c8:	2c20      	cmp	r4, #32
 80014ca:	d005      	beq.n	80014d8 <__aeabi_dsub+0x6d0>
 80014cc:	2640      	movs	r6, #64	; 0x40
 80014ce:	1b36      	subs	r6, r6, r4
 80014d0:	40b3      	lsls	r3, r6
 80014d2:	464c      	mov	r4, r9
 80014d4:	431c      	orrs	r4, r3
 80014d6:	46a2      	mov	sl, r4
 80014d8:	4654      	mov	r4, sl
 80014da:	1e63      	subs	r3, r4, #1
 80014dc:	419c      	sbcs	r4, r3
 80014de:	433c      	orrs	r4, r7
 80014e0:	e5c8      	b.n	8001074 <__aeabi_dsub+0x26c>
 80014e2:	0011      	movs	r1, r2
 80014e4:	2300      	movs	r3, #0
 80014e6:	2200      	movs	r2, #0
 80014e8:	e532      	b.n	8000f50 <__aeabi_dsub+0x148>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	000007ff 	.word	0x000007ff
 80014f0:	ff7fffff 	.word	0xff7fffff
 80014f4:	000007fe 	.word	0x000007fe
 80014f8:	464a      	mov	r2, r9
 80014fa:	1814      	adds	r4, r2, r0
 80014fc:	4284      	cmp	r4, r0
 80014fe:	4192      	sbcs	r2, r2
 8001500:	185b      	adds	r3, r3, r1
 8001502:	4698      	mov	r8, r3
 8001504:	4252      	negs	r2, r2
 8001506:	4490      	add	r8, r2
 8001508:	e5e9      	b.n	80010de <__aeabi_dsub+0x2d6>
 800150a:	4642      	mov	r2, r8
 800150c:	4322      	orrs	r2, r4
 800150e:	d100      	bne.n	8001512 <__aeabi_dsub+0x70a>
 8001510:	e6a6      	b.n	8001260 <__aeabi_dsub+0x458>
 8001512:	e5ea      	b.n	80010ea <__aeabi_dsub+0x2e2>
 8001514:	074b      	lsls	r3, r1, #29
 8001516:	08c2      	lsrs	r2, r0, #3
 8001518:	431a      	orrs	r2, r3
 800151a:	08cb      	lsrs	r3, r1, #3
 800151c:	e632      	b.n	8001184 <__aeabi_dsub+0x37c>
 800151e:	2200      	movs	r2, #0
 8001520:	4901      	ldr	r1, [pc, #4]	; (8001528 <__aeabi_dsub+0x720>)
 8001522:	0013      	movs	r3, r2
 8001524:	e514      	b.n	8000f50 <__aeabi_dsub+0x148>
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff

0800152c <__aeabi_d2iz>:
 800152c:	000a      	movs	r2, r1
 800152e:	b530      	push	{r4, r5, lr}
 8001530:	4c13      	ldr	r4, [pc, #76]	; (8001580 <__aeabi_d2iz+0x54>)
 8001532:	0053      	lsls	r3, r2, #1
 8001534:	0309      	lsls	r1, r1, #12
 8001536:	0005      	movs	r5, r0
 8001538:	0b09      	lsrs	r1, r1, #12
 800153a:	2000      	movs	r0, #0
 800153c:	0d5b      	lsrs	r3, r3, #21
 800153e:	0fd2      	lsrs	r2, r2, #31
 8001540:	42a3      	cmp	r3, r4
 8001542:	dd04      	ble.n	800154e <__aeabi_d2iz+0x22>
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <__aeabi_d2iz+0x58>)
 8001546:	4283      	cmp	r3, r0
 8001548:	dd02      	ble.n	8001550 <__aeabi_d2iz+0x24>
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <__aeabi_d2iz+0x5c>)
 800154c:	18d0      	adds	r0, r2, r3
 800154e:	bd30      	pop	{r4, r5, pc}
 8001550:	2080      	movs	r0, #128	; 0x80
 8001552:	0340      	lsls	r0, r0, #13
 8001554:	4301      	orrs	r1, r0
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <__aeabi_d2iz+0x60>)
 8001558:	1ac0      	subs	r0, r0, r3
 800155a:	281f      	cmp	r0, #31
 800155c:	dd08      	ble.n	8001570 <__aeabi_d2iz+0x44>
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <__aeabi_d2iz+0x64>)
 8001560:	1ac3      	subs	r3, r0, r3
 8001562:	40d9      	lsrs	r1, r3
 8001564:	000b      	movs	r3, r1
 8001566:	4258      	negs	r0, r3
 8001568:	2a00      	cmp	r2, #0
 800156a:	d1f0      	bne.n	800154e <__aeabi_d2iz+0x22>
 800156c:	0018      	movs	r0, r3
 800156e:	e7ee      	b.n	800154e <__aeabi_d2iz+0x22>
 8001570:	4c08      	ldr	r4, [pc, #32]	; (8001594 <__aeabi_d2iz+0x68>)
 8001572:	40c5      	lsrs	r5, r0
 8001574:	46a4      	mov	ip, r4
 8001576:	4463      	add	r3, ip
 8001578:	4099      	lsls	r1, r3
 800157a:	000b      	movs	r3, r1
 800157c:	432b      	orrs	r3, r5
 800157e:	e7f2      	b.n	8001566 <__aeabi_d2iz+0x3a>
 8001580:	000003fe 	.word	0x000003fe
 8001584:	0000041d 	.word	0x0000041d
 8001588:	7fffffff 	.word	0x7fffffff
 800158c:	00000433 	.word	0x00000433
 8001590:	00000413 	.word	0x00000413
 8001594:	fffffbed 	.word	0xfffffbed

08001598 <__aeabi_ui2d>:
 8001598:	b510      	push	{r4, lr}
 800159a:	1e04      	subs	r4, r0, #0
 800159c:	d010      	beq.n	80015c0 <__aeabi_ui2d+0x28>
 800159e:	f000 f8a7 	bl	80016f0 <__clzsi2>
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <__aeabi_ui2d+0x48>)
 80015a4:	1a1b      	subs	r3, r3, r0
 80015a6:	280a      	cmp	r0, #10
 80015a8:	dc11      	bgt.n	80015ce <__aeabi_ui2d+0x36>
 80015aa:	220b      	movs	r2, #11
 80015ac:	0021      	movs	r1, r4
 80015ae:	1a12      	subs	r2, r2, r0
 80015b0:	40d1      	lsrs	r1, r2
 80015b2:	3015      	adds	r0, #21
 80015b4:	030a      	lsls	r2, r1, #12
 80015b6:	055b      	lsls	r3, r3, #21
 80015b8:	4084      	lsls	r4, r0
 80015ba:	0b12      	lsrs	r2, r2, #12
 80015bc:	0d5b      	lsrs	r3, r3, #21
 80015be:	e001      	b.n	80015c4 <__aeabi_ui2d+0x2c>
 80015c0:	2300      	movs	r3, #0
 80015c2:	2200      	movs	r2, #0
 80015c4:	051b      	lsls	r3, r3, #20
 80015c6:	4313      	orrs	r3, r2
 80015c8:	0020      	movs	r0, r4
 80015ca:	0019      	movs	r1, r3
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	0022      	movs	r2, r4
 80015d0:	380b      	subs	r0, #11
 80015d2:	4082      	lsls	r2, r0
 80015d4:	055b      	lsls	r3, r3, #21
 80015d6:	0312      	lsls	r2, r2, #12
 80015d8:	2400      	movs	r4, #0
 80015da:	0b12      	lsrs	r2, r2, #12
 80015dc:	0d5b      	lsrs	r3, r3, #21
 80015de:	e7f1      	b.n	80015c4 <__aeabi_ui2d+0x2c>
 80015e0:	0000041e 	.word	0x0000041e

080015e4 <__aeabi_f2d>:
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	0043      	lsls	r3, r0, #1
 80015e8:	0246      	lsls	r6, r0, #9
 80015ea:	0fc4      	lsrs	r4, r0, #31
 80015ec:	20fe      	movs	r0, #254	; 0xfe
 80015ee:	0e1b      	lsrs	r3, r3, #24
 80015f0:	1c59      	adds	r1, r3, #1
 80015f2:	0a75      	lsrs	r5, r6, #9
 80015f4:	4208      	tst	r0, r1
 80015f6:	d00c      	beq.n	8001612 <__aeabi_f2d+0x2e>
 80015f8:	22e0      	movs	r2, #224	; 0xe0
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4694      	mov	ip, r2
 80015fe:	076d      	lsls	r5, r5, #29
 8001600:	0b36      	lsrs	r6, r6, #12
 8001602:	4463      	add	r3, ip
 8001604:	051b      	lsls	r3, r3, #20
 8001606:	4333      	orrs	r3, r6
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4323      	orrs	r3, r4
 800160c:	0028      	movs	r0, r5
 800160e:	0019      	movs	r1, r3
 8001610:	bd70      	pop	{r4, r5, r6, pc}
 8001612:	2b00      	cmp	r3, #0
 8001614:	d114      	bne.n	8001640 <__aeabi_f2d+0x5c>
 8001616:	2d00      	cmp	r5, #0
 8001618:	d01b      	beq.n	8001652 <__aeabi_f2d+0x6e>
 800161a:	0028      	movs	r0, r5
 800161c:	f000 f868 	bl	80016f0 <__clzsi2>
 8001620:	280a      	cmp	r0, #10
 8001622:	dc1c      	bgt.n	800165e <__aeabi_f2d+0x7a>
 8001624:	230b      	movs	r3, #11
 8001626:	002a      	movs	r2, r5
 8001628:	1a1b      	subs	r3, r3, r0
 800162a:	40da      	lsrs	r2, r3
 800162c:	0003      	movs	r3, r0
 800162e:	3315      	adds	r3, #21
 8001630:	409d      	lsls	r5, r3
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <__aeabi_f2d+0x88>)
 8001634:	0312      	lsls	r2, r2, #12
 8001636:	1a1b      	subs	r3, r3, r0
 8001638:	055b      	lsls	r3, r3, #21
 800163a:	0b16      	lsrs	r6, r2, #12
 800163c:	0d5b      	lsrs	r3, r3, #21
 800163e:	e7e1      	b.n	8001604 <__aeabi_f2d+0x20>
 8001640:	2d00      	cmp	r5, #0
 8001642:	d009      	beq.n	8001658 <__aeabi_f2d+0x74>
 8001644:	0b32      	lsrs	r2, r6, #12
 8001646:	2680      	movs	r6, #128	; 0x80
 8001648:	0336      	lsls	r6, r6, #12
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <__aeabi_f2d+0x8c>)
 800164c:	076d      	lsls	r5, r5, #29
 800164e:	4316      	orrs	r6, r2
 8001650:	e7d8      	b.n	8001604 <__aeabi_f2d+0x20>
 8001652:	2300      	movs	r3, #0
 8001654:	2600      	movs	r6, #0
 8001656:	e7d5      	b.n	8001604 <__aeabi_f2d+0x20>
 8001658:	2600      	movs	r6, #0
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <__aeabi_f2d+0x8c>)
 800165c:	e7d2      	b.n	8001604 <__aeabi_f2d+0x20>
 800165e:	0003      	movs	r3, r0
 8001660:	002a      	movs	r2, r5
 8001662:	3b0b      	subs	r3, #11
 8001664:	409a      	lsls	r2, r3
 8001666:	2500      	movs	r5, #0
 8001668:	e7e3      	b.n	8001632 <__aeabi_f2d+0x4e>
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	00000389 	.word	0x00000389
 8001670:	000007ff 	.word	0x000007ff

08001674 <__aeabi_cdrcmple>:
 8001674:	4684      	mov	ip, r0
 8001676:	1c10      	adds	r0, r2, #0
 8001678:	4662      	mov	r2, ip
 800167a:	468c      	mov	ip, r1
 800167c:	1c19      	adds	r1, r3, #0
 800167e:	4663      	mov	r3, ip
 8001680:	e000      	b.n	8001684 <__aeabi_cdcmpeq>
 8001682:	46c0      	nop			; (mov r8, r8)

08001684 <__aeabi_cdcmpeq>:
 8001684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001686:	f000 f8ff 	bl	8001888 <__ledf2>
 800168a:	2800      	cmp	r0, #0
 800168c:	d401      	bmi.n	8001692 <__aeabi_cdcmpeq+0xe>
 800168e:	2100      	movs	r1, #0
 8001690:	42c8      	cmn	r0, r1
 8001692:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001694 <__aeabi_dcmpeq>:
 8001694:	b510      	push	{r4, lr}
 8001696:	f000 f849 	bl	800172c <__eqdf2>
 800169a:	4240      	negs	r0, r0
 800169c:	3001      	adds	r0, #1
 800169e:	bd10      	pop	{r4, pc}

080016a0 <__aeabi_dcmplt>:
 80016a0:	b510      	push	{r4, lr}
 80016a2:	f000 f8f1 	bl	8001888 <__ledf2>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	db01      	blt.n	80016ae <__aeabi_dcmplt+0xe>
 80016aa:	2000      	movs	r0, #0
 80016ac:	bd10      	pop	{r4, pc}
 80016ae:	2001      	movs	r0, #1
 80016b0:	bd10      	pop	{r4, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)

080016b4 <__aeabi_dcmple>:
 80016b4:	b510      	push	{r4, lr}
 80016b6:	f000 f8e7 	bl	8001888 <__ledf2>
 80016ba:	2800      	cmp	r0, #0
 80016bc:	dd01      	ble.n	80016c2 <__aeabi_dcmple+0xe>
 80016be:	2000      	movs	r0, #0
 80016c0:	bd10      	pop	{r4, pc}
 80016c2:	2001      	movs	r0, #1
 80016c4:	bd10      	pop	{r4, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)

080016c8 <__aeabi_dcmpgt>:
 80016c8:	b510      	push	{r4, lr}
 80016ca:	f000 f86b 	bl	80017a4 <__gedf2>
 80016ce:	2800      	cmp	r0, #0
 80016d0:	dc01      	bgt.n	80016d6 <__aeabi_dcmpgt+0xe>
 80016d2:	2000      	movs	r0, #0
 80016d4:	bd10      	pop	{r4, pc}
 80016d6:	2001      	movs	r0, #1
 80016d8:	bd10      	pop	{r4, pc}
 80016da:	46c0      	nop			; (mov r8, r8)

080016dc <__aeabi_dcmpge>:
 80016dc:	b510      	push	{r4, lr}
 80016de:	f000 f861 	bl	80017a4 <__gedf2>
 80016e2:	2800      	cmp	r0, #0
 80016e4:	da01      	bge.n	80016ea <__aeabi_dcmpge+0xe>
 80016e6:	2000      	movs	r0, #0
 80016e8:	bd10      	pop	{r4, pc}
 80016ea:	2001      	movs	r0, #1
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)

080016f0 <__clzsi2>:
 80016f0:	211c      	movs	r1, #28
 80016f2:	2301      	movs	r3, #1
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	4298      	cmp	r0, r3
 80016f8:	d301      	bcc.n	80016fe <__clzsi2+0xe>
 80016fa:	0c00      	lsrs	r0, r0, #16
 80016fc:	3910      	subs	r1, #16
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	4298      	cmp	r0, r3
 8001702:	d301      	bcc.n	8001708 <__clzsi2+0x18>
 8001704:	0a00      	lsrs	r0, r0, #8
 8001706:	3908      	subs	r1, #8
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	4298      	cmp	r0, r3
 800170c:	d301      	bcc.n	8001712 <__clzsi2+0x22>
 800170e:	0900      	lsrs	r0, r0, #4
 8001710:	3904      	subs	r1, #4
 8001712:	a202      	add	r2, pc, #8	; (adr r2, 800171c <__clzsi2+0x2c>)
 8001714:	5c10      	ldrb	r0, [r2, r0]
 8001716:	1840      	adds	r0, r0, r1
 8001718:	4770      	bx	lr
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	02020304 	.word	0x02020304
 8001720:	01010101 	.word	0x01010101
	...

0800172c <__eqdf2>:
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	464f      	mov	r7, r9
 8001730:	4646      	mov	r6, r8
 8001732:	46d6      	mov	lr, sl
 8001734:	4694      	mov	ip, r2
 8001736:	4691      	mov	r9, r2
 8001738:	031a      	lsls	r2, r3, #12
 800173a:	0b12      	lsrs	r2, r2, #12
 800173c:	4d18      	ldr	r5, [pc, #96]	; (80017a0 <__eqdf2+0x74>)
 800173e:	b5c0      	push	{r6, r7, lr}
 8001740:	004c      	lsls	r4, r1, #1
 8001742:	030f      	lsls	r7, r1, #12
 8001744:	4692      	mov	sl, r2
 8001746:	005a      	lsls	r2, r3, #1
 8001748:	0006      	movs	r6, r0
 800174a:	4680      	mov	r8, r0
 800174c:	0b3f      	lsrs	r7, r7, #12
 800174e:	2001      	movs	r0, #1
 8001750:	0d64      	lsrs	r4, r4, #21
 8001752:	0fc9      	lsrs	r1, r1, #31
 8001754:	0d52      	lsrs	r2, r2, #21
 8001756:	0fdb      	lsrs	r3, r3, #31
 8001758:	42ac      	cmp	r4, r5
 800175a:	d00a      	beq.n	8001772 <__eqdf2+0x46>
 800175c:	42aa      	cmp	r2, r5
 800175e:	d003      	beq.n	8001768 <__eqdf2+0x3c>
 8001760:	4294      	cmp	r4, r2
 8001762:	d101      	bne.n	8001768 <__eqdf2+0x3c>
 8001764:	4557      	cmp	r7, sl
 8001766:	d00d      	beq.n	8001784 <__eqdf2+0x58>
 8001768:	bce0      	pop	{r5, r6, r7}
 800176a:	46ba      	mov	sl, r7
 800176c:	46b1      	mov	r9, r6
 800176e:	46a8      	mov	r8, r5
 8001770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001772:	003d      	movs	r5, r7
 8001774:	4335      	orrs	r5, r6
 8001776:	d1f7      	bne.n	8001768 <__eqdf2+0x3c>
 8001778:	42a2      	cmp	r2, r4
 800177a:	d1f5      	bne.n	8001768 <__eqdf2+0x3c>
 800177c:	4652      	mov	r2, sl
 800177e:	4665      	mov	r5, ip
 8001780:	432a      	orrs	r2, r5
 8001782:	d1f1      	bne.n	8001768 <__eqdf2+0x3c>
 8001784:	2001      	movs	r0, #1
 8001786:	45c8      	cmp	r8, r9
 8001788:	d1ee      	bne.n	8001768 <__eqdf2+0x3c>
 800178a:	4299      	cmp	r1, r3
 800178c:	d006      	beq.n	800179c <__eqdf2+0x70>
 800178e:	2c00      	cmp	r4, #0
 8001790:	d1ea      	bne.n	8001768 <__eqdf2+0x3c>
 8001792:	433e      	orrs	r6, r7
 8001794:	0030      	movs	r0, r6
 8001796:	1e46      	subs	r6, r0, #1
 8001798:	41b0      	sbcs	r0, r6
 800179a:	e7e5      	b.n	8001768 <__eqdf2+0x3c>
 800179c:	2000      	movs	r0, #0
 800179e:	e7e3      	b.n	8001768 <__eqdf2+0x3c>
 80017a0:	000007ff 	.word	0x000007ff

080017a4 <__gedf2>:
 80017a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a6:	464e      	mov	r6, r9
 80017a8:	4645      	mov	r5, r8
 80017aa:	4657      	mov	r7, sl
 80017ac:	46de      	mov	lr, fp
 80017ae:	0004      	movs	r4, r0
 80017b0:	0018      	movs	r0, r3
 80017b2:	b5e0      	push	{r5, r6, r7, lr}
 80017b4:	0016      	movs	r6, r2
 80017b6:	031b      	lsls	r3, r3, #12
 80017b8:	0b1b      	lsrs	r3, r3, #12
 80017ba:	4d32      	ldr	r5, [pc, #200]	; (8001884 <__gedf2+0xe0>)
 80017bc:	030f      	lsls	r7, r1, #12
 80017be:	004a      	lsls	r2, r1, #1
 80017c0:	4699      	mov	r9, r3
 80017c2:	0043      	lsls	r3, r0, #1
 80017c4:	46a4      	mov	ip, r4
 80017c6:	46b0      	mov	r8, r6
 80017c8:	0b3f      	lsrs	r7, r7, #12
 80017ca:	0d52      	lsrs	r2, r2, #21
 80017cc:	0fc9      	lsrs	r1, r1, #31
 80017ce:	0d5b      	lsrs	r3, r3, #21
 80017d0:	0fc0      	lsrs	r0, r0, #31
 80017d2:	42aa      	cmp	r2, r5
 80017d4:	d029      	beq.n	800182a <__gedf2+0x86>
 80017d6:	42ab      	cmp	r3, r5
 80017d8:	d018      	beq.n	800180c <__gedf2+0x68>
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d12a      	bne.n	8001834 <__gedf2+0x90>
 80017de:	433c      	orrs	r4, r7
 80017e0:	46a3      	mov	fp, r4
 80017e2:	4265      	negs	r5, r4
 80017e4:	4165      	adcs	r5, r4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <__gedf2+0x4c>
 80017ea:	464c      	mov	r4, r9
 80017ec:	4326      	orrs	r6, r4
 80017ee:	d027      	beq.n	8001840 <__gedf2+0x9c>
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	d115      	bne.n	8001820 <__gedf2+0x7c>
 80017f4:	4281      	cmp	r1, r0
 80017f6:	d028      	beq.n	800184a <__gedf2+0xa6>
 80017f8:	2002      	movs	r0, #2
 80017fa:	3901      	subs	r1, #1
 80017fc:	4008      	ands	r0, r1
 80017fe:	3801      	subs	r0, #1
 8001800:	bcf0      	pop	{r4, r5, r6, r7}
 8001802:	46bb      	mov	fp, r7
 8001804:	46b2      	mov	sl, r6
 8001806:	46a9      	mov	r9, r5
 8001808:	46a0      	mov	r8, r4
 800180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180c:	464d      	mov	r5, r9
 800180e:	432e      	orrs	r6, r5
 8001810:	d12f      	bne.n	8001872 <__gedf2+0xce>
 8001812:	2a00      	cmp	r2, #0
 8001814:	d1ee      	bne.n	80017f4 <__gedf2+0x50>
 8001816:	433c      	orrs	r4, r7
 8001818:	4265      	negs	r5, r4
 800181a:	4165      	adcs	r5, r4
 800181c:	2d00      	cmp	r5, #0
 800181e:	d0e9      	beq.n	80017f4 <__gedf2+0x50>
 8001820:	2800      	cmp	r0, #0
 8001822:	d1ed      	bne.n	8001800 <__gedf2+0x5c>
 8001824:	2001      	movs	r0, #1
 8001826:	4240      	negs	r0, r0
 8001828:	e7ea      	b.n	8001800 <__gedf2+0x5c>
 800182a:	003d      	movs	r5, r7
 800182c:	4325      	orrs	r5, r4
 800182e:	d120      	bne.n	8001872 <__gedf2+0xce>
 8001830:	4293      	cmp	r3, r2
 8001832:	d0eb      	beq.n	800180c <__gedf2+0x68>
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1dd      	bne.n	80017f4 <__gedf2+0x50>
 8001838:	464c      	mov	r4, r9
 800183a:	4326      	orrs	r6, r4
 800183c:	d1da      	bne.n	80017f4 <__gedf2+0x50>
 800183e:	e7db      	b.n	80017f8 <__gedf2+0x54>
 8001840:	465b      	mov	r3, fp
 8001842:	2000      	movs	r0, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0db      	beq.n	8001800 <__gedf2+0x5c>
 8001848:	e7d6      	b.n	80017f8 <__gedf2+0x54>
 800184a:	429a      	cmp	r2, r3
 800184c:	dc0a      	bgt.n	8001864 <__gedf2+0xc0>
 800184e:	dbe7      	blt.n	8001820 <__gedf2+0x7c>
 8001850:	454f      	cmp	r7, r9
 8001852:	d8d1      	bhi.n	80017f8 <__gedf2+0x54>
 8001854:	d010      	beq.n	8001878 <__gedf2+0xd4>
 8001856:	2000      	movs	r0, #0
 8001858:	454f      	cmp	r7, r9
 800185a:	d2d1      	bcs.n	8001800 <__gedf2+0x5c>
 800185c:	2900      	cmp	r1, #0
 800185e:	d0e1      	beq.n	8001824 <__gedf2+0x80>
 8001860:	0008      	movs	r0, r1
 8001862:	e7cd      	b.n	8001800 <__gedf2+0x5c>
 8001864:	4243      	negs	r3, r0
 8001866:	4158      	adcs	r0, r3
 8001868:	2302      	movs	r3, #2
 800186a:	4240      	negs	r0, r0
 800186c:	4018      	ands	r0, r3
 800186e:	3801      	subs	r0, #1
 8001870:	e7c6      	b.n	8001800 <__gedf2+0x5c>
 8001872:	2002      	movs	r0, #2
 8001874:	4240      	negs	r0, r0
 8001876:	e7c3      	b.n	8001800 <__gedf2+0x5c>
 8001878:	45c4      	cmp	ip, r8
 800187a:	d8bd      	bhi.n	80017f8 <__gedf2+0x54>
 800187c:	2000      	movs	r0, #0
 800187e:	45c4      	cmp	ip, r8
 8001880:	d2be      	bcs.n	8001800 <__gedf2+0x5c>
 8001882:	e7eb      	b.n	800185c <__gedf2+0xb8>
 8001884:	000007ff 	.word	0x000007ff

08001888 <__ledf2>:
 8001888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188a:	464e      	mov	r6, r9
 800188c:	4645      	mov	r5, r8
 800188e:	4657      	mov	r7, sl
 8001890:	46de      	mov	lr, fp
 8001892:	0004      	movs	r4, r0
 8001894:	0018      	movs	r0, r3
 8001896:	b5e0      	push	{r5, r6, r7, lr}
 8001898:	0016      	movs	r6, r2
 800189a:	031b      	lsls	r3, r3, #12
 800189c:	0b1b      	lsrs	r3, r3, #12
 800189e:	4d31      	ldr	r5, [pc, #196]	; (8001964 <__ledf2+0xdc>)
 80018a0:	030f      	lsls	r7, r1, #12
 80018a2:	004a      	lsls	r2, r1, #1
 80018a4:	4699      	mov	r9, r3
 80018a6:	0043      	lsls	r3, r0, #1
 80018a8:	46a4      	mov	ip, r4
 80018aa:	46b0      	mov	r8, r6
 80018ac:	0b3f      	lsrs	r7, r7, #12
 80018ae:	0d52      	lsrs	r2, r2, #21
 80018b0:	0fc9      	lsrs	r1, r1, #31
 80018b2:	0d5b      	lsrs	r3, r3, #21
 80018b4:	0fc0      	lsrs	r0, r0, #31
 80018b6:	42aa      	cmp	r2, r5
 80018b8:	d011      	beq.n	80018de <__ledf2+0x56>
 80018ba:	42ab      	cmp	r3, r5
 80018bc:	d014      	beq.n	80018e8 <__ledf2+0x60>
 80018be:	2a00      	cmp	r2, #0
 80018c0:	d12f      	bne.n	8001922 <__ledf2+0x9a>
 80018c2:	433c      	orrs	r4, r7
 80018c4:	46a3      	mov	fp, r4
 80018c6:	4265      	negs	r5, r4
 80018c8:	4165      	adcs	r5, r4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d114      	bne.n	80018f8 <__ledf2+0x70>
 80018ce:	464c      	mov	r4, r9
 80018d0:	4326      	orrs	r6, r4
 80018d2:	d111      	bne.n	80018f8 <__ledf2+0x70>
 80018d4:	465b      	mov	r3, fp
 80018d6:	2000      	movs	r0, #0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d017      	beq.n	800190c <__ledf2+0x84>
 80018dc:	e010      	b.n	8001900 <__ledf2+0x78>
 80018de:	003d      	movs	r5, r7
 80018e0:	4325      	orrs	r5, r4
 80018e2:	d112      	bne.n	800190a <__ledf2+0x82>
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d11c      	bne.n	8001922 <__ledf2+0x9a>
 80018e8:	464d      	mov	r5, r9
 80018ea:	432e      	orrs	r6, r5
 80018ec:	d10d      	bne.n	800190a <__ledf2+0x82>
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d104      	bne.n	80018fc <__ledf2+0x74>
 80018f2:	433c      	orrs	r4, r7
 80018f4:	4265      	negs	r5, r4
 80018f6:	4165      	adcs	r5, r4
 80018f8:	2d00      	cmp	r5, #0
 80018fa:	d10d      	bne.n	8001918 <__ledf2+0x90>
 80018fc:	4281      	cmp	r1, r0
 80018fe:	d016      	beq.n	800192e <__ledf2+0xa6>
 8001900:	2002      	movs	r0, #2
 8001902:	3901      	subs	r1, #1
 8001904:	4008      	ands	r0, r1
 8001906:	3801      	subs	r0, #1
 8001908:	e000      	b.n	800190c <__ledf2+0x84>
 800190a:	2002      	movs	r0, #2
 800190c:	bcf0      	pop	{r4, r5, r6, r7}
 800190e:	46bb      	mov	fp, r7
 8001910:	46b2      	mov	sl, r6
 8001912:	46a9      	mov	r9, r5
 8001914:	46a0      	mov	r8, r4
 8001916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001918:	2800      	cmp	r0, #0
 800191a:	d1f7      	bne.n	800190c <__ledf2+0x84>
 800191c:	2001      	movs	r0, #1
 800191e:	4240      	negs	r0, r0
 8001920:	e7f4      	b.n	800190c <__ledf2+0x84>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ea      	bne.n	80018fc <__ledf2+0x74>
 8001926:	464c      	mov	r4, r9
 8001928:	4326      	orrs	r6, r4
 800192a:	d1e7      	bne.n	80018fc <__ledf2+0x74>
 800192c:	e7e8      	b.n	8001900 <__ledf2+0x78>
 800192e:	429a      	cmp	r2, r3
 8001930:	dd06      	ble.n	8001940 <__ledf2+0xb8>
 8001932:	4243      	negs	r3, r0
 8001934:	4158      	adcs	r0, r3
 8001936:	2302      	movs	r3, #2
 8001938:	4240      	negs	r0, r0
 800193a:	4018      	ands	r0, r3
 800193c:	3801      	subs	r0, #1
 800193e:	e7e5      	b.n	800190c <__ledf2+0x84>
 8001940:	429a      	cmp	r2, r3
 8001942:	dbe9      	blt.n	8001918 <__ledf2+0x90>
 8001944:	454f      	cmp	r7, r9
 8001946:	d8db      	bhi.n	8001900 <__ledf2+0x78>
 8001948:	d006      	beq.n	8001958 <__ledf2+0xd0>
 800194a:	2000      	movs	r0, #0
 800194c:	454f      	cmp	r7, r9
 800194e:	d2dd      	bcs.n	800190c <__ledf2+0x84>
 8001950:	2900      	cmp	r1, #0
 8001952:	d0e3      	beq.n	800191c <__ledf2+0x94>
 8001954:	0008      	movs	r0, r1
 8001956:	e7d9      	b.n	800190c <__ledf2+0x84>
 8001958:	45c4      	cmp	ip, r8
 800195a:	d8d1      	bhi.n	8001900 <__ledf2+0x78>
 800195c:	2000      	movs	r0, #0
 800195e:	45c4      	cmp	ip, r8
 8001960:	d2d4      	bcs.n	800190c <__ledf2+0x84>
 8001962:	e7f5      	b.n	8001950 <__ledf2+0xc8>
 8001964:	000007ff 	.word	0x000007ff

08001968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800196c:	f001 fb4a 	bl	8003004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001970:	f000 fa34 	bl	8001ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001974:	f000 fd10 	bl	8002398 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001978:	f000 fc78 	bl	800226c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800197c:	f000 fcdc 	bl	8002338 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8001980:	f000 fcb0 	bl	80022e4 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001984:	f000 fa8c 	bl	8001ea0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001988:	f000 fb4c 	bl	8002024 <MX_TIM2_Init>
  MX_TIM3_Init();
 800198c:	f000 fbd2 	bl	8002134 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2006      	movs	r0, #6
 8001996:	f001 fc45 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800199a:	2006      	movs	r0, #6
 800199c:	f001 fc57 	bl	800324e <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start_IT(&htim16);
 80019a0:	4bca      	ldr	r3, [pc, #808]	; (8001ccc <main+0x364>)
 80019a2:	0018      	movs	r0, r3
 80019a4:	f002 fc40 	bl	8004228 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80019a8:	4bc9      	ldr	r3, [pc, #804]	; (8001cd0 <main+0x368>)
 80019aa:	2100      	movs	r1, #0
 80019ac:	0018      	movs	r0, r3
 80019ae:	f002 fe9f 	bl	80046f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80019b2:	4bc7      	ldr	r3, [pc, #796]	; (8001cd0 <main+0x368>)
 80019b4:	2104      	movs	r1, #4
 80019b6:	0018      	movs	r0, r3
 80019b8:	f002 fe9a 	bl	80046f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80019bc:	4bc4      	ldr	r3, [pc, #784]	; (8001cd0 <main+0x368>)
 80019be:	2108      	movs	r1, #8
 80019c0:	0018      	movs	r0, r3
 80019c2:	f002 fe95 	bl	80046f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80019c6:	4bc2      	ldr	r3, [pc, #776]	; (8001cd0 <main+0x368>)
 80019c8:	210c      	movs	r1, #12
 80019ca:	0018      	movs	r0, r3
 80019cc:	f002 fe90 	bl	80046f0 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // sample the IR sensors and store the result in the corresponding variables
	  left2 = (HAL_GPIO_ReadPin(GPIOB, left2_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 80019d0:	4bc0      	ldr	r3, [pc, #768]	; (8001cd4 <main+0x36c>)
 80019d2:	2102      	movs	r1, #2
 80019d4:	0018      	movs	r0, r3
 80019d6:	f001 fe45 	bl	8003664 <HAL_GPIO_ReadPin>
 80019da:	0003      	movs	r3, r0
 80019dc:	3b01      	subs	r3, #1
 80019de:	425a      	negs	r2, r3
 80019e0:	4153      	adcs	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	001a      	movs	r2, r3
 80019e6:	4bbc      	ldr	r3, [pc, #752]	; (8001cd8 <main+0x370>)
 80019e8:	701a      	strb	r2, [r3, #0]
	  left1 = (HAL_GPIO_ReadPin(GPIOB, left1_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 80019ea:	4bba      	ldr	r3, [pc, #744]	; (8001cd4 <main+0x36c>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	0018      	movs	r0, r3
 80019f0:	f001 fe38 	bl	8003664 <HAL_GPIO_ReadPin>
 80019f4:	0003      	movs	r3, r0
 80019f6:	3b01      	subs	r3, #1
 80019f8:	425a      	negs	r2, r3
 80019fa:	4153      	adcs	r3, r2
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	4bb6      	ldr	r3, [pc, #728]	; (8001cdc <main+0x374>)
 8001a02:	701a      	strb	r2, [r3, #0]
	  center = (HAL_GPIO_ReadPin(GPIOC, center_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001a04:	4bb6      	ldr	r3, [pc, #728]	; (8001ce0 <main+0x378>)
 8001a06:	2120      	movs	r1, #32
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f001 fe2b 	bl	8003664 <HAL_GPIO_ReadPin>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b01      	subs	r3, #1
 8001a12:	425a      	negs	r2, r3
 8001a14:	4153      	adcs	r3, r2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	001a      	movs	r2, r3
 8001a1a:	4bb2      	ldr	r3, [pc, #712]	; (8001ce4 <main+0x37c>)
 8001a1c:	701a      	strb	r2, [r3, #0]
	  right1 = (HAL_GPIO_ReadPin(GPIOC, right1_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001a1e:	4bb0      	ldr	r3, [pc, #704]	; (8001ce0 <main+0x378>)
 8001a20:	2110      	movs	r1, #16
 8001a22:	0018      	movs	r0, r3
 8001a24:	f001 fe1e 	bl	8003664 <HAL_GPIO_ReadPin>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	425a      	negs	r2, r3
 8001a2e:	4153      	adcs	r3, r2
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	001a      	movs	r2, r3
 8001a34:	4bac      	ldr	r3, [pc, #688]	; (8001ce8 <main+0x380>)
 8001a36:	701a      	strb	r2, [r3, #0]
	  right2 = (HAL_GPIO_ReadPin(right2_ir_GPIO_Port, right2_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001a38:	2390      	movs	r3, #144	; 0x90
 8001a3a:	05db      	lsls	r3, r3, #23
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f001 fe10 	bl	8003664 <HAL_GPIO_ReadPin>
 8001a44:	0003      	movs	r3, r0
 8001a46:	3b01      	subs	r3, #1
 8001a48:	425a      	negs	r2, r3
 8001a4a:	4153      	adcs	r3, r2
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	001a      	movs	r2, r3
 8001a50:	4ba6      	ldr	r3, [pc, #664]	; (8001cec <main+0x384>)
 8001a52:	701a      	strb	r2, [r3, #0]

	  // create a state machine to control the robot
	  switch (robot_state) {
 8001a54:	4ba6      	ldr	r3, [pc, #664]	; (8001cf0 <main+0x388>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b07      	cmp	r3, #7
 8001a5a:	d900      	bls.n	8001a5e <main+0xf6>
 8001a5c:	e1a8      	b.n	8001db0 <main+0x448>
 8001a5e:	009a      	lsls	r2, r3, #2
 8001a60:	4ba4      	ldr	r3, [pc, #656]	; (8001cf4 <main+0x38c>)
 8001a62:	18d3      	adds	r3, r2, r3
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	469f      	mov	pc, r3
		  case idle:
			  stop();
 8001a68:	f000 ffb4 	bl	80029d4 <stop>
			  if (sw_pushed) {
 8001a6c:	4ba2      	ldr	r3, [pc, #648]	; (8001cf8 <main+0x390>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <main+0x118>
				  sw_pushed = 0;
 8001a74:	4ba0      	ldr	r3, [pc, #640]	; (8001cf8 <main+0x390>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
				  robot_state = follow_line;
 8001a7a:	4b9d      	ldr	r3, [pc, #628]	; (8001cf0 <main+0x388>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
			  }
			  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "idle\r\n", strlen("idle\r\n"));
 8001a80:	499e      	ldr	r1, [pc, #632]	; (8001cfc <main+0x394>)
 8001a82:	4b9f      	ldr	r3, [pc, #636]	; (8001d00 <main+0x398>)
 8001a84:	2206      	movs	r2, #6
 8001a86:	0018      	movs	r0, r3
 8001a88:	f004 f810 	bl	8005aac <HAL_UART_Transmit_IT>
			  break;
 8001a8c:	e191      	b.n	8001db2 <main+0x44a>
		  case follow_line:
			  if (left2 && left1 && center && right1 && right2) {
 8001a8e:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <main+0x370>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d018      	beq.n	8001ac8 <main+0x160>
 8001a96:	4b91      	ldr	r3, [pc, #580]	; (8001cdc <main+0x374>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d014      	beq.n	8001ac8 <main+0x160>
 8001a9e:	4b91      	ldr	r3, [pc, #580]	; (8001ce4 <main+0x37c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <main+0x160>
 8001aa6:	4b90      	ldr	r3, [pc, #576]	; (8001ce8 <main+0x380>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00c      	beq.n	8001ac8 <main+0x160>
 8001aae:	4b8f      	ldr	r3, [pc, #572]	; (8001cec <main+0x384>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <main+0x160>
				  sw_pushed = 0;
 8001ab6:	4b90      	ldr	r3, [pc, #576]	; (8001cf8 <main+0x390>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
				  record_current_enc_pos();
 8001abc:	f000 fd7c 	bl	80025b8 <record_current_enc_pos>
				  robot_state = t_intersection;
 8001ac0:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <main+0x388>)
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e017      	b.n	8001af8 <main+0x190>
			  }
			  else if (right1 && !left1) {
 8001ac8:	4b87      	ldr	r3, [pc, #540]	; (8001ce8 <main+0x380>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <main+0x176>
 8001ad0:	4b82      	ldr	r3, [pc, #520]	; (8001cdc <main+0x374>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <main+0x176>
				  steer_right();
 8001ad8:	f000 fea0 	bl	800281c <steer_right>
 8001adc:	e00c      	b.n	8001af8 <main+0x190>
			  }
			  else if (left1 && !right1) {
 8001ade:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <main+0x374>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <main+0x18c>
 8001ae6:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <main+0x380>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <main+0x18c>
				  steer_left();
 8001aee:	f000 ff03 	bl	80028f8 <steer_left>
 8001af2:	e001      	b.n	8001af8 <main+0x190>
			  }
			  else {
				  move_forward();
 8001af4:	f000 fdb6 	bl	8002664 <move_forward>
			  }

			  if (sw_pushed) {
 8001af8:	4b7f      	ldr	r3, [pc, #508]	; (8001cf8 <main+0x390>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <main+0x1a8>
				  sw_pushed = 0;
 8001b00:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <main+0x390>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
				  record_current_enc_pos();
 8001b06:	f000 fd57 	bl	80025b8 <record_current_enc_pos>
				  robot_state = turn_around;
 8001b0a:	4b79      	ldr	r3, [pc, #484]	; (8001cf0 <main+0x388>)
 8001b0c:	2205      	movs	r2, #5
 8001b0e:	701a      	strb	r2, [r3, #0]
			  }

			  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "follow_line\r\n", strlen("follow_line\r\n"));
 8001b10:	497c      	ldr	r1, [pc, #496]	; (8001d04 <main+0x39c>)
 8001b12:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <main+0x398>)
 8001b14:	220d      	movs	r2, #13
 8001b16:	0018      	movs	r0, r3
 8001b18:	f003 ffc8 	bl	8005aac <HAL_UART_Transmit_IT>
			  break;
 8001b1c:	e149      	b.n	8001db2 <main+0x44a>
		  case follow_line_until_turn:
			  if (left2 && left1 && center && right1 && right2) {
 8001b1e:	4b6e      	ldr	r3, [pc, #440]	; (8001cd8 <main+0x370>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d018      	beq.n	8001b58 <main+0x1f0>
 8001b26:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <main+0x374>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d014      	beq.n	8001b58 <main+0x1f0>
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ce4 <main+0x37c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d010      	beq.n	8001b58 <main+0x1f0>
 8001b36:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <main+0x380>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00c      	beq.n	8001b58 <main+0x1f0>
 8001b3e:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <main+0x384>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d008      	beq.n	8001b58 <main+0x1f0>
				  sw_pushed = 0;
 8001b46:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <main+0x390>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
				  record_current_enc_pos();
 8001b4c:	f000 fd34 	bl	80025b8 <record_current_enc_pos>
				  robot_state = t_intersection;
 8001b50:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <main+0x388>)
 8001b52:	2206      	movs	r2, #6
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e02b      	b.n	8001bb0 <main+0x248>
			  }
			  else if (right2) {
 8001b58:	4b64      	ldr	r3, [pc, #400]	; (8001cec <main+0x384>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <main+0x204>
				  record_current_enc_pos();
 8001b60:	f000 fd2a 	bl	80025b8 <record_current_enc_pos>
				  robot_state = turn_right;
 8001b64:	4b62      	ldr	r3, [pc, #392]	; (8001cf0 <main+0x388>)
 8001b66:	2203      	movs	r2, #3
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e021      	b.n	8001bb0 <main+0x248>
			  }
			  else if (left2) {
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <main+0x370>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <main+0x218>
				  record_current_enc_pos();
 8001b74:	f000 fd20 	bl	80025b8 <record_current_enc_pos>
				  robot_state = turn_left;
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <main+0x388>)
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e017      	b.n	8001bb0 <main+0x248>
			  }
			  else if (right1 && !left1) {
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <main+0x380>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <main+0x22e>
 8001b88:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <main+0x374>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <main+0x22e>
				  steer_right();
 8001b90:	f000 fe44 	bl	800281c <steer_right>
 8001b94:	e00c      	b.n	8001bb0 <main+0x248>
			  }
			  else if (left1 && !right1) {
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <main+0x374>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <main+0x244>
 8001b9e:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <main+0x380>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <main+0x244>
				  steer_left();
 8001ba6:	f000 fea7 	bl	80028f8 <steer_left>
 8001baa:	e001      	b.n	8001bb0 <main+0x248>
			  }
			  else {
				  move_forward();
 8001bac:	f000 fd5a 	bl	8002664 <move_forward>
			  }

			  if (sw_pushed) {
 8001bb0:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <main+0x390>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <main+0x25c>
				  sw_pushed = 0;
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <main+0x390>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <main+0x388>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
			  }

			  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "follow_line_until_turn\r\n", strlen("follow_line_until_turn\r\n"));
 8001bc4:	4950      	ldr	r1, [pc, #320]	; (8001d08 <main+0x3a0>)
 8001bc6:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <main+0x398>)
 8001bc8:	2218      	movs	r2, #24
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f003 ff6e 	bl	8005aac <HAL_UART_Transmit_IT>
			  break;
 8001bd0:	e0ef      	b.n	8001db2 <main+0x44a>
		  case turn_right:
			  if (suff_dist_traveled(5)) {
 8001bd2:	2005      	movs	r0, #5
 8001bd4:	f000 fd10 	bl	80025f8 <suff_dist_traveled>
 8001bd8:	1e03      	subs	r3, r0, #0
 8001bda:	d015      	beq.n	8001c08 <main+0x2a0>
				  if (center) {
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <main+0x37c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00e      	beq.n	8001c02 <main+0x29a>
					  if (after_turn_around) {
 8001be4:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <main+0x3a4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <main+0x292>
						  after_turn_around = 0;
 8001bec:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <main+0x3a4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
						  robot_state = follow_line_until_turn;
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <main+0x388>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e008      	b.n	8001c0c <main+0x2a4>
					  }
					  else {
						  robot_state = follow_line;
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <main+0x388>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e004      	b.n	8001c0c <main+0x2a4>
					  }
				  }
				  else {
					  steer_right();
 8001c02:	f000 fe0b 	bl	800281c <steer_right>
 8001c06:	e001      	b.n	8001c0c <main+0x2a4>
				  }
			  }
			  else {
				  steer_right();
 8001c08:	f000 fe08 	bl	800281c <steer_right>
			  }

			  if (sw_pushed) {
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <main+0x390>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <main+0x2b8>
				  sw_pushed = 0;
 8001c14:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <main+0x390>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001c1a:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <main+0x388>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
			  }

			  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "turn_right\r\n", strlen("turn_right\r\n"));
 8001c20:	493b      	ldr	r1, [pc, #236]	; (8001d10 <main+0x3a8>)
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <main+0x398>)
 8001c24:	220c      	movs	r2, #12
 8001c26:	0018      	movs	r0, r3
 8001c28:	f003 ff40 	bl	8005aac <HAL_UART_Transmit_IT>
			  break;
 8001c2c:	e0c1      	b.n	8001db2 <main+0x44a>
		  case turn_left:
			  if (suff_dist_traveled(5)) {
 8001c2e:	2005      	movs	r0, #5
 8001c30:	f000 fce2 	bl	80025f8 <suff_dist_traveled>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d015      	beq.n	8001c64 <main+0x2fc>
				  if (center) {
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <main+0x37c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00e      	beq.n	8001c5e <main+0x2f6>
					  if (after_turn_around) {
 8001c40:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <main+0x3a4>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <main+0x2ee>
						  after_turn_around = 0;
 8001c48:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <main+0x3a4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
						  robot_state = follow_line_until_turn;
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <main+0x388>)
 8001c50:	2202      	movs	r2, #2
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	e008      	b.n	8001c68 <main+0x300>
					  }
					  else {
						  robot_state = follow_line;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <main+0x388>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	e004      	b.n	8001c68 <main+0x300>
					  }
				  }
				  else {
					  steer_left();
 8001c5e:	f000 fe4b 	bl	80028f8 <steer_left>
 8001c62:	e001      	b.n	8001c68 <main+0x300>
				  }
			  }
			  else {
				  steer_left();
 8001c64:	f000 fe48 	bl	80028f8 <steer_left>
			  }

			  if (sw_pushed) {
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <main+0x390>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <main+0x314>
				  sw_pushed = 0;
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <main+0x390>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <main+0x388>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
			  }

			  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "turn_left\r\n", strlen("turn_left\r\n"));
 8001c7c:	4925      	ldr	r1, [pc, #148]	; (8001d14 <main+0x3ac>)
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <main+0x398>)
 8001c80:	220b      	movs	r2, #11
 8001c82:	0018      	movs	r0, r3
 8001c84:	f003 ff12 	bl	8005aac <HAL_UART_Transmit_IT>
			  break;
 8001c88:	e093      	b.n	8001db2 <main+0x44a>
		  case turn_around:
			  // while in this state turn the robot around 180 degrees back onto the path it has already traversed
			  if (suff_dist_traveled(5)) {
 8001c8a:	2005      	movs	r0, #5
 8001c8c:	f000 fcb4 	bl	80025f8 <suff_dist_traveled>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d008      	beq.n	8001ca6 <main+0x33e>

				  after_turn_around = 1;
 8001c94:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <main+0x3a4>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]

				  record_current_enc_pos();
 8001c9a:	f000 fc8d 	bl	80025b8 <record_current_enc_pos>

				  // the robot will always turn left
				  robot_state = turn_left;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <main+0x388>)
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e001      	b.n	8001caa <main+0x342>
			  }
			  else {
				  move_backward();
 8001ca6:	f000 fd4b 	bl	8002740 <move_backward>
			  }


			  if (sw_pushed) {
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <main+0x390>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <main+0x356>
				  sw_pushed = 0;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <main+0x390>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <main+0x388>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
			  }

			  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "turn_around\r\n", strlen("turn_around\r\n"));
 8001cbe:	4916      	ldr	r1, [pc, #88]	; (8001d18 <main+0x3b0>)
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <main+0x398>)
 8001cc2:	220d      	movs	r2, #13
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f003 fef1 	bl	8005aac <HAL_UART_Transmit_IT>
			  break;
 8001cca:	e072      	b.n	8001db2 <main+0x44a>
 8001ccc:	200001fc 	.word	0x200001fc
 8001cd0:	20000054 	.word	0x20000054
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	2000002e 	.word	0x2000002e
 8001cdc:	2000002f 	.word	0x2000002f
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	20000030 	.word	0x20000030
 8001ce8:	20000031 	.word	0x20000031
 8001cec:	20000032 	.word	0x20000032
 8001cf0:	2000002c 	.word	0x2000002c
 8001cf4:	08006bd8 	.word	0x08006bd8
 8001cf8:	2000002d 	.word	0x2000002d
 8001cfc:	08006ad8 	.word	0x08006ad8
 8001d00:	2000009c 	.word	0x2000009c
 8001d04:	08006ae0 	.word	0x08006ae0
 8001d08:	08006af0 	.word	0x08006af0
 8001d0c:	20000033 	.word	0x20000033
 8001d10:	08006b0c 	.word	0x08006b0c
 8001d14:	08006b1c 	.word	0x08006b1c
 8001d18:	08006b28 	.word	0x08006b28
		  case t_intersection:
			  if (suff_dist_traveled(2)) {
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f000 fc6b 	bl	80025f8 <suff_dist_traveled>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d01e      	beq.n	8001d64 <main+0x3fc>
				  if (left2 && left1 && center && right1 && right2) {
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <main+0x44c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d016      	beq.n	8001d5c <main+0x3f4>
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <main+0x450>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d012      	beq.n	8001d5c <main+0x3f4>
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <main+0x454>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00e      	beq.n	8001d5c <main+0x3f4>
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <main+0x458>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <main+0x3f4>
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <main+0x45c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <main+0x3f4>
					  sw_pushed = 0;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <main+0x460>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
					  robot_state = finish;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <main+0x464>)
 8001d56:	2207      	movs	r2, #7
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e005      	b.n	8001d68 <main+0x400>
				  }
				  else {
					  robot_state = turn_right;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <main+0x464>)
 8001d5e:	2203      	movs	r2, #3
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e001      	b.n	8001d68 <main+0x400>
				  }
			  }
			  else {
				  move_forward();
 8001d64:	f000 fc7e 	bl	8002664 <move_forward>
			  }

			  if (sw_pushed) {
 8001d68:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <main+0x460>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <main+0x414>
				  sw_pushed = 0;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <main+0x460>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <main+0x464>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
			  }

			  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "t_intersection\r\n", strlen("t_intersection\r\n"));
 8001d7c:	4914      	ldr	r1, [pc, #80]	; (8001dd0 <main+0x468>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <main+0x46c>)
 8001d80:	2210      	movs	r2, #16
 8001d82:	0018      	movs	r0, r3
 8001d84:	f003 fe92 	bl	8005aac <HAL_UART_Transmit_IT>
			  break;
 8001d88:	e013      	b.n	8001db2 <main+0x44a>
		  case finish:
			  stop();
 8001d8a:	f000 fe23 	bl	80029d4 <stop>
			  if (sw_pushed) {
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <main+0x460>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <main+0x43a>
				  sw_pushed = 0;
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <main+0x460>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
				  robot_state = idle;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <main+0x464>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
			  }

			  HAL_UART_Transmit_IT(&huart1, (uint8_t*) "finish\r\n", strlen("finish\r\n"));
 8001da2:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <main+0x470>)
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <main+0x46c>)
 8001da6:	2208      	movs	r2, #8
 8001da8:	0018      	movs	r0, r3
 8001daa:	f003 fe7f 	bl	8005aac <HAL_UART_Transmit_IT>
			  break;
 8001dae:	e000      	b.n	8001db2 <main+0x44a>
		  default:
			  break;
 8001db0:	46c0      	nop			; (mov r8, r8)
	  left2 = (HAL_GPIO_ReadPin(GPIOB, left2_ir_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8001db2:	e60d      	b.n	80019d0 <main+0x68>
 8001db4:	2000002e 	.word	0x2000002e
 8001db8:	2000002f 	.word	0x2000002f
 8001dbc:	20000030 	.word	0x20000030
 8001dc0:	20000031 	.word	0x20000031
 8001dc4:	20000032 	.word	0x20000032
 8001dc8:	2000002d 	.word	0x2000002d
 8001dcc:	2000002c 	.word	0x2000002c
 8001dd0:	08006b38 	.word	0x08006b38
 8001dd4:	2000009c 	.word	0x2000009c
 8001dd8:	08006b4c 	.word	0x08006b4c

08001ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b097      	sub	sp, #92	; 0x5c
 8001de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de2:	2428      	movs	r4, #40	; 0x28
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	0018      	movs	r0, r3
 8001de8:	2330      	movs	r3, #48	; 0x30
 8001dea:	001a      	movs	r2, r3
 8001dec:	2100      	movs	r1, #0
 8001dee:	f004 fe5f 	bl	8006ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df2:	2318      	movs	r3, #24
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	0018      	movs	r0, r3
 8001df8:	2310      	movs	r3, #16
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f004 fe57 	bl	8006ab0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	0018      	movs	r0, r3
 8001e06:	2314      	movs	r3, #20
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f004 fe50 	bl	8006ab0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e10:	0021      	movs	r1, r4
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2202      	movs	r2, #2
 8001e16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	2210      	movs	r2, #16
 8001e22:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	2202      	movs	r2, #2
 8001e28:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	22a0      	movs	r2, #160	; 0xa0
 8001e34:	0392      	lsls	r2, r2, #14
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	0018      	movs	r0, r3
 8001e42:	f001 fc65 	bl	8003710 <HAL_RCC_OscConfig>
 8001e46:	1e03      	subs	r3, r0, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001e4a:	f000 fea7 	bl	8002b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4e:	2118      	movs	r1, #24
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2207      	movs	r2, #7
 8001e54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	2202      	movs	r2, #2
 8001e5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f001 ff69 	bl	8003d44 <HAL_RCC_ClockConfig>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e76:	f000 fe91 	bl	8002b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f002 f89f 	bl	8003fcc <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001e92:	f000 fe83 	bl	8002b9c <Error_Handler>
  }
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b017      	add	sp, #92	; 0x5c
 8001e9c:	bd90      	pop	{r4, r7, pc}
	...

08001ea0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b096      	sub	sp, #88	; 0x58
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea6:	2348      	movs	r3, #72	; 0x48
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	0018      	movs	r0, r3
 8001eac:	2310      	movs	r3, #16
 8001eae:	001a      	movs	r2, r3
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f004 fdfd 	bl	8006ab0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	0018      	movs	r0, r3
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	f004 fdf5 	bl	8006ab0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec6:	2324      	movs	r3, #36	; 0x24
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	0018      	movs	r0, r3
 8001ecc:	231c      	movs	r3, #28
 8001ece:	001a      	movs	r2, r3
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	f004 fded 	bl	8006ab0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	0018      	movs	r0, r3
 8001eda:	2320      	movs	r3, #32
 8001edc:	001a      	movs	r2, r3
 8001ede:	2100      	movs	r1, #0
 8001ee0:	f004 fde6 	bl	8006ab0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <MX_TIM1_Init+0x17c>)
 8001ee6:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <MX_TIM1_Init+0x180>)
 8001ee8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <MX_TIM1_Init+0x17c>)
 8001eec:	222f      	movs	r2, #47	; 0x2f
 8001eee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	; (800201c <MX_TIM1_Init+0x17c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <MX_TIM1_Init+0x17c>)
 8001ef8:	2263      	movs	r2, #99	; 0x63
 8001efa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <MX_TIM1_Init+0x17c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <MX_TIM1_Init+0x17c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f08:	4b44      	ldr	r3, [pc, #272]	; (800201c <MX_TIM1_Init+0x17c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <MX_TIM1_Init+0x17c>)
 8001f10:	0018      	movs	r0, r3
 8001f12:	f002 f939 	bl	8004188 <HAL_TIM_Base_Init>
 8001f16:	1e03      	subs	r3, r0, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001f1a:	f000 fe3f 	bl	8002b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1e:	2148      	movs	r1, #72	; 0x48
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	0152      	lsls	r2, r2, #5
 8001f26:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f28:	187a      	adds	r2, r7, r1
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <MX_TIM1_Init+0x17c>)
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f002 ff44 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001f38:	f000 fe30 	bl	8002b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f3c:	4b37      	ldr	r3, [pc, #220]	; (800201c <MX_TIM1_Init+0x17c>)
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f002 f9f2 	bl	8004328 <HAL_TIM_PWM_Init>
 8001f44:	1e03      	subs	r3, r0, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001f48:	f000 fe28 	bl	8002b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4c:	2140      	movs	r1, #64	; 0x40
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	2200      	movs	r2, #0
 8001f58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f5a:	187a      	adds	r2, r7, r1
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	; (800201c <MX_TIM1_Init+0x17c>)
 8001f5e:	0011      	movs	r1, r2
 8001f60:	0018      	movs	r0, r3
 8001f62:	f003 fc83 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	1e03      	subs	r3, r0, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001f6a:	f000 fe17 	bl	8002b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6e:	2124      	movs	r1, #36	; 0x24
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	2260      	movs	r2, #96	; 0x60
 8001f74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	2232      	movs	r2, #50	; 0x32
 8001f7a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9a:	1879      	adds	r1, r7, r1
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	; (800201c <MX_TIM1_Init+0x17c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f002 fe45 	bl	8004c30 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001faa:	f000 fdf7 	bl	8002b9c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001fae:	2124      	movs	r1, #36	; 0x24
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fb6:	1879      	adds	r1, r7, r1
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <MX_TIM1_Init+0x17c>)
 8001fba:	2208      	movs	r2, #8
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f002 fe37 	bl	8004c30 <HAL_TIM_PWM_ConfigChannel>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001fc6:	f000 fde9 	bl	8002b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	0192      	lsls	r2, r2, #6
 8001fee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff6:	1d3a      	adds	r2, r7, #4
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_TIM1_Init+0x17c>)
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f003 fc93 	bl	8005928 <HAL_TIMEx_ConfigBreakDeadTime>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d001      	beq.n	800200a <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8002006:	f000 fdc9 	bl	8002b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <MX_TIM1_Init+0x17c>)
 800200c:	0018      	movs	r0, r3
 800200e:	f000 febf 	bl	8002d90 <HAL_TIM_MspPostInit>

}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b016      	add	sp, #88	; 0x58
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	2000016c 	.word	0x2000016c
 8002020:	40012c00 	.word	0x40012c00

08002024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08e      	sub	sp, #56	; 0x38
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202a:	2328      	movs	r3, #40	; 0x28
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	0018      	movs	r0, r3
 8002030:	2310      	movs	r3, #16
 8002032:	001a      	movs	r2, r3
 8002034:	2100      	movs	r1, #0
 8002036:	f004 fd3b 	bl	8006ab0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203a:	2320      	movs	r3, #32
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	0018      	movs	r0, r3
 8002040:	2308      	movs	r3, #8
 8002042:	001a      	movs	r2, r3
 8002044:	2100      	movs	r1, #0
 8002046:	f004 fd33 	bl	8006ab0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	0018      	movs	r0, r3
 800204e:	231c      	movs	r3, #28
 8002050:	001a      	movs	r2, r3
 8002052:	2100      	movs	r1, #0
 8002054:	f004 fd2c 	bl	8006ab0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002058:	4b35      	ldr	r3, [pc, #212]	; (8002130 <MX_TIM2_Init+0x10c>)
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	05d2      	lsls	r2, r2, #23
 800205e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8002060:	4b33      	ldr	r3, [pc, #204]	; (8002130 <MX_TIM2_Init+0x10c>)
 8002062:	222f      	movs	r2, #47	; 0x2f
 8002064:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	4b32      	ldr	r3, [pc, #200]	; (8002130 <MX_TIM2_Init+0x10c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800206c:	4b30      	ldr	r3, [pc, #192]	; (8002130 <MX_TIM2_Init+0x10c>)
 800206e:	2263      	movs	r2, #99	; 0x63
 8002070:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <MX_TIM2_Init+0x10c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <MX_TIM2_Init+0x10c>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800207e:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <MX_TIM2_Init+0x10c>)
 8002080:	0018      	movs	r0, r3
 8002082:	f002 f881 	bl	8004188 <HAL_TIM_Base_Init>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d001      	beq.n	800208e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800208a:	f000 fd87 	bl	8002b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208e:	2128      	movs	r1, #40	; 0x28
 8002090:	187b      	adds	r3, r7, r1
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	0152      	lsls	r2, r2, #5
 8002096:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002098:	187a      	adds	r2, r7, r1
 800209a:	4b25      	ldr	r3, [pc, #148]	; (8002130 <MX_TIM2_Init+0x10c>)
 800209c:	0011      	movs	r1, r2
 800209e:	0018      	movs	r0, r3
 80020a0:	f002 fe8c 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 80020a4:	1e03      	subs	r3, r0, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80020a8:	f000 fd78 	bl	8002b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <MX_TIM2_Init+0x10c>)
 80020ae:	0018      	movs	r0, r3
 80020b0:	f002 f93a 	bl	8004328 <HAL_TIM_PWM_Init>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80020b8:	f000 fd70 	bl	8002b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020bc:	2120      	movs	r1, #32
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ca:	187a      	adds	r2, r7, r1
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_TIM2_Init+0x10c>)
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f003 fbcb 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80020da:	f000 fd5f 	bl	8002b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2260      	movs	r2, #96	; 0x60
 80020e2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2232      	movs	r2, #50	; 0x32
 80020e8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f6:	1d39      	adds	r1, r7, #4
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <MX_TIM2_Init+0x10c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	0018      	movs	r0, r3
 80020fe:	f002 fd97 	bl	8004c30 <HAL_TIM_PWM_ConfigChannel>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002106:	f000 fd49 	bl	8002b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800210a:	1d39      	adds	r1, r7, #4
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <MX_TIM2_Init+0x10c>)
 800210e:	2208      	movs	r2, #8
 8002110:	0018      	movs	r0, r3
 8002112:	f002 fd8d 	bl	8004c30 <HAL_TIM_PWM_ConfigChannel>
 8002116:	1e03      	subs	r3, r0, #0
 8002118:	d001      	beq.n	800211e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800211a:	f000 fd3f 	bl	8002b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <MX_TIM2_Init+0x10c>)
 8002120:	0018      	movs	r0, r3
 8002122:	f000 fe35 	bl	8002d90 <HAL_TIM_MspPostInit>

}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b00e      	add	sp, #56	; 0x38
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	200001b4 	.word	0x200001b4

08002134 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213a:	2318      	movs	r3, #24
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	0018      	movs	r0, r3
 8002140:	2310      	movs	r3, #16
 8002142:	001a      	movs	r2, r3
 8002144:	2100      	movs	r1, #0
 8002146:	f004 fcb3 	bl	8006ab0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214a:	2310      	movs	r3, #16
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	0018      	movs	r0, r3
 8002150:	2308      	movs	r3, #8
 8002152:	001a      	movs	r2, r3
 8002154:	2100      	movs	r1, #0
 8002156:	f004 fcab 	bl	8006ab0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800215a:	003b      	movs	r3, r7
 800215c:	0018      	movs	r0, r3
 800215e:	2310      	movs	r3, #16
 8002160:	001a      	movs	r2, r3
 8002162:	2100      	movs	r1, #0
 8002164:	f004 fca4 	bl	8006ab0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <MX_TIM3_Init+0x128>)
 800216a:	4a3d      	ldr	r2, [pc, #244]	; (8002260 <MX_TIM3_Init+0x12c>)
 800216c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <MX_TIM3_Init+0x128>)
 8002170:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <MX_TIM3_Init+0x130>)
 8002172:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b39      	ldr	r3, [pc, #228]	; (800225c <MX_TIM3_Init+0x128>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800217a:	4b38      	ldr	r3, [pc, #224]	; (800225c <MX_TIM3_Init+0x128>)
 800217c:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <MX_TIM3_Init+0x134>)
 800217e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002180:	4b36      	ldr	r3, [pc, #216]	; (800225c <MX_TIM3_Init+0x128>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002186:	4b35      	ldr	r3, [pc, #212]	; (800225c <MX_TIM3_Init+0x128>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <MX_TIM3_Init+0x128>)
 800218e:	0018      	movs	r0, r3
 8002190:	f001 fffa 	bl	8004188 <HAL_TIM_Base_Init>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d001      	beq.n	800219c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002198:	f000 fd00 	bl	8002b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219c:	2118      	movs	r1, #24
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	0152      	lsls	r2, r2, #5
 80021a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021a6:	187a      	adds	r2, r7, r1
 80021a8:	4b2c      	ldr	r3, [pc, #176]	; (800225c <MX_TIM3_Init+0x128>)
 80021aa:	0011      	movs	r1, r2
 80021ac:	0018      	movs	r0, r3
 80021ae:	f002 fe05 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 80021b2:	1e03      	subs	r3, r0, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80021b6:	f000 fcf1 	bl	8002b9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <MX_TIM3_Init+0x128>)
 80021bc:	0018      	movs	r0, r3
 80021be:	f002 fa3f 	bl	8004640 <HAL_TIM_IC_Init>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80021c6:	f000 fce9 	bl	8002b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ca:	2110      	movs	r1, #16
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021d8:	187a      	adds	r2, r7, r1
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <MX_TIM3_Init+0x128>)
 80021dc:	0011      	movs	r1, r2
 80021de:	0018      	movs	r0, r3
 80021e0:	f003 fb44 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	1e03      	subs	r3, r0, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80021e8:	f000 fcd8 	bl	8002b9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021ec:	003b      	movs	r3, r7
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021f2:	003b      	movs	r3, r7
 80021f4:	2201      	movs	r2, #1
 80021f6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021f8:	003b      	movs	r3, r7
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 80021fe:	003b      	movs	r3, r7
 8002200:	220f      	movs	r2, #15
 8002202:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002204:	0039      	movs	r1, r7
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <MX_TIM3_Init+0x128>)
 8002208:	2200      	movs	r2, #0
 800220a:	0018      	movs	r0, r3
 800220c:	f002 fc6c 	bl	8004ae8 <HAL_TIM_IC_ConfigChannel>
 8002210:	1e03      	subs	r3, r0, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002214:	f000 fcc2 	bl	8002b9c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002218:	0039      	movs	r1, r7
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <MX_TIM3_Init+0x128>)
 800221c:	2204      	movs	r2, #4
 800221e:	0018      	movs	r0, r3
 8002220:	f002 fc62 	bl	8004ae8 <HAL_TIM_IC_ConfigChannel>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8002228:	f000 fcb8 	bl	8002b9c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800222c:	0039      	movs	r1, r7
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_TIM3_Init+0x128>)
 8002230:	2208      	movs	r2, #8
 8002232:	0018      	movs	r0, r3
 8002234:	f002 fc58 	bl	8004ae8 <HAL_TIM_IC_ConfigChannel>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 800223c:	f000 fcae 	bl	8002b9c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002240:	0039      	movs	r1, r7
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_TIM3_Init+0x128>)
 8002244:	220c      	movs	r2, #12
 8002246:	0018      	movs	r0, r3
 8002248:	f002 fc4e 	bl	8004ae8 <HAL_TIM_IC_ConfigChannel>
 800224c:	1e03      	subs	r3, r0, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8002250:	f000 fca4 	bl	8002b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b00a      	add	sp, #40	; 0x28
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000054 	.word	0x20000054
 8002260:	40000400 	.word	0x40000400
 8002264:	0000bb7f 	.word	0x0000bb7f
 8002268:	0000ffff 	.word	0x0000ffff

0800226c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002272:	003b      	movs	r3, r7
 8002274:	0018      	movs	r0, r3
 8002276:	2308      	movs	r3, #8
 8002278:	001a      	movs	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	f004 fc18 	bl	8006ab0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <MX_TIM6_Init+0x6c>)
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <MX_TIM6_Init+0x70>)
 8002284:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23;
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <MX_TIM6_Init+0x6c>)
 8002288:	2217      	movs	r2, #23
 800228a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <MX_TIM6_Init+0x6c>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_TIM6_Init+0x6c>)
 8002294:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <MX_TIM6_Init+0x74>)
 8002296:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_TIM6_Init+0x6c>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_TIM6_Init+0x6c>)
 80022a0:	0018      	movs	r0, r3
 80022a2:	f001 ff71 	bl	8004188 <HAL_TIM_Base_Init>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80022aa:	f000 fc77 	bl	8002b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ae:	003b      	movs	r3, r7
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b4:	003b      	movs	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022ba:	003a      	movs	r2, r7
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_TIM6_Init+0x6c>)
 80022be:	0011      	movs	r1, r2
 80022c0:	0018      	movs	r0, r3
 80022c2:	f003 fad3 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 80022c6:	1e03      	subs	r3, r0, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80022ca:	f000 fc67 	bl	8002b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	20000124 	.word	0x20000124
 80022dc:	40001000 	.word	0x40001000
 80022e0:	0000270f 	.word	0x0000270f

080022e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_TIM16_Init+0x44>)
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <MX_TIM16_Init+0x48>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2399;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_TIM16_Init+0x44>)
 80022f0:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <MX_TIM16_Init+0x4c>)
 80022f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MX_TIM16_Init+0x44>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <MX_TIM16_Init+0x44>)
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <MX_TIM16_Init+0x50>)
 80022fe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_TIM16_Init+0x44>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <MX_TIM16_Init+0x44>)
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_TIM16_Init+0x44>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <MX_TIM16_Init+0x44>)
 8002314:	0018      	movs	r0, r3
 8002316:	f001 ff37 	bl	8004188 <HAL_TIM_Base_Init>
 800231a:	1e03      	subs	r3, r0, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800231e:	f000 fc3d 	bl	8002b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200001fc 	.word	0x200001fc
 800232c:	40014400 	.word	0x40014400
 8002330:	0000095f 	.word	0x0000095f
 8002334:	0000270f 	.word	0x0000270f

08002338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_USART1_UART_Init+0x58>)
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <MX_USART1_UART_Init+0x5c>)
 8002340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_USART1_UART_Init+0x58>)
 8002344:	2296      	movs	r2, #150	; 0x96
 8002346:	0192      	lsls	r2, r2, #6
 8002348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_USART1_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_USART1_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_USART1_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_USART1_UART_Init+0x58>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_USART1_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_USART1_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_USART1_UART_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_USART1_UART_Init+0x58>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <MX_USART1_UART_Init+0x58>)
 800237c:	0018      	movs	r0, r3
 800237e:	f003 fb41 	bl	8005a04 <HAL_UART_Init>
 8002382:	1e03      	subs	r3, r0, #0
 8002384:	d001      	beq.n	800238a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002386:	f000 fc09 	bl	8002b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	2000009c 	.word	0x2000009c
 8002394:	40013800 	.word	0x40013800

08002398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b08b      	sub	sp, #44	; 0x2c
 800239c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	2414      	movs	r4, #20
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	0018      	movs	r0, r3
 80023a4:	2314      	movs	r3, #20
 80023a6:	001a      	movs	r2, r3
 80023a8:	2100      	movs	r1, #0
 80023aa:	f004 fb81 	bl	8006ab0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0289      	lsls	r1, r1, #10
 80023b8:	430a      	orrs	r2, r1
 80023ba:	615a      	str	r2, [r3, #20]
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	029b      	lsls	r3, r3, #10
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	0309      	lsls	r1, r1, #12
 80023d4:	430a      	orrs	r2, r1
 80023d6:	615a      	str	r2, [r3, #20]
 80023d8:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	031b      	lsls	r3, r3, #12
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	02c9      	lsls	r1, r1, #11
 80023f0:	430a      	orrs	r2, r1
 80023f2:	615a      	str	r2, [r3, #20]
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <MX_GPIO_Init+0x140>)
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	02db      	lsls	r3, r3, #11
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002402:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <MX_GPIO_Init+0x140>)
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <MX_GPIO_Init+0x140>)
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	0349      	lsls	r1, r1, #13
 800240c:	430a      	orrs	r2, r1
 800240e:	615a      	str	r2, [r3, #20]
 8002410:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <MX_GPIO_Init+0x140>)
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	035b      	lsls	r3, r3, #13
 8002418:	4013      	ands	r3, r2
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, left_in2_Pin|left_in4_Pin|right_in2_Pin|right_in4_Pin, GPIO_PIN_RESET);
 800241e:	492f      	ldr	r1, [pc, #188]	; (80024dc <MX_GPIO_Init+0x144>)
 8002420:	2390      	movs	r3, #144	; 0x90
 8002422:	05db      	lsls	r3, r3, #23
 8002424:	2200      	movs	r2, #0
 8002426:	0018      	movs	r0, r3
 8002428:	f001 f939 	bl	800369e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : left_in2_Pin left_in4_Pin right_in2_Pin right_in4_Pin */
  GPIO_InitStruct.Pin = left_in2_Pin|left_in4_Pin|right_in2_Pin|right_in4_Pin;
 800242c:	193b      	adds	r3, r7, r4
 800242e:	4a2b      	ldr	r2, [pc, #172]	; (80024dc <MX_GPIO_Init+0x144>)
 8002430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	193b      	adds	r3, r7, r4
 8002434:	2201      	movs	r2, #1
 8002436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	193b      	adds	r3, r7, r4
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	193b      	adds	r3, r7, r4
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	193a      	adds	r2, r7, r4
 8002446:	2390      	movs	r3, #144	; 0x90
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	0011      	movs	r1, r2
 800244c:	0018      	movs	r0, r3
 800244e:	f000 ff99 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : right2_ir_Pin */
  GPIO_InitStruct.Pin = right2_ir_Pin;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	193b      	adds	r3, r7, r4
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	193b      	adds	r3, r7, r4
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(right2_ir_GPIO_Port, &GPIO_InitStruct);
 8002464:	193a      	adds	r2, r7, r4
 8002466:	2390      	movs	r3, #144	; 0x90
 8002468:	05db      	lsls	r3, r3, #23
 800246a:	0011      	movs	r1, r2
 800246c:	0018      	movs	r0, r3
 800246e:	f000 ff89 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : right1_ir_Pin center_ir_Pin */
  GPIO_InitStruct.Pin = right1_ir_Pin|center_ir_Pin;
 8002472:	193b      	adds	r3, r7, r4
 8002474:	2230      	movs	r2, #48	; 0x30
 8002476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	193b      	adds	r3, r7, r4
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	193b      	adds	r3, r7, r4
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002484:	193b      	adds	r3, r7, r4
 8002486:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <MX_GPIO_Init+0x148>)
 8002488:	0019      	movs	r1, r3
 800248a:	0010      	movs	r0, r2
 800248c:	f000 ff7a 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : left1_ir_Pin left2_ir_Pin */
  GPIO_InitStruct.Pin = left1_ir_Pin|left2_ir_Pin;
 8002490:	193b      	adds	r3, r7, r4
 8002492:	2203      	movs	r2, #3
 8002494:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002496:	193b      	adds	r3, r7, r4
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	193b      	adds	r3, r7, r4
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	193b      	adds	r3, r7, r4
 80024a4:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <MX_GPIO_Init+0x14c>)
 80024a6:	0019      	movs	r1, r3
 80024a8:	0010      	movs	r0, r2
 80024aa:	f000 ff6b 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : bumper_sw_Pin */
  GPIO_InitStruct.Pin = bumper_sw_Pin;
 80024ae:	0021      	movs	r1, r4
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2204      	movs	r2, #4
 80024b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2288      	movs	r2, #136	; 0x88
 80024ba:	0352      	lsls	r2, r2, #13
 80024bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(bumper_sw_GPIO_Port, &GPIO_InitStruct);
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <MX_GPIO_Init+0x150>)
 80024c8:	0019      	movs	r1, r3
 80024ca:	0010      	movs	r0, r2
 80024cc:	f000 ff5a 	bl	8003384 <HAL_GPIO_Init>

}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b00b      	add	sp, #44	; 0x2c
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	00000a0a 	.word	0x00000a0a
 80024e0:	48000800 	.word	0x48000800
 80024e4:	48000400 	.word	0x48000400
 80024e8:	48000c00 	.word	0x48000c00

080024ec <calc_pulse_val>:

/* USER CODE BEGIN 4 */
uint16_t calc_pulse_val(TIM_HandleTypeDef *htim, uint8_t pulse_width) {
 80024ec:	b5b0      	push	{r4, r5, r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	000a      	movs	r2, r1
 80024f6:	1cfb      	adds	r3, r7, #3
 80024f8:	701a      	strb	r2, [r3, #0]
	return (uint16_t) (((float) (pulse_width) / 100.0) * htim->Init.Period);
 80024fa:	1cfb      	adds	r3, r7, #3
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fd fef2 	bl	80002e8 <__aeabi_ui2f>
 8002504:	1c03      	adds	r3, r0, #0
 8002506:	1c18      	adds	r0, r3, #0
 8002508:	f7ff f86c 	bl	80015e4 <__aeabi_f2d>
 800250c:	2200      	movs	r2, #0
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <calc_pulse_val+0x60>)
 8002510:	f7fd ff26 	bl	8000360 <__aeabi_ddiv>
 8002514:	0002      	movs	r2, r0
 8002516:	000b      	movs	r3, r1
 8002518:	0014      	movs	r4, r2
 800251a:	001d      	movs	r5, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff f839 	bl	8001598 <__aeabi_ui2d>
 8002526:	0002      	movs	r2, r0
 8002528:	000b      	movs	r3, r1
 800252a:	0020      	movs	r0, r4
 800252c:	0029      	movs	r1, r5
 800252e:	f7fe f9ff 	bl	8000930 <__aeabi_dmul>
 8002532:	0002      	movs	r2, r0
 8002534:	000b      	movs	r3, r1
 8002536:	0010      	movs	r0, r2
 8002538:	0019      	movs	r1, r3
 800253a:	f7fd fe71 	bl	8000220 <__aeabi_d2uiz>
 800253e:	0003      	movs	r3, r0
 8002540:	b29b      	uxth	r3, r3
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bdb0      	pop	{r4, r5, r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	40590000 	.word	0x40590000

08002550 <calc_inv_pulse_val>:

uint16_t calc_inv_pulse_val(TIM_HandleTypeDef *htim, uint8_t pulse_width) {
 8002550:	b5b0      	push	{r4, r5, r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	000a      	movs	r2, r1
 800255a:	1cfb      	adds	r3, r7, #3
 800255c:	701a      	strb	r2, [r3, #0]
	return (uint16_t) (((float) (100 - pulse_width) / 100.0) * htim->Init.Period);
 800255e:	1cfb      	adds	r3, r7, #3
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2264      	movs	r2, #100	; 0x64
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	0018      	movs	r0, r3
 8002568:	f7fd fe78 	bl	800025c <__aeabi_i2f>
 800256c:	1c03      	adds	r3, r0, #0
 800256e:	1c18      	adds	r0, r3, #0
 8002570:	f7ff f838 	bl	80015e4 <__aeabi_f2d>
 8002574:	2200      	movs	r2, #0
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <calc_inv_pulse_val+0x64>)
 8002578:	f7fd fef2 	bl	8000360 <__aeabi_ddiv>
 800257c:	0002      	movs	r2, r0
 800257e:	000b      	movs	r3, r1
 8002580:	0014      	movs	r4, r2
 8002582:	001d      	movs	r5, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0018      	movs	r0, r3
 800258a:	f7ff f805 	bl	8001598 <__aeabi_ui2d>
 800258e:	0002      	movs	r2, r0
 8002590:	000b      	movs	r3, r1
 8002592:	0020      	movs	r0, r4
 8002594:	0029      	movs	r1, r5
 8002596:	f7fe f9cb 	bl	8000930 <__aeabi_dmul>
 800259a:	0002      	movs	r2, r0
 800259c:	000b      	movs	r3, r1
 800259e:	0010      	movs	r0, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	f7fd fe3d 	bl	8000220 <__aeabi_d2uiz>
 80025a6:	0003      	movs	r3, r0
 80025a8:	b29b      	uxth	r3, r3
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bdb0      	pop	{r4, r5, r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	40590000 	.word	0x40590000

080025b8 <record_current_enc_pos>:

void record_current_enc_pos(void) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	wheel_enc_count[0] = front_left_enc_count;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <record_current_enc_pos+0x2c>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <record_current_enc_pos+0x30>)
 80025c2:	601a      	str	r2, [r3, #0]
	wheel_enc_count[1] = front_right_enc_count;
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <record_current_enc_pos+0x34>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <record_current_enc_pos+0x30>)
 80025ca:	605a      	str	r2, [r3, #4]
	wheel_enc_count[2] = back_left_enc_count;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <record_current_enc_pos+0x38>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <record_current_enc_pos+0x30>)
 80025d2:	609a      	str	r2, [r3, #8]
	wheel_enc_count[3] = back_right_enc_count;
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <record_current_enc_pos+0x3c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <record_current_enc_pos+0x30>)
 80025da:	60da      	str	r2, [r3, #12]
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	20000034 	.word	0x20000034
 80025e8:	20000044 	.word	0x20000044
 80025ec:	20000038 	.word	0x20000038
 80025f0:	2000003c 	.word	0x2000003c
 80025f4:	20000040 	.word	0x20000040

080025f8 <suff_dist_traveled>:

uint8_t suff_dist_traveled(uint32_t travel_dist) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	if ((front_left_enc_count - wheel_enc_count[0]) >= travel_dist &&
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <suff_dist_traveled+0x58>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <suff_dist_traveled+0x5c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d819      	bhi.n	8002644 <suff_dist_traveled+0x4c>
	    (front_right_enc_count - wheel_enc_count[1]) >= travel_dist &&
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <suff_dist_traveled+0x60>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <suff_dist_traveled+0x5c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	1ad3      	subs	r3, r2, r3
	if ((front_left_enc_count - wheel_enc_count[0]) >= travel_dist &&
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d811      	bhi.n	8002644 <suff_dist_traveled+0x4c>
		(back_left_enc_count - wheel_enc_count[2]) >= travel_dist &&
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <suff_dist_traveled+0x64>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <suff_dist_traveled+0x5c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	1ad3      	subs	r3, r2, r3
	    (front_right_enc_count - wheel_enc_count[1]) >= travel_dist &&
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	d809      	bhi.n	8002644 <suff_dist_traveled+0x4c>
		(back_right_enc_count - wheel_enc_count[3]) >= travel_dist) {
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <suff_dist_traveled+0x68>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <suff_dist_traveled+0x5c>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	1ad3      	subs	r3, r2, r3
		(back_left_enc_count - wheel_enc_count[2]) >= travel_dist &&
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d801      	bhi.n	8002644 <suff_dist_traveled+0x4c>
		return 1;
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <suff_dist_traveled+0x4e>
	}
	else {
		return 0;
 8002644:	2300      	movs	r3, #0
	}
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b002      	add	sp, #8
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	20000034 	.word	0x20000034
 8002654:	20000044 	.word	0x20000044
 8002658:	20000038 	.word	0x20000038
 800265c:	2000003c 	.word	0x2000003c
 8002660:	20000040 	.word	0x20000040

08002664 <move_forward>:

void move_forward(void) {
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	// code using PWM generation
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_inv_pulse_val(&htim2, slow_pulse_width));
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <move_forward+0xd0>)
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <move_forward+0xd4>)
 800266e:	0011      	movs	r1, r2
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff ff6d 	bl	8002550 <calc_inv_pulse_val>
 8002676:	0003      	movs	r3, r0
 8002678:	001a      	movs	r2, r3
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <move_forward+0xd4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <move_forward+0xd4>)
 8002682:	2100      	movs	r1, #0
 8002684:	0018      	movs	r0, r3
 8002686:	f001 fea7 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_SET);
 800268a:	2390      	movs	r3, #144	; 0x90
 800268c:	05db      	lsls	r3, r3, #23
 800268e:	2201      	movs	r2, #1
 8002690:	2102      	movs	r1, #2
 8002692:	0018      	movs	r0, r3
 8002694:	f001 f803 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, calc_inv_pulse_val(&htim2, slow_pulse_width));
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <move_forward+0xd0>)
 800269a:	781a      	ldrb	r2, [r3, #0]
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <move_forward+0xd4>)
 800269e:	0011      	movs	r1, r2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff ff55 	bl	8002550 <calc_inv_pulse_val>
 80026a6:	0003      	movs	r3, r0
 80026a8:	001a      	movs	r2, r3
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <move_forward+0xd4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <move_forward+0xd4>)
 80026b2:	2108      	movs	r1, #8
 80026b4:	0018      	movs	r0, r3
 80026b6:	f001 fe8f 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_SET);
 80026ba:	2390      	movs	r3, #144	; 0x90
 80026bc:	05db      	lsls	r3, r3, #23
 80026be:	2201      	movs	r2, #1
 80026c0:	2108      	movs	r1, #8
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 ffeb 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, calc_pulse_val(&htim1, slow_pulse_width));
 80026c8:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <move_forward+0xd0>)
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <move_forward+0xd8>)
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7ff ff0b 	bl	80024ec <calc_pulse_val>
 80026d6:	0003      	movs	r3, r0
 80026d8:	001a      	movs	r2, r3
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <move_forward+0xd8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <move_forward+0xd8>)
 80026e2:	2100      	movs	r1, #0
 80026e4:	0018      	movs	r0, r3
 80026e6:	f001 fe77 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_RESET);
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	0099      	lsls	r1, r3, #2
 80026ee:	2390      	movs	r3, #144	; 0x90
 80026f0:	05db      	lsls	r3, r3, #23
 80026f2:	2200      	movs	r2, #0
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 ffd2 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_pulse_val(&htim1, slow_pulse_width));
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <move_forward+0xd0>)
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <move_forward+0xd8>)
 8002700:	0011      	movs	r1, r2
 8002702:	0018      	movs	r0, r3
 8002704:	f7ff fef2 	bl	80024ec <calc_pulse_val>
 8002708:	0003      	movs	r3, r0
 800270a:	001a      	movs	r2, r3
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <move_forward+0xd8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <move_forward+0xd8>)
 8002714:	2108      	movs	r1, #8
 8002716:	0018      	movs	r0, r3
 8002718:	f001 fe5e 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_RESET);
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	0119      	lsls	r1, r3, #4
 8002720:	2390      	movs	r3, #144	; 0x90
 8002722:	05db      	lsls	r3, r3, #23
 8002724:	2200      	movs	r2, #0
 8002726:	0018      	movs	r0, r3
 8002728:	f000 ffb9 	bl	800369e <HAL_GPIO_WritePin>
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	20000000 	.word	0x20000000
 8002738:	200001b4 	.word	0x200001b4
 800273c:	2000016c 	.word	0x2000016c

08002740 <move_backward>:

void move_backward(void) {
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	// code using PWM generation
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_pulse_val(&htim2, slow_pulse_width));
 8002744:	4b32      	ldr	r3, [pc, #200]	; (8002810 <move_backward+0xd0>)
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <move_backward+0xd4>)
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff fecd 	bl	80024ec <calc_pulse_val>
 8002752:	0003      	movs	r3, r0
 8002754:	001a      	movs	r2, r3
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <move_backward+0xd4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <move_backward+0xd4>)
 800275e:	2100      	movs	r1, #0
 8002760:	0018      	movs	r0, r3
 8002762:	f001 fe39 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_RESET);
 8002766:	2390      	movs	r3, #144	; 0x90
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	2200      	movs	r2, #0
 800276c:	2102      	movs	r1, #2
 800276e:	0018      	movs	r0, r3
 8002770:	f000 ff95 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,calc_pulse_val(&htim2, slow_pulse_width));
 8002774:	4b26      	ldr	r3, [pc, #152]	; (8002810 <move_backward+0xd0>)
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <move_backward+0xd4>)
 800277a:	0011      	movs	r1, r2
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff feb5 	bl	80024ec <calc_pulse_val>
 8002782:	0003      	movs	r3, r0
 8002784:	001a      	movs	r2, r3
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <move_backward+0xd4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <move_backward+0xd4>)
 800278e:	2108      	movs	r1, #8
 8002790:	0018      	movs	r0, r3
 8002792:	f001 fe21 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_RESET);
 8002796:	2390      	movs	r3, #144	; 0x90
 8002798:	05db      	lsls	r3, r3, #23
 800279a:	2200      	movs	r2, #0
 800279c:	2108      	movs	r1, #8
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 ff7d 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, calc_inv_pulse_val(&htim1, slow_pulse_width));
 80027a4:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <move_backward+0xd0>)
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <move_backward+0xd8>)
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff fecf 	bl	8002550 <calc_inv_pulse_val>
 80027b2:	0003      	movs	r3, r0
 80027b4:	001a      	movs	r2, r3
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <move_backward+0xd8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <move_backward+0xd8>)
 80027be:	2100      	movs	r1, #0
 80027c0:	0018      	movs	r0, r3
 80027c2:	f001 fe09 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_SET);
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	0099      	lsls	r1, r3, #2
 80027ca:	2390      	movs	r3, #144	; 0x90
 80027cc:	05db      	lsls	r3, r3, #23
 80027ce:	2201      	movs	r2, #1
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 ff64 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_inv_pulse_val(&htim1, slow_pulse_width));
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <move_backward+0xd0>)
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <move_backward+0xd8>)
 80027dc:	0011      	movs	r1, r2
 80027de:	0018      	movs	r0, r3
 80027e0:	f7ff feb6 	bl	8002550 <calc_inv_pulse_val>
 80027e4:	0003      	movs	r3, r0
 80027e6:	001a      	movs	r2, r3
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <move_backward+0xd8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <move_backward+0xd8>)
 80027f0:	2108      	movs	r1, #8
 80027f2:	0018      	movs	r0, r3
 80027f4:	f001 fdf0 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_SET);
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	0119      	lsls	r1, r3, #4
 80027fc:	2390      	movs	r3, #144	; 0x90
 80027fe:	05db      	lsls	r3, r3, #23
 8002800:	2201      	movs	r2, #1
 8002802:	0018      	movs	r0, r3
 8002804:	f000 ff4b 	bl	800369e <HAL_GPIO_WritePin>
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	20000000 	.word	0x20000000
 8002814:	200001b4 	.word	0x200001b4
 8002818:	2000016c 	.word	0x2000016c

0800281c <steer_right>:

void steer_right(void) {
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	// code using PWM generation
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_inv_pulse_val(&htim2, fast_pulse_width));
 8002820:	4b32      	ldr	r3, [pc, #200]	; (80028ec <steer_right+0xd0>)
 8002822:	781a      	ldrb	r2, [r3, #0]
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <steer_right+0xd4>)
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff fe91 	bl	8002550 <calc_inv_pulse_val>
 800282e:	0003      	movs	r3, r0
 8002830:	001a      	movs	r2, r3
 8002832:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <steer_right+0xd4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <steer_right+0xd4>)
 800283a:	2100      	movs	r1, #0
 800283c:	0018      	movs	r0, r3
 800283e:	f001 fdcb 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_SET);
 8002842:	2390      	movs	r3, #144	; 0x90
 8002844:	05db      	lsls	r3, r3, #23
 8002846:	2201      	movs	r2, #1
 8002848:	2102      	movs	r1, #2
 800284a:	0018      	movs	r0, r3
 800284c:	f000 ff27 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, calc_inv_pulse_val(&htim2, fast_pulse_width));
 8002850:	4b26      	ldr	r3, [pc, #152]	; (80028ec <steer_right+0xd0>)
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <steer_right+0xd4>)
 8002856:	0011      	movs	r1, r2
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff fe79 	bl	8002550 <calc_inv_pulse_val>
 800285e:	0003      	movs	r3, r0
 8002860:	001a      	movs	r2, r3
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <steer_right+0xd4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <steer_right+0xd4>)
 800286a:	2108      	movs	r1, #8
 800286c:	0018      	movs	r0, r3
 800286e:	f001 fdb3 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_SET);
 8002872:	2390      	movs	r3, #144	; 0x90
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	2201      	movs	r2, #1
 8002878:	2108      	movs	r1, #8
 800287a:	0018      	movs	r0, r3
 800287c:	f000 ff0f 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, calc_inv_pulse_val(&htim1, fast_pulse_width));
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <steer_right+0xd0>)
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <steer_right+0xd8>)
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff fe61 	bl	8002550 <calc_inv_pulse_val>
 800288e:	0003      	movs	r3, r0
 8002890:	001a      	movs	r2, r3
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <steer_right+0xd8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <steer_right+0xd8>)
 800289a:	2100      	movs	r1, #0
 800289c:	0018      	movs	r0, r3
 800289e:	f001 fd9b 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_SET);
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	0099      	lsls	r1, r3, #2
 80028a6:	2390      	movs	r3, #144	; 0x90
 80028a8:	05db      	lsls	r3, r3, #23
 80028aa:	2201      	movs	r2, #1
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 fef6 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_inv_pulse_val(&htim1, fast_pulse_width));
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <steer_right+0xd0>)
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <steer_right+0xd8>)
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7ff fe48 	bl	8002550 <calc_inv_pulse_val>
 80028c0:	0003      	movs	r3, r0
 80028c2:	001a      	movs	r2, r3
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <steer_right+0xd8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <steer_right+0xd8>)
 80028cc:	2108      	movs	r1, #8
 80028ce:	0018      	movs	r0, r3
 80028d0:	f001 fd82 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_SET);
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	0119      	lsls	r1, r3, #4
 80028d8:	2390      	movs	r3, #144	; 0x90
 80028da:	05db      	lsls	r3, r3, #23
 80028dc:	2201      	movs	r2, #1
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 fedd 	bl	800369e <HAL_GPIO_WritePin>
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	20000001 	.word	0x20000001
 80028f0:	200001b4 	.word	0x200001b4
 80028f4:	2000016c 	.word	0x2000016c

080028f8 <steer_left>:

void steer_left(void) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	// code using PWM generation
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_pulse_val(&htim2, fast_pulse_width));
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <steer_left+0xd0>)
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <steer_left+0xd4>)
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff fdf1 	bl	80024ec <calc_pulse_val>
 800290a:	0003      	movs	r3, r0
 800290c:	001a      	movs	r2, r3
 800290e:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <steer_left+0xd4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <steer_left+0xd4>)
 8002916:	2100      	movs	r1, #0
 8002918:	0018      	movs	r0, r3
 800291a:	f001 fd5d 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_RESET);
 800291e:	2390      	movs	r3, #144	; 0x90
 8002920:	05db      	lsls	r3, r3, #23
 8002922:	2200      	movs	r2, #0
 8002924:	2102      	movs	r1, #2
 8002926:	0018      	movs	r0, r3
 8002928:	f000 feb9 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, calc_pulse_val(&htim2, fast_pulse_width));
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <steer_left+0xd0>)
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <steer_left+0xd4>)
 8002932:	0011      	movs	r1, r2
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff fdd9 	bl	80024ec <calc_pulse_val>
 800293a:	0003      	movs	r3, r0
 800293c:	001a      	movs	r2, r3
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <steer_left+0xd4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <steer_left+0xd4>)
 8002946:	2108      	movs	r1, #8
 8002948:	0018      	movs	r0, r3
 800294a:	f001 fd45 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_RESET);
 800294e:	2390      	movs	r3, #144	; 0x90
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	2200      	movs	r2, #0
 8002954:	2108      	movs	r1, #8
 8002956:	0018      	movs	r0, r3
 8002958:	f000 fea1 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, calc_pulse_val(&htim1, fast_pulse_width));
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <steer_left+0xd0>)
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <steer_left+0xd8>)
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff fdc1 	bl	80024ec <calc_pulse_val>
 800296a:	0003      	movs	r3, r0
 800296c:	001a      	movs	r2, r3
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <steer_left+0xd8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <steer_left+0xd8>)
 8002976:	2100      	movs	r1, #0
 8002978:	0018      	movs	r0, r3
 800297a:	f001 fd2d 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_RESET);
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	0099      	lsls	r1, r3, #2
 8002982:	2390      	movs	r3, #144	; 0x90
 8002984:	05db      	lsls	r3, r3, #23
 8002986:	2200      	movs	r2, #0
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fe88 	bl	800369e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, calc_pulse_val(&htim1, fast_pulse_width));
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <steer_left+0xd0>)
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <steer_left+0xd8>)
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f7ff fda8 	bl	80024ec <calc_pulse_val>
 800299c:	0003      	movs	r3, r0
 800299e:	001a      	movs	r2, r3
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <steer_left+0xd8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <steer_left+0xd8>)
 80029a8:	2108      	movs	r1, #8
 80029aa:	0018      	movs	r0, r3
 80029ac:	f001 fd14 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_RESET);
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	0119      	lsls	r1, r3, #4
 80029b4:	2390      	movs	r3, #144	; 0x90
 80029b6:	05db      	lsls	r3, r3, #23
 80029b8:	2200      	movs	r2, #0
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 fe6f 	bl	800369e <HAL_GPIO_WritePin>
}
 80029c0:	46c0      	nop			; (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	20000001 	.word	0x20000001
 80029cc:	200001b4 	.word	0x200001b4
 80029d0:	2000016c 	.word	0x2000016c

080029d4 <stop>:

void stop(void) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	// code using PWM generation
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <stop+0x70>)
 80029da:	2100      	movs	r1, #0
 80029dc:	0018      	movs	r0, r3
 80029de:	f001 fdb3 	bl	8004548 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, left_in2_Pin, GPIO_PIN_RESET);
 80029e2:	2390      	movs	r3, #144	; 0x90
 80029e4:	05db      	lsls	r3, r3, #23
 80029e6:	2200      	movs	r2, #0
 80029e8:	2102      	movs	r1, #2
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fe57 	bl	800369e <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <stop+0x70>)
 80029f2:	2108      	movs	r1, #8
 80029f4:	0018      	movs	r0, r3
 80029f6:	f001 fda7 	bl	8004548 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, left_in4_Pin, GPIO_PIN_RESET);
 80029fa:	2390      	movs	r3, #144	; 0x90
 80029fc:	05db      	lsls	r3, r3, #23
 80029fe:	2200      	movs	r2, #0
 8002a00:	2108      	movs	r1, #8
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 fe4b 	bl	800369e <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <stop+0x74>)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f001 fd9b 	bl	8004548 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, right_in2_Pin, GPIO_PIN_RESET);
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	0099      	lsls	r1, r3, #2
 8002a16:	2390      	movs	r3, #144	; 0x90
 8002a18:	05db      	lsls	r3, r3, #23
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 fe3e 	bl	800369e <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <stop+0x74>)
 8002a24:	2108      	movs	r1, #8
 8002a26:	0018      	movs	r0, r3
 8002a28:	f001 fd8e 	bl	8004548 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, right_in4_Pin, GPIO_PIN_RESET);
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	0119      	lsls	r1, r3, #4
 8002a30:	2390      	movs	r3, #144	; 0x90
 8002a32:	05db      	lsls	r3, r3, #23
 8002a34:	2200      	movs	r2, #0
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 fe31 	bl	800369e <HAL_GPIO_WritePin>
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	200001b4 	.word	0x200001b4
 8002a48:	2000016c 	.word	0x2000016c

08002a4c <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(bumper_sw_Pin);
 8002a50:	2004      	movs	r0, #4
 8002a52:	f000 fe41 	bl	80036d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	0002      	movs	r2, r0
 8002a64:	1dbb      	adds	r3, r7, #6
 8002a66:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == bumper_sw_Pin) {
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d103      	bne.n	8002a78 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_TIM_Base_Start_IT(&htim6);
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_GPIO_EXTI_Callback+0x24>)
 8002a72:	0018      	movs	r0, r3
 8002a74:	f001 fbd8 	bl	8004228 <HAL_TIM_Base_Start_IT>
	}
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000124 	.word	0x20000124

08002a84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d13a      	bne.n	8002b0c <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_TIM_Base_Stop_IT(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f001 fc17 	bl	80042cc <HAL_TIM_Base_Stop_IT>

		// change the mode of the external interrupt pin into a GPIO input pin
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9e:	240c      	movs	r4, #12
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	2314      	movs	r3, #20
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f004 f801 	bl	8006ab0 <memset>
		GPIO_InitStruct.Pin = bumper_sw_Pin;
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(bumper_sw_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	f000 fc5c 	bl	8003384 <HAL_GPIO_Init>

		if (HAL_GPIO_ReadPin(bumper_sw_GPIO_Port, bumper_sw_Pin) == GPIO_PIN_RESET) {
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002ace:	2104      	movs	r1, #4
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fdc7 	bl	8003664 <HAL_GPIO_ReadPin>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
			if (sw_pushed == 0) {
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <HAL_TIM_PeriodElapsedCallback+0x66>
				sw_pushed = 1;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e002      	b.n	8002af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
			}
			else {
				sw_pushed = 0;
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
			}
		}

		// change the mode of the GPIO pin back into an external interrupt
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002af0:	210c      	movs	r1, #12
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2284      	movs	r2, #132	; 0x84
 8002af6:	0392      	lsls	r2, r2, #14
 8002af8:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	2201      	movs	r2, #1
 8002afe:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(bumper_sw_GPIO_Port, &GPIO_InitStruct);
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002b04:	0019      	movs	r1, r3
 8002b06:	0010      	movs	r0, r2
 8002b08:	f000 fc3c 	bl	8003384 <HAL_GPIO_Init>
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)msg, strlen(msg));
	}
	else {

	}
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b009      	add	sp, #36	; 0x24
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	40001000 	.word	0x40001000
 8002b18:	48000c00 	.word	0x48000c00
 8002b1c:	2000002d 	.word	0x2000002d

08002b20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d126      	bne.n	8002b80 <HAL_TIM_IC_CaptureCallback+0x60>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7f1b      	ldrb	r3, [r3, #28]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <HAL_TIM_IC_CaptureCallback+0x26>
			++back_right_enc_count;
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_TIM_IC_CaptureCallback+0x6c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_TIM_IC_CaptureCallback+0x6c>)
 8002b42:	601a      	str	r2, [r3, #0]
		}
		else {

		}
	}
}
 8002b44:	e01c      	b.n	8002b80 <HAL_TIM_IC_CaptureCallback+0x60>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7f1b      	ldrb	r3, [r3, #28]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d105      	bne.n	8002b5a <HAL_TIM_IC_CaptureCallback+0x3a>
			++back_left_enc_count;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b56:	601a      	str	r2, [r3, #0]
}
 8002b58:	e012      	b.n	8002b80 <HAL_TIM_IC_CaptureCallback+0x60>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7f1b      	ldrb	r3, [r3, #28]
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d105      	bne.n	8002b6e <HAL_TIM_IC_CaptureCallback+0x4e>
			++front_right_enc_count;
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002b6a:	601a      	str	r2, [r3, #0]
}
 8002b6c:	e008      	b.n	8002b80 <HAL_TIM_IC_CaptureCallback+0x60>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7f1b      	ldrb	r3, [r3, #28]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d104      	bne.n	8002b80 <HAL_TIM_IC_CaptureCallback+0x60>
			++front_left_enc_count;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002b7e:	601a      	str	r2, [r3, #0]
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	20000040 	.word	0x20000040
 8002b90:	2000003c 	.word	0x2000003c
 8002b94:	20000038 	.word	0x20000038
 8002b98:	20000034 	.word	0x20000034

08002b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba0:	b672      	cpsid	i
}
 8002ba2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <Error_Handler+0x8>
	...

08002ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_MspInit+0x44>)
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <HAL_MspInit+0x44>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	619a      	str	r2, [r3, #24]
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_MspInit+0x44>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_MspInit+0x44>)
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_MspInit+0x44>)
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	0549      	lsls	r1, r1, #21
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	61da      	str	r2, [r3, #28]
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_MspInit+0x44>)
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	055b      	lsls	r3, r3, #21
 8002bdc:	4013      	ands	r3, r2
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b002      	add	sp, #8
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b08f      	sub	sp, #60	; 0x3c
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	2324      	movs	r3, #36	; 0x24
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	2314      	movs	r3, #20
 8002c00:	001a      	movs	r2, r3
 8002c02:	2100      	movs	r1, #0
 8002c04:	f003 ff54 	bl	8006ab0 <memset>
  if(htim_base->Instance==TIM1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <HAL_TIM_Base_MspInit+0x188>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c12:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	0109      	lsls	r1, r1, #4
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	4013      	ands	r3, r2
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002c2e:	e09e      	b.n	8002d6e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	05db      	lsls	r3, r3, #23
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d10c      	bne.n	8002c56 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	4b4e      	ldr	r3, [pc, #312]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	430a      	orrs	r2, r1
 8002c46:	61da      	str	r2, [r3, #28]
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	69fb      	ldr	r3, [r7, #28]
}
 8002c54:	e08b      	b.n	8002d6e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a49      	ldr	r2, [pc, #292]	; (8002d80 <HAL_TIM_Base_MspInit+0x190>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d151      	bne.n	8002d04 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c60:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c66:	2102      	movs	r1, #2
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	61da      	str	r2, [r3, #28]
 8002c6c:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2202      	movs	r2, #2
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c78:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	0309      	lsls	r1, r1, #12
 8002c82:	430a      	orrs	r2, r1
 8002c84:	615a      	str	r2, [r3, #20]
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	031b      	lsls	r3, r3, #12
 8002c8e:	4013      	ands	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = back_right_enc_Pin|back_left_enc_Pin|front_left_enc_Pin;
 8002c94:	2124      	movs	r1, #36	; 0x24
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	22b0      	movs	r2, #176	; 0xb0
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	000c      	movs	r4, r1
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	193b      	adds	r3, r7, r4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	4a32      	ldr	r2, [pc, #200]	; (8002d84 <HAL_TIM_Base_MspInit+0x194>)
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	f000 fb60 	bl	8003384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = front_right_enc_Pin;
 8002cc4:	0021      	movs	r1, r4
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	0052      	lsls	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(front_right_enc_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <HAL_TIM_Base_MspInit+0x194>)
 8002cea:	0019      	movs	r1, r3
 8002cec:	0010      	movs	r0, r2
 8002cee:	f000 fb49 	bl	8003384 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2010      	movs	r0, #16
 8002cf8:	f000 fa94 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cfc:	2010      	movs	r0, #16
 8002cfe:	f000 faa6 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 8002d02:	e034      	b.n	8002d6e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM6)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <HAL_TIM_Base_MspInit+0x198>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d114      	bne.n	8002d38 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002d14:	2110      	movs	r1, #16
 8002d16:	430a      	orrs	r2, r1
 8002d18:	61da      	str	r2, [r3, #28]
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	2210      	movs	r2, #16
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2011      	movs	r0, #17
 8002d2c:	f000 fa7a 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d30:	2011      	movs	r0, #17
 8002d32:	f000 fa8c 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 8002d36:	e01a      	b.n	8002d6e <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM16)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_TIM_Base_MspInit+0x19c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d115      	bne.n	8002d6e <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	0289      	lsls	r1, r1, #10
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	619a      	str	r2, [r3, #24]
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_TIM_Base_MspInit+0x18c>)
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	2015      	movs	r0, #21
 8002d64:	f000 fa5e 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002d68:	2015      	movs	r0, #21
 8002d6a:	f000 fa70 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b00f      	add	sp, #60	; 0x3c
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	40012c00 	.word	0x40012c00
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40000400 	.word	0x40000400
 8002d84:	48000800 	.word	0x48000800
 8002d88:	40001000 	.word	0x40001000
 8002d8c:	40014400 	.word	0x40014400

08002d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b08b      	sub	sp, #44	; 0x2c
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	2414      	movs	r4, #20
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	2314      	movs	r3, #20
 8002da0:	001a      	movs	r2, r3
 8002da2:	2100      	movs	r1, #0
 8002da4:	f003 fe84 	bl	8006ab0 <memset>
  if(htim->Instance==TIM1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <HAL_TIM_MspPostInit+0xd0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d126      	bne.n	8002e00 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <HAL_TIM_MspPostInit+0xd4>)
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_TIM_MspPostInit+0xd4>)
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	0289      	lsls	r1, r1, #10
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	615a      	str	r2, [r3, #20]
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <HAL_TIM_MspPostInit+0xd4>)
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	029b      	lsls	r3, r3, #10
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = right_in1_Pin|right_in3_Pin;
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	22a0      	movs	r2, #160	; 0xa0
 8002dd2:	00d2      	lsls	r2, r2, #3
 8002dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	0021      	movs	r1, r4
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2202      	movs	r2, #2
 8002ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2202      	movs	r2, #2
 8002dee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df0:	187a      	adds	r2, r7, r1
 8002df2:	2390      	movs	r3, #144	; 0x90
 8002df4:	05db      	lsls	r3, r3, #23
 8002df6:	0011      	movs	r1, r2
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 fac3 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dfe:	e02a      	b.n	8002e56 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	05db      	lsls	r3, r3, #23
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d124      	bne.n	8002e56 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_TIM_MspPostInit+0xd4>)
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <HAL_TIM_MspPostInit+0xd4>)
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	0289      	lsls	r1, r1, #10
 8002e16:	430a      	orrs	r2, r1
 8002e18:	615a      	str	r2, [r3, #20]
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_TIM_MspPostInit+0xd4>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	029b      	lsls	r3, r3, #10
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = left_in1_Pin|left_in3_Pin;
 8002e28:	2114      	movs	r1, #20
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2202      	movs	r2, #2
 8002e34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2202      	movs	r2, #2
 8002e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e48:	187a      	adds	r2, r7, r1
 8002e4a:	2390      	movs	r3, #144	; 0x90
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 fa97 	bl	8003384 <HAL_GPIO_Init>
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b00b      	add	sp, #44	; 0x2c
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40021000 	.word	0x40021000

08002e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b08b      	sub	sp, #44	; 0x2c
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	2414      	movs	r4, #20
 8002e72:	193b      	adds	r3, r7, r4
 8002e74:	0018      	movs	r0, r3
 8002e76:	2314      	movs	r3, #20
 8002e78:	001a      	movs	r2, r3
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	f003 fe18 	bl	8006ab0 <memset>
  if(huart->Instance==USART1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a20      	ldr	r2, [pc, #128]	; (8002f08 <HAL_UART_MspInit+0xa0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d139      	bne.n	8002efe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_UART_MspInit+0xa4>)
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <HAL_UART_MspInit+0xa4>)
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	01c9      	lsls	r1, r1, #7
 8002e94:	430a      	orrs	r2, r1
 8002e96:	619a      	str	r2, [r3, #24]
 8002e98:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_UART_MspInit+0xa4>)
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	01db      	lsls	r3, r3, #7
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_UART_MspInit+0xa4>)
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_UART_MspInit+0xa4>)
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	02c9      	lsls	r1, r1, #11
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	615a      	str	r2, [r3, #20]
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_UART_MspInit+0xa4>)
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	02db      	lsls	r3, r3, #11
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ec2:	0021      	movs	r1, r4
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	22c0      	movs	r2, #192	; 0xc0
 8002ec8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	2202      	movs	r2, #2
 8002ece:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed6:	187b      	adds	r3, r7, r1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_UART_MspInit+0xa8>)
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	0010      	movs	r0, r2
 8002eea:	f000 fa4b 	bl	8003384 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	201b      	movs	r0, #27
 8002ef4:	f000 f996 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ef8:	201b      	movs	r0, #27
 8002efa:	f000 f9a8 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b00b      	add	sp, #44	; 0x2c
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	48000400 	.word	0x48000400

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <NMI_Handler+0x4>

08002f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <HardFault_Handler+0x4>

08002f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f38:	f000 f8ac 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <TIM3_IRQHandler+0x14>)
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f001 fcde 	bl	800490c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000054 	.word	0x20000054

08002f5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <TIM6_DAC_IRQHandler+0x14>)
 8002f62:	0018      	movs	r0, r3
 8002f64:	f001 fcd2 	bl	800490c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000124 	.word	0x20000124

08002f74 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <TIM16_IRQHandler+0x14>)
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f001 fcc6 	bl	800490c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	200001fc 	.word	0x200001fc

08002f8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <USART1_IRQHandler+0x14>)
 8002f92:	0018      	movs	r0, r3
 8002f94:	f002 fdfa 	bl	8005b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	2000009c 	.word	0x2000009c

08002fa4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fb0:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fb2:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8002fb4:	f7ff fff6 	bl	8002fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fb8:	480c      	ldr	r0, [pc, #48]	; (8002fec <LoopForever+0x6>)
  ldr r1, =_edata
 8002fba:	490d      	ldr	r1, [pc, #52]	; (8002ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <LoopForever+0xe>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc0:	e002      	b.n	8002fc8 <LoopCopyDataInit>

08002fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc6:	3304      	adds	r3, #4

08002fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fcc:	d3f9      	bcc.n	8002fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fd0:	4c0a      	ldr	r4, [pc, #40]	; (8002ffc <LoopForever+0x16>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd4:	e001      	b.n	8002fda <LoopFillZerobss>

08002fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd8:	3204      	adds	r2, #4

08002fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fdc:	d3fb      	bcc.n	8002fd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fde:	f003 fd43 	bl	8006a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fe2:	f7fe fcc1 	bl	8001968 <main>

08002fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fe6:	e7fe      	b.n	8002fe6 <LoopForever>
  ldr   r0, =_estack
 8002fe8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002ff4:	08006c38 	.word	0x08006c38
  ldr r2, =_sbss
 8002ff8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002ffc:	20000248 	.word	0x20000248

08003000 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC1_COMP_IRQHandler>
	...

08003004 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <HAL_Init+0x24>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_Init+0x24>)
 800300e:	2110      	movs	r1, #16
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003014:	2000      	movs	r0, #0
 8003016:	f000 f809 	bl	800302c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301a:	f7ff fdc5 	bl	8002ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	40022000 	.word	0x40022000

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_InitTick+0x5c>)
 8003036:	681c      	ldr	r4, [r3, #0]
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_InitTick+0x60>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	0019      	movs	r1, r3
 800303e:	23fa      	movs	r3, #250	; 0xfa
 8003040:	0098      	lsls	r0, r3, #2
 8003042:	f7fd f861 	bl	8000108 <__udivsi3>
 8003046:	0003      	movs	r3, r0
 8003048:	0019      	movs	r1, r3
 800304a:	0020      	movs	r0, r4
 800304c:	f7fd f85c 	bl	8000108 <__udivsi3>
 8003050:	0003      	movs	r3, r0
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f90b 	bl	800326e <HAL_SYSTICK_Config>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d001      	beq.n	8003060 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e00f      	b.n	8003080 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d80b      	bhi.n	800307e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	2301      	movs	r3, #1
 800306a:	425b      	negs	r3, r3
 800306c:	2200      	movs	r2, #0
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f8d8 	bl	8003224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_InitTick+0x64>)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b003      	add	sp, #12
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	20000004 	.word	0x20000004
 800308c:	2000000c 	.word	0x2000000c
 8003090:	20000008 	.word	0x20000008

08003094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_IncTick+0x1c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_IncTick+0x20>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	18d2      	adds	r2, r2, r3
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_IncTick+0x20>)
 80030a6:	601a      	str	r2, [r3, #0]
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	2000000c 	.word	0x2000000c
 80030b4:	20000244 	.word	0x20000244

080030b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <HAL_GetTick+0x10>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20000244 	.word	0x20000244

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	0002      	movs	r2, r0
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b7f      	cmp	r3, #127	; 0x7f
 80030de:	d809      	bhi.n	80030f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	001a      	movs	r2, r3
 80030e6:	231f      	movs	r3, #31
 80030e8:	401a      	ands	r2, r3
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <__NVIC_EnableIRQ+0x30>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	4091      	lsls	r1, r2
 80030f0:	000a      	movs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
  }
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	0002      	movs	r2, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b7f      	cmp	r3, #127	; 0x7f
 8003114:	d828      	bhi.n	8003168 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003116:	4a2f      	ldr	r2, [pc, #188]	; (80031d4 <__NVIC_SetPriority+0xd4>)
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b25b      	sxtb	r3, r3
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	33c0      	adds	r3, #192	; 0xc0
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	589b      	ldr	r3, [r3, r2]
 8003126:	1dfa      	adds	r2, r7, #7
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	0011      	movs	r1, r2
 800312c:	2203      	movs	r2, #3
 800312e:	400a      	ands	r2, r1
 8003130:	00d2      	lsls	r2, r2, #3
 8003132:	21ff      	movs	r1, #255	; 0xff
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	43d2      	mvns	r2, r2
 800313a:	401a      	ands	r2, r3
 800313c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	22ff      	movs	r2, #255	; 0xff
 8003144:	401a      	ands	r2, r3
 8003146:	1dfb      	adds	r3, r7, #7
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	0018      	movs	r0, r3
 800314c:	2303      	movs	r3, #3
 800314e:	4003      	ands	r3, r0
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003154:	481f      	ldr	r0, [pc, #124]	; (80031d4 <__NVIC_SetPriority+0xd4>)
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b25b      	sxtb	r3, r3
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	430a      	orrs	r2, r1
 8003160:	33c0      	adds	r3, #192	; 0xc0
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003166:	e031      	b.n	80031cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003168:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <__NVIC_SetPriority+0xd8>)
 800316a:	1dfb      	adds	r3, r7, #7
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	0019      	movs	r1, r3
 8003170:	230f      	movs	r3, #15
 8003172:	400b      	ands	r3, r1
 8003174:	3b08      	subs	r3, #8
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3306      	adds	r3, #6
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	3304      	adds	r3, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1dfa      	adds	r2, r7, #7
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	0011      	movs	r1, r2
 8003188:	2203      	movs	r2, #3
 800318a:	400a      	ands	r2, r1
 800318c:	00d2      	lsls	r2, r2, #3
 800318e:	21ff      	movs	r1, #255	; 0xff
 8003190:	4091      	lsls	r1, r2
 8003192:	000a      	movs	r2, r1
 8003194:	43d2      	mvns	r2, r2
 8003196:	401a      	ands	r2, r3
 8003198:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	22ff      	movs	r2, #255	; 0xff
 80031a0:	401a      	ands	r2, r3
 80031a2:	1dfb      	adds	r3, r7, #7
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	0018      	movs	r0, r3
 80031a8:	2303      	movs	r3, #3
 80031aa:	4003      	ands	r3, r0
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031b0:	4809      	ldr	r0, [pc, #36]	; (80031d8 <__NVIC_SetPriority+0xd8>)
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	001c      	movs	r4, r3
 80031b8:	230f      	movs	r3, #15
 80031ba:	4023      	ands	r3, r4
 80031bc:	3b08      	subs	r3, #8
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	430a      	orrs	r2, r1
 80031c2:	3306      	adds	r3, #6
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	18c3      	adds	r3, r0, r3
 80031c8:	3304      	adds	r3, #4
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b003      	add	sp, #12
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	e000e100 	.word	0xe000e100
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	045b      	lsls	r3, r3, #17
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d301      	bcc.n	80031f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f0:	2301      	movs	r3, #1
 80031f2:	e010      	b.n	8003216 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <SysTick_Config+0x44>)
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	3a01      	subs	r2, #1
 80031fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031fc:	2301      	movs	r3, #1
 80031fe:	425b      	negs	r3, r3
 8003200:	2103      	movs	r1, #3
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff ff7c 	bl	8003100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <SysTick_Config+0x44>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <SysTick_Config+0x44>)
 8003210:	2207      	movs	r2, #7
 8003212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	e000e010 	.word	0xe000e010

08003224 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	210f      	movs	r1, #15
 8003230:	187b      	adds	r3, r7, r1
 8003232:	1c02      	adds	r2, r0, #0
 8003234:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	187b      	adds	r3, r7, r1
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b25b      	sxtb	r3, r3
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff ff5d 	bl	8003100 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	0002      	movs	r2, r0
 8003256:	1dfb      	adds	r3, r7, #7
 8003258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b25b      	sxtb	r3, r3
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff ff33 	bl	80030cc <__NVIC_EnableIRQ>
}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b002      	add	sp, #8
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff ffaf 	bl	80031dc <SysTick_Config>
 800327e:	0003      	movs	r3, r0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2221      	movs	r2, #33	; 0x21
 8003294:	5c9b      	ldrb	r3, [r3, r2]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d008      	beq.n	80032ae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2204      	movs	r2, #4
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	2100      	movs	r1, #0
 80032a8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e020      	b.n	80032f0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	210e      	movs	r1, #14
 80032ba:	438a      	bics	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	438a      	bics	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	2101      	movs	r1, #1
 80032d8:	4091      	lsls	r1, r2
 80032da:	000a      	movs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2221      	movs	r2, #33	; 0x21
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	0018      	movs	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	210f      	movs	r1, #15
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2221      	movs	r2, #33	; 0x21
 800330c:	5c9b      	ldrb	r3, [r3, r2]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d006      	beq.n	8003322 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2204      	movs	r2, #4
 8003318:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800331a:	187b      	adds	r3, r7, r1
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e028      	b.n	8003374 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	210e      	movs	r1, #14
 800332e:	438a      	bics	r2, r1
 8003330:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	438a      	bics	r2, r1
 8003340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	2101      	movs	r1, #1
 800334c:	4091      	lsls	r1, r2
 800334e:	000a      	movs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2221      	movs	r2, #33	; 0x21
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	2100      	movs	r1, #0
 8003360:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	0010      	movs	r0, r2
 8003372:	4798      	blx	r3
    }
  }
  return status;
 8003374:	230f      	movs	r3, #15
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	781b      	ldrb	r3, [r3, #0]
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b004      	add	sp, #16
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003392:	e14f      	b.n	8003634 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4091      	lsls	r1, r2
 800339e:	000a      	movs	r2, r1
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d100      	bne.n	80033ac <HAL_GPIO_Init+0x28>
 80033aa:	e140      	b.n	800362e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2203      	movs	r2, #3
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d005      	beq.n	80033c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2203      	movs	r2, #3
 80033be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d130      	bne.n	8003426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	409a      	lsls	r2, r3
 80033d2:	0013      	movs	r3, r2
 80033d4:	43da      	mvns	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	409a      	lsls	r2, r3
 80033e6:	0013      	movs	r3, r2
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033fa:	2201      	movs	r2, #1
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
 8003400:	0013      	movs	r3, r2
 8003402:	43da      	mvns	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	2201      	movs	r2, #1
 8003412:	401a      	ands	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	409a      	lsls	r2, r3
 8003418:	0013      	movs	r3, r2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	4013      	ands	r3, r2
 800342e:	2b03      	cmp	r3, #3
 8003430:	d017      	beq.n	8003462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	409a      	lsls	r2, r3
 8003440:	0013      	movs	r3, r2
 8003442:	43da      	mvns	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	0013      	movs	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2203      	movs	r2, #3
 8003468:	4013      	ands	r3, r2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d123      	bne.n	80034b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	58d3      	ldr	r3, [r2, r3]
 800347a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2207      	movs	r2, #7
 8003480:	4013      	ands	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	409a      	lsls	r2, r3
 8003488:	0013      	movs	r3, r2
 800348a:	43da      	mvns	r2, r3
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2107      	movs	r1, #7
 800349a:	400b      	ands	r3, r1
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	409a      	lsls	r2, r3
 80034a0:	0013      	movs	r3, r2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	08da      	lsrs	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3208      	adds	r2, #8
 80034b0:	0092      	lsls	r2, r2, #2
 80034b2:	6939      	ldr	r1, [r7, #16]
 80034b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	409a      	lsls	r2, r3
 80034c4:	0013      	movs	r3, r2
 80034c6:	43da      	mvns	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2203      	movs	r2, #3
 80034d4:	401a      	ands	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	0013      	movs	r3, r2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	23c0      	movs	r3, #192	; 0xc0
 80034f0:	029b      	lsls	r3, r3, #10
 80034f2:	4013      	ands	r3, r2
 80034f4:	d100      	bne.n	80034f8 <HAL_GPIO_Init+0x174>
 80034f6:	e09a      	b.n	800362e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f8:	4b54      	ldr	r3, [pc, #336]	; (800364c <HAL_GPIO_Init+0x2c8>)
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_GPIO_Init+0x2c8>)
 80034fe:	2101      	movs	r1, #1
 8003500:	430a      	orrs	r2, r1
 8003502:	619a      	str	r2, [r3, #24]
 8003504:	4b51      	ldr	r3, [pc, #324]	; (800364c <HAL_GPIO_Init+0x2c8>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003510:	4a4f      	ldr	r2, [pc, #316]	; (8003650 <HAL_GPIO_Init+0x2cc>)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	589b      	ldr	r3, [r3, r2]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2203      	movs	r2, #3
 8003522:	4013      	ands	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	409a      	lsls	r2, r3
 800352a:	0013      	movs	r3, r2
 800352c:	43da      	mvns	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	2390      	movs	r3, #144	; 0x90
 8003538:	05db      	lsls	r3, r3, #23
 800353a:	429a      	cmp	r2, r3
 800353c:	d013      	beq.n	8003566 <HAL_GPIO_Init+0x1e2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a44      	ldr	r2, [pc, #272]	; (8003654 <HAL_GPIO_Init+0x2d0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00d      	beq.n	8003562 <HAL_GPIO_Init+0x1de>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a43      	ldr	r2, [pc, #268]	; (8003658 <HAL_GPIO_Init+0x2d4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x1da>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a42      	ldr	r2, [pc, #264]	; (800365c <HAL_GPIO_Init+0x2d8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_GPIO_Init+0x1d6>
 8003556:	2303      	movs	r3, #3
 8003558:	e006      	b.n	8003568 <HAL_GPIO_Init+0x1e4>
 800355a:	2305      	movs	r3, #5
 800355c:	e004      	b.n	8003568 <HAL_GPIO_Init+0x1e4>
 800355e:	2302      	movs	r3, #2
 8003560:	e002      	b.n	8003568 <HAL_GPIO_Init+0x1e4>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_GPIO_Init+0x1e4>
 8003566:	2300      	movs	r3, #0
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	2103      	movs	r1, #3
 800356c:	400a      	ands	r2, r1
 800356e:	0092      	lsls	r2, r2, #2
 8003570:	4093      	lsls	r3, r2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003578:	4935      	ldr	r1, [pc, #212]	; (8003650 <HAL_GPIO_Init+0x2cc>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	3302      	adds	r3, #2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43da      	mvns	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	035b      	lsls	r3, r3, #13
 800359e:	4013      	ands	r3, r2
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80035b0:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	039b      	lsls	r3, r3, #14
 80035c8:	4013      	ands	r3, r2
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035d4:	4b22      	ldr	r3, [pc, #136]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	43da      	mvns	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	029b      	lsls	r3, r3, #10
 80035f2:	4013      	ands	r3, r2
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	43da      	mvns	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	025b      	lsls	r3, r3, #9
 800361c:	4013      	ands	r3, r2
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3301      	adds	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	40da      	lsrs	r2, r3
 800363c:	1e13      	subs	r3, r2, #0
 800363e:	d000      	beq.n	8003642 <HAL_GPIO_Init+0x2be>
 8003640:	e6a8      	b.n	8003394 <HAL_GPIO_Init+0x10>
  } 
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b006      	add	sp, #24
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	40010000 	.word	0x40010000
 8003654:	48000400 	.word	0x48000400
 8003658:	48000800 	.word	0x48000800
 800365c:	48000c00 	.word	0x48000c00
 8003660:	40010400 	.word	0x40010400

08003664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	000a      	movs	r2, r1
 800366e:	1cbb      	adds	r3, r7, #2
 8003670:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	1cba      	adds	r2, r7, #2
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	4013      	ands	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800367e:	230f      	movs	r3, #15
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e003      	b.n	8003690 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003688:	230f      	movs	r3, #15
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003690:	230f      	movs	r3, #15
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	781b      	ldrb	r3, [r3, #0]
  }
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b004      	add	sp, #16
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	0008      	movs	r0, r1
 80036a8:	0011      	movs	r1, r2
 80036aa:	1cbb      	adds	r3, r7, #2
 80036ac:	1c02      	adds	r2, r0, #0
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	1c7b      	adds	r3, r7, #1
 80036b2:	1c0a      	adds	r2, r1, #0
 80036b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b6:	1c7b      	adds	r3, r7, #1
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036be:	1cbb      	adds	r3, r7, #2
 80036c0:	881a      	ldrh	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036c6:	e003      	b.n	80036d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036c8:	1cbb      	adds	r3, r7, #2
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b002      	add	sp, #8
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	0002      	movs	r2, r0
 80036e0:	1dbb      	adds	r3, r7, #6
 80036e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	1dba      	adds	r2, r7, #6
 80036ea:	8812      	ldrh	r2, [r2, #0]
 80036ec:	4013      	ands	r3, r2
 80036ee:	d008      	beq.n	8003702 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80036f2:	1dba      	adds	r2, r7, #6
 80036f4:	8812      	ldrh	r2, [r2, #0]
 80036f6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7ff f9ad 	bl	8002a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	40010400 	.word	0x40010400

08003710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e301      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	4013      	ands	r3, r2
 800372a:	d100      	bne.n	800372e <HAL_RCC_OscConfig+0x1e>
 800372c:	e08d      	b.n	800384a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800372e:	4bc3      	ldr	r3, [pc, #780]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	220c      	movs	r2, #12
 8003734:	4013      	ands	r3, r2
 8003736:	2b04      	cmp	r3, #4
 8003738:	d00e      	beq.n	8003758 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800373a:	4bc0      	ldr	r3, [pc, #768]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	220c      	movs	r2, #12
 8003740:	4013      	ands	r3, r2
 8003742:	2b08      	cmp	r3, #8
 8003744:	d116      	bne.n	8003774 <HAL_RCC_OscConfig+0x64>
 8003746:	4bbd      	ldr	r3, [pc, #756]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	025b      	lsls	r3, r3, #9
 800374e:	401a      	ands	r2, r3
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	025b      	lsls	r3, r3, #9
 8003754:	429a      	cmp	r2, r3
 8003756:	d10d      	bne.n	8003774 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4bb8      	ldr	r3, [pc, #736]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	029b      	lsls	r3, r3, #10
 8003760:	4013      	ands	r3, r2
 8003762:	d100      	bne.n	8003766 <HAL_RCC_OscConfig+0x56>
 8003764:	e070      	b.n	8003848 <HAL_RCC_OscConfig+0x138>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d000      	beq.n	8003770 <HAL_RCC_OscConfig+0x60>
 800376e:	e06b      	b.n	8003848 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e2d8      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_RCC_OscConfig+0x7c>
 800377c:	4baf      	ldr	r3, [pc, #700]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4bae      	ldr	r3, [pc, #696]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	0249      	lsls	r1, r1, #9
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e02f      	b.n	80037ec <HAL_RCC_OscConfig+0xdc>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10c      	bne.n	80037ae <HAL_RCC_OscConfig+0x9e>
 8003794:	4ba9      	ldr	r3, [pc, #676]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4ba8      	ldr	r3, [pc, #672]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800379a:	49a9      	ldr	r1, [pc, #676]	; (8003a40 <HAL_RCC_OscConfig+0x330>)
 800379c:	400a      	ands	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	4ba6      	ldr	r3, [pc, #664]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4ba5      	ldr	r3, [pc, #660]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037a6:	49a7      	ldr	r1, [pc, #668]	; (8003a44 <HAL_RCC_OscConfig+0x334>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e01e      	b.n	80037ec <HAL_RCC_OscConfig+0xdc>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d10e      	bne.n	80037d4 <HAL_RCC_OscConfig+0xc4>
 80037b6:	4ba1      	ldr	r3, [pc, #644]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4ba0      	ldr	r3, [pc, #640]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	02c9      	lsls	r1, r1, #11
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	4b9d      	ldr	r3, [pc, #628]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b9c      	ldr	r3, [pc, #624]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037ca:	2180      	movs	r1, #128	; 0x80
 80037cc:	0249      	lsls	r1, r1, #9
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0xdc>
 80037d4:	4b99      	ldr	r3, [pc, #612]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b98      	ldr	r3, [pc, #608]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037da:	4999      	ldr	r1, [pc, #612]	; (8003a40 <HAL_RCC_OscConfig+0x330>)
 80037dc:	400a      	ands	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	4b96      	ldr	r3, [pc, #600]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b95      	ldr	r3, [pc, #596]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80037e6:	4997      	ldr	r1, [pc, #604]	; (8003a44 <HAL_RCC_OscConfig+0x334>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d014      	beq.n	800381e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7ff fc60 	bl	80030b8 <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fe:	f7ff fc5b 	bl	80030b8 <HAL_GetTick>
 8003802:	0002      	movs	r2, r0
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b64      	cmp	r3, #100	; 0x64
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e28a      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003810:	4b8a      	ldr	r3, [pc, #552]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	029b      	lsls	r3, r3, #10
 8003818:	4013      	ands	r3, r2
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0xee>
 800381c:	e015      	b.n	800384a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7ff fc4b 	bl	80030b8 <HAL_GetTick>
 8003822:	0003      	movs	r3, r0
 8003824:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003828:	f7ff fc46 	bl	80030b8 <HAL_GetTick>
 800382c:	0002      	movs	r2, r0
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e275      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	4b80      	ldr	r3, [pc, #512]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	029b      	lsls	r3, r3, #10
 8003842:	4013      	ands	r3, r2
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x118>
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2202      	movs	r2, #2
 8003850:	4013      	ands	r3, r2
 8003852:	d100      	bne.n	8003856 <HAL_RCC_OscConfig+0x146>
 8003854:	e069      	b.n	800392a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003856:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	220c      	movs	r2, #12
 800385c:	4013      	ands	r3, r2
 800385e:	d00b      	beq.n	8003878 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003860:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	220c      	movs	r2, #12
 8003866:	4013      	ands	r3, r2
 8003868:	2b08      	cmp	r3, #8
 800386a:	d11c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x196>
 800386c:	4b73      	ldr	r3, [pc, #460]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	025b      	lsls	r3, r3, #9
 8003874:	4013      	ands	r3, r2
 8003876:	d116      	bne.n	80038a6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003878:	4b70      	ldr	r3, [pc, #448]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x17e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e24b      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b6b      	ldr	r3, [pc, #428]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	22f8      	movs	r2, #248	; 0xf8
 8003894:	4393      	bics	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	00da      	lsls	r2, r3, #3
 800389e:	4b67      	ldr	r3, [pc, #412]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a4:	e041      	b.n	800392a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d024      	beq.n	80038f8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ae:	4b63      	ldr	r3, [pc, #396]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b62      	ldr	r3, [pc, #392]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80038b4:	2101      	movs	r1, #1
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7ff fbfd 	bl	80030b8 <HAL_GetTick>
 80038be:	0003      	movs	r3, r0
 80038c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c4:	f7ff fbf8 	bl	80030b8 <HAL_GetTick>
 80038c8:	0002      	movs	r2, r0
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e227      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2202      	movs	r2, #2
 80038dc:	4013      	ands	r3, r2
 80038de:	d0f1      	beq.n	80038c4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e0:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	22f8      	movs	r2, #248	; 0xf8
 80038e6:	4393      	bics	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00da      	lsls	r2, r3, #3
 80038f0:	4b52      	ldr	r3, [pc, #328]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e018      	b.n	800392a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b4f      	ldr	r3, [pc, #316]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80038fe:	2101      	movs	r1, #1
 8003900:	438a      	bics	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7ff fbd8 	bl	80030b8 <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390e:	f7ff fbd3 	bl	80030b8 <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e202      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003920:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	d1f1      	bne.n	800390e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2208      	movs	r2, #8
 8003930:	4013      	ands	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d019      	beq.n	8003970 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393c:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800393e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003940:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003942:	2101      	movs	r1, #1
 8003944:	430a      	orrs	r2, r1
 8003946:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003948:	f7ff fbb6 	bl	80030b8 <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003952:	f7ff fbb1 	bl	80030b8 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1e0      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003964:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2202      	movs	r2, #2
 800396a:	4013      	ands	r3, r2
 800396c:	d0f1      	beq.n	8003952 <HAL_RCC_OscConfig+0x242>
 800396e:	e018      	b.n	80039a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003976:	2101      	movs	r1, #1
 8003978:	438a      	bics	r2, r1
 800397a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397c:	f7ff fb9c 	bl	80030b8 <HAL_GetTick>
 8003980:	0003      	movs	r3, r0
 8003982:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003986:	f7ff fb97 	bl	80030b8 <HAL_GetTick>
 800398a:	0002      	movs	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e1c6      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	2202      	movs	r2, #2
 800399e:	4013      	ands	r3, r2
 80039a0:	d1f1      	bne.n	8003986 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2204      	movs	r2, #4
 80039a8:	4013      	ands	r3, r2
 80039aa:	d100      	bne.n	80039ae <HAL_RCC_OscConfig+0x29e>
 80039ac:	e0b4      	b.n	8003b18 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ae:	201f      	movs	r0, #31
 80039b0:	183b      	adds	r3, r7, r0
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b6:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	055b      	lsls	r3, r3, #21
 80039be:	4013      	ands	r3, r2
 80039c0:	d110      	bne.n	80039e4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	0549      	lsls	r1, r1, #21
 80039cc:	430a      	orrs	r2, r1
 80039ce:	61da      	str	r2, [r3, #28]
 80039d0:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	055b      	lsls	r3, r3, #21
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <HAL_RCC_OscConfig+0x338>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4013      	ands	r3, r2
 80039ee:	d11a      	bne.n	8003a26 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f0:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <HAL_RCC_OscConfig+0x338>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_RCC_OscConfig+0x338>)
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	0049      	lsls	r1, r1, #1
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fe:	f7ff fb5b 	bl	80030b8 <HAL_GetTick>
 8003a02:	0003      	movs	r3, r0
 8003a04:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7ff fb56 	bl	80030b8 <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e185      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_OscConfig+0x338>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4013      	ands	r3, r2
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10e      	bne.n	8003a4c <HAL_RCC_OscConfig+0x33c>
 8003a2e:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <HAL_RCC_OscConfig+0x32c>)
 8003a34:	2101      	movs	r1, #1
 8003a36:	430a      	orrs	r2, r1
 8003a38:	621a      	str	r2, [r3, #32]
 8003a3a:	e035      	b.n	8003aa8 <HAL_RCC_OscConfig+0x398>
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	fffeffff 	.word	0xfffeffff
 8003a44:	fffbffff 	.word	0xfffbffff
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10c      	bne.n	8003a6e <HAL_RCC_OscConfig+0x35e>
 8003a54:	4bb6      	ldr	r3, [pc, #728]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	4bb5      	ldr	r3, [pc, #724]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	621a      	str	r2, [r3, #32]
 8003a60:	4bb3      	ldr	r3, [pc, #716]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	4bb2      	ldr	r3, [pc, #712]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a66:	2104      	movs	r1, #4
 8003a68:	438a      	bics	r2, r1
 8003a6a:	621a      	str	r2, [r3, #32]
 8003a6c:	e01c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x398>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b05      	cmp	r3, #5
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x380>
 8003a76:	4bae      	ldr	r3, [pc, #696]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	4bad      	ldr	r3, [pc, #692]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	621a      	str	r2, [r3, #32]
 8003a82:	4bab      	ldr	r3, [pc, #684]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	4baa      	ldr	r3, [pc, #680]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a88:	2101      	movs	r1, #1
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	621a      	str	r2, [r3, #32]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x398>
 8003a90:	4ba7      	ldr	r3, [pc, #668]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	4ba6      	ldr	r3, [pc, #664]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a96:	2101      	movs	r1, #1
 8003a98:	438a      	bics	r2, r1
 8003a9a:	621a      	str	r2, [r3, #32]
 8003a9c:	4ba4      	ldr	r3, [pc, #656]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	4ba3      	ldr	r3, [pc, #652]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003aa2:	2104      	movs	r1, #4
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d014      	beq.n	8003ada <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab0:	f7ff fb02 	bl	80030b8 <HAL_GetTick>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	e009      	b.n	8003ace <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7ff fafd 	bl	80030b8 <HAL_GetTick>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	4a9b      	ldr	r2, [pc, #620]	; (8003d34 <HAL_RCC_OscConfig+0x624>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e12b      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	4b98      	ldr	r3, [pc, #608]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x3aa>
 8003ad8:	e013      	b.n	8003b02 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7ff faed 	bl	80030b8 <HAL_GetTick>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae2:	e009      	b.n	8003af8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7ff fae8 	bl	80030b8 <HAL_GetTick>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	4a91      	ldr	r2, [pc, #580]	; (8003d34 <HAL_RCC_OscConfig+0x624>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e116      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af8:	4b8d      	ldr	r3, [pc, #564]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	2202      	movs	r2, #2
 8003afe:	4013      	ands	r3, r2
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b02:	231f      	movs	r3, #31
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0c:	4b88      	ldr	r3, [pc, #544]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	4b87      	ldr	r3, [pc, #540]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b12:	4989      	ldr	r1, [pc, #548]	; (8003d38 <HAL_RCC_OscConfig+0x628>)
 8003b14:	400a      	ands	r2, r1
 8003b16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d063      	beq.n	8003bea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d12a      	bne.n	8003b80 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b2a:	4b81      	ldr	r3, [pc, #516]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2e:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b30:	2104      	movs	r1, #4
 8003b32:	430a      	orrs	r2, r1
 8003b34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003b36:	4b7e      	ldr	r3, [pc, #504]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3a:	4b7d      	ldr	r3, [pc, #500]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7ff fab9 	bl	80030b8 <HAL_GetTick>
 8003b46:	0003      	movs	r3, r0
 8003b48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b4c:	f7ff fab4 	bl	80030b8 <HAL_GetTick>
 8003b50:	0002      	movs	r2, r0
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0e3      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b5e:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	2202      	movs	r2, #2
 8003b64:	4013      	ands	r3, r2
 8003b66:	d0f1      	beq.n	8003b4c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b68:	4b71      	ldr	r3, [pc, #452]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	22f8      	movs	r2, #248	; 0xf8
 8003b6e:	4393      	bics	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	00da      	lsls	r2, r3, #3
 8003b78:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b7e:	e034      	b.n	8003bea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	3305      	adds	r3, #5
 8003b86:	d111      	bne.n	8003bac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003b88:	4b69      	ldr	r3, [pc, #420]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8c:	4b68      	ldr	r3, [pc, #416]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b8e:	2104      	movs	r1, #4
 8003b90:	438a      	bics	r2, r1
 8003b92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b94:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	22f8      	movs	r2, #248	; 0xf8
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	00da      	lsls	r2, r3, #3
 8003ba4:	4b62      	ldr	r3, [pc, #392]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8003baa:	e01e      	b.n	8003bea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bac:	4b60      	ldr	r3, [pc, #384]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb0:	4b5f      	ldr	r3, [pc, #380]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003bb2:	2104      	movs	r1, #4
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003bb8:	4b5d      	ldr	r3, [pc, #372]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbc:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	438a      	bics	r2, r1
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc4:	f7ff fa78 	bl	80030b8 <HAL_GetTick>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003bce:	f7ff fa73 	bl	80030b8 <HAL_GetTick>
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0a2      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be4:	2202      	movs	r2, #2
 8003be6:	4013      	ands	r3, r2
 8003be8:	d1f1      	bne.n	8003bce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d100      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4e4>
 8003bf2:	e097      	b.n	8003d24 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf4:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	220c      	movs	r2, #12
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d100      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4f2>
 8003c00:	e06b      	b.n	8003cda <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d14c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	4b48      	ldr	r3, [pc, #288]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c10:	494a      	ldr	r1, [pc, #296]	; (8003d3c <HAL_RCC_OscConfig+0x62c>)
 8003c12:	400a      	ands	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7ff fa4f 	bl	80030b8 <HAL_GetTick>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c20:	f7ff fa4a 	bl	80030b8 <HAL_GetTick>
 8003c24:	0002      	movs	r2, r0
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e079      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	049b      	lsls	r3, r3, #18
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3e:	4b3c      	ldr	r3, [pc, #240]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	220f      	movs	r2, #15
 8003c44:	4393      	bics	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4a3a      	ldr	r2, [pc, #232]	; (8003d40 <HAL_RCC_OscConfig+0x630>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	431a      	orrs	r2, r3
 8003c66:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c72:	2180      	movs	r1, #128	; 0x80
 8003c74:	0449      	lsls	r1, r1, #17
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7ff fa1d 	bl	80030b8 <HAL_GetTick>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c84:	f7ff fa18 	bl	80030b8 <HAL_GetTick>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e047      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	049b      	lsls	r3, r3, #18
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x574>
 8003ca2:	e03f      	b.n	8003d24 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca4:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003caa:	4924      	ldr	r1, [pc, #144]	; (8003d3c <HAL_RCC_OscConfig+0x62c>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7ff fa02 	bl	80030b8 <HAL_GetTick>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cba:	f7ff f9fd 	bl	80030b8 <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e02c      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ccc:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	049b      	lsls	r3, r3, #18
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x5aa>
 8003cd8:	e024      	b.n	8003d24 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e01f      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	025b      	lsls	r3, r3, #9
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d10e      	bne.n	8003d20 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	220f      	movs	r2, #15
 8003d06:	401a      	ands	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	23f0      	movs	r3, #240	; 0xf0
 8003d14:	039b      	lsls	r3, r3, #14
 8003d16:	401a      	ands	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b008      	add	sp, #32
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	40021000 	.word	0x40021000
 8003d34:	00001388 	.word	0x00001388
 8003d38:	efffffff 	.word	0xefffffff
 8003d3c:	feffffff 	.word	0xfeffffff
 8003d40:	ffc2ffff 	.word	0xffc2ffff

08003d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0b3      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <HAL_RCC_ClockConfig+0x184>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4013      	ands	r3, r2
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d911      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b58      	ldr	r3, [pc, #352]	; (8003ec8 <HAL_RCC_ClockConfig+0x184>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4393      	bics	r3, r2
 8003d6e:	0019      	movs	r1, r3
 8003d70:	4b55      	ldr	r3, [pc, #340]	; (8003ec8 <HAL_RCC_ClockConfig+0x184>)
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d78:	4b53      	ldr	r3, [pc, #332]	; (8003ec8 <HAL_RCC_ClockConfig+0x184>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	4013      	ands	r3, r2
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e09a      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	4013      	ands	r3, r2
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2204      	movs	r2, #4
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d006      	beq.n	8003dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003da4:	21e0      	movs	r1, #224	; 0xe0
 8003da6:	00c9      	lsls	r1, r1, #3
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b47      	ldr	r3, [pc, #284]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	22f0      	movs	r2, #240	; 0xf0
 8003db2:	4393      	bics	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	4b44      	ldr	r3, [pc, #272]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d040      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b3e      	ldr	r3, [pc, #248]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	029b      	lsls	r3, r3, #10
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d114      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e06e      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	049b      	lsls	r3, r3, #18
 8003df2:	4013      	ands	r3, r2
 8003df4:	d108      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e062      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	4013      	ands	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e05b      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4393      	bics	r3, r2
 8003e10:	0019      	movs	r1, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e1c:	f7ff f94c 	bl	80030b8 <HAL_GetTick>
 8003e20:	0003      	movs	r3, r0
 8003e22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e24:	e009      	b.n	8003e3a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e26:	f7ff f947 	bl	80030b8 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <HAL_RCC_ClockConfig+0x18c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e042      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	220c      	movs	r2, #12
 8003e40:	401a      	ands	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d1ec      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_RCC_ClockConfig+0x184>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d211      	bcs.n	8003e7e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_RCC_ClockConfig+0x184>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4393      	bics	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_RCC_ClockConfig+0x184>)
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <HAL_RCC_ClockConfig+0x184>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2201      	movs	r2, #1
 8003e72:	4013      	ands	r3, r2
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d001      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e020      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2204      	movs	r2, #4
 8003e84:	4013      	ands	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <HAL_RCC_ClockConfig+0x190>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e9c:	f000 f820 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003ea0:	0001      	movs	r1, r0
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCC_ClockConfig+0x188>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	4013      	ands	r3, r2
 8003eac:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <HAL_RCC_ClockConfig+0x194>)
 8003eae:	5cd3      	ldrb	r3, [r2, r3]
 8003eb0:	000a      	movs	r2, r1
 8003eb2:	40da      	lsrs	r2, r3
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCC_ClockConfig+0x198>)
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f7ff f8b7 	bl	800302c <HAL_InitTick>
  
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40022000 	.word	0x40022000
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	00001388 	.word	0x00001388
 8003ed4:	fffff8ff 	.word	0xfffff8ff
 8003ed8:	08006bf8 	.word	0x08006bf8
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	220c      	movs	r2, #12
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x36>
 8003f0e:	e02c      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f12:	613b      	str	r3, [r7, #16]
      break;
 8003f14:	e02c      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0c9b      	lsrs	r3, r3, #18
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f20:	5cd3      	ldrb	r3, [r2, r3]
 8003f22:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003f24:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	220f      	movs	r2, #15
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	025b      	lsls	r3, r3, #9
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	4810      	ldr	r0, [pc, #64]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f40:	f7fc f8e2 	bl	8000108 <__udivsi3>
 8003f44:	0003      	movs	r3, r0
 8003f46:	001a      	movs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4353      	muls	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e009      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	000a      	movs	r2, r1
 8003f54:	0152      	lsls	r2, r2, #5
 8003f56:	1a52      	subs	r2, r2, r1
 8003f58:	0193      	lsls	r3, r2, #6
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	185b      	adds	r3, r3, r1
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	613b      	str	r3, [r7, #16]
      break;
 8003f68:	e002      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f6c:	613b      	str	r3, [r7, #16]
      break;
 8003f6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f70:	693b      	ldr	r3, [r7, #16]
}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b006      	add	sp, #24
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	007a1200 	.word	0x007a1200
 8003f84:	08006c10 	.word	0x08006c10
 8003f88:	08006c20 	.word	0x08006c20

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	20000004 	.word	0x20000004

08003fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003fa4:	f7ff fff2 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fa8:	0001      	movs	r1, r0
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fb6:	5cd3      	ldrb	r3, [r2, r3]
 8003fb8:	40d9      	lsrs	r1, r3
 8003fba:	000b      	movs	r3, r1
}    
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	08006c08 	.word	0x08006c08

08003fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	025b      	lsls	r3, r3, #9
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d100      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003fe8:	e08e      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	2017      	movs	r0, #23
 8003fec:	183b      	adds	r3, r7, r0
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff2:	4b5f      	ldr	r3, [pc, #380]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	055b      	lsls	r3, r3, #21
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d110      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	4b5c      	ldr	r3, [pc, #368]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004000:	69da      	ldr	r2, [r3, #28]
 8004002:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	0549      	lsls	r1, r1, #21
 8004008:	430a      	orrs	r2, r1
 800400a:	61da      	str	r2, [r3, #28]
 800400c:	4b58      	ldr	r3, [pc, #352]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	055b      	lsls	r3, r3, #21
 8004014:	4013      	ands	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401a:	183b      	adds	r3, r7, r0
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	4b54      	ldr	r3, [pc, #336]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4013      	ands	r3, r2
 800402a:	d11a      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402c:	4b51      	ldr	r3, [pc, #324]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	0049      	lsls	r1, r1, #1
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7ff f83d 	bl	80030b8 <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7ff f838 	bl	80030b8 <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e087      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4013      	ands	r3, r2
 8004060:	d0f0      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004062:	4b43      	ldr	r3, [pc, #268]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	23c0      	movs	r3, #192	; 0xc0
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d034      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	23c0      	movs	r3, #192	; 0xc0
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4013      	ands	r3, r2
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	429a      	cmp	r2, r3
 8004082:	d02c      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004084:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800408a:	4013      	ands	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800408e:	4b38      	ldr	r3, [pc, #224]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	0249      	lsls	r1, r1, #9
 8004098:	430a      	orrs	r2, r1
 800409a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800409c:	4b34      	ldr	r3, [pc, #208]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	4b33      	ldr	r3, [pc, #204]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040a2:	4936      	ldr	r1, [pc, #216]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040a8:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	4013      	ands	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe ffff 	bl	80030b8 <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	e009      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe fffa 	bl	80030b8 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e048      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	4b26      	ldr	r3, [pc, #152]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2202      	movs	r2, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040ee:	430a      	orrs	r2, r1
 80040f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040f2:	2317      	movs	r3, #23
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d105      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fc:	4b1c      	ldr	r3, [pc, #112]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004102:	4920      	ldr	r1, [pc, #128]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004104:	400a      	ands	r2, r1
 8004106:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2201      	movs	r2, #1
 800410e:	4013      	ands	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	2203      	movs	r2, #3
 8004118:	4393      	bics	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004122:	430a      	orrs	r2, r1
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2220      	movs	r2, #32
 800412c:	4013      	ands	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	2210      	movs	r2, #16
 8004136:	4393      	bics	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004140:	430a      	orrs	r2, r1
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4013      	ands	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	2240      	movs	r2, #64	; 0x40
 8004156:	4393      	bics	r3, r2
 8004158:	0019      	movs	r1, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004160:	430a      	orrs	r2, r1
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b006      	add	sp, #24
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	40021000 	.word	0x40021000
 8004174:	40007000 	.word	0x40007000
 8004178:	fffffcff 	.word	0xfffffcff
 800417c:	fffeffff 	.word	0xfffeffff
 8004180:	00001388 	.word	0x00001388
 8004184:	efffffff 	.word	0xefffffff

08004188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e042      	b.n	8004220 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223d      	movs	r2, #61	; 0x3d
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	223c      	movs	r2, #60	; 0x3c
 80041aa:	2100      	movs	r1, #0
 80041ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7fe fd1d 	bl	8002bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	223d      	movs	r2, #61	; 0x3d
 80041ba:	2102      	movs	r1, #2
 80041bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	0019      	movs	r1, r3
 80041c8:	0010      	movs	r0, r2
 80041ca:	f000 fee3 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2246      	movs	r2, #70	; 0x46
 80041d2:	2101      	movs	r1, #1
 80041d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	223e      	movs	r2, #62	; 0x3e
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	223f      	movs	r2, #63	; 0x3f
 80041e2:	2101      	movs	r1, #1
 80041e4:	5499      	strb	r1, [r3, r2]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2240      	movs	r2, #64	; 0x40
 80041ea:	2101      	movs	r1, #1
 80041ec:	5499      	strb	r1, [r3, r2]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2241      	movs	r2, #65	; 0x41
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2242      	movs	r2, #66	; 0x42
 80041fa:	2101      	movs	r1, #1
 80041fc:	5499      	strb	r1, [r3, r2]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2243      	movs	r2, #67	; 0x43
 8004202:	2101      	movs	r1, #1
 8004204:	5499      	strb	r1, [r3, r2]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2244      	movs	r2, #68	; 0x44
 800420a:	2101      	movs	r1, #1
 800420c:	5499      	strb	r1, [r3, r2]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2245      	movs	r2, #69	; 0x45
 8004212:	2101      	movs	r1, #1
 8004214:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	223d      	movs	r2, #61	; 0x3d
 800421a:	2101      	movs	r1, #1
 800421c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	223d      	movs	r2, #61	; 0x3d
 8004234:	5c9b      	ldrb	r3, [r3, r2]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d001      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e03b      	b.n	80042b8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	223d      	movs	r2, #61	; 0x3d
 8004244:	2102      	movs	r1, #2
 8004246:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2101      	movs	r1, #1
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <HAL_TIM_Base_Start_IT+0x98>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00f      	beq.n	8004282 <HAL_TIM_Base_Start_IT+0x5a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	05db      	lsls	r3, r3, #23
 800426a:	429a      	cmp	r2, r3
 800426c:	d009      	beq.n	8004282 <HAL_TIM_Base_Start_IT+0x5a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_TIM_Base_Start_IT+0x5a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2207      	movs	r2, #7
 800428a:	4013      	ands	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b06      	cmp	r3, #6
 8004292:	d010      	beq.n	80042b6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2101      	movs	r1, #1
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	e007      	b.n	80042b6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2101      	movs	r1, #1
 80042b2:	430a      	orrs	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b004      	add	sp, #16
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40014000 	.word	0x40014000

080042cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2101      	movs	r1, #1
 80042e0:	438a      	bics	r2, r1
 80042e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <HAL_TIM_Base_Stop_IT+0x54>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	d10d      	bne.n	800430c <HAL_TIM_Base_Stop_IT+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	4a0b      	ldr	r2, [pc, #44]	; (8004324 <HAL_TIM_Base_Stop_IT+0x58>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	d107      	bne.n	800430c <HAL_TIM_Base_Stop_IT+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	438a      	bics	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	223d      	movs	r2, #61	; 0x3d
 8004310:	2101      	movs	r1, #1
 8004312:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b002      	add	sp, #8
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	00001111 	.word	0x00001111
 8004324:	00000444 	.word	0x00000444

08004328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e042      	b.n	80043c0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223d      	movs	r2, #61	; 0x3d
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d107      	bne.n	8004356 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	223c      	movs	r2, #60	; 0x3c
 800434a:	2100      	movs	r1, #0
 800434c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 f839 	bl	80043c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	223d      	movs	r2, #61	; 0x3d
 800435a:	2102      	movs	r1, #2
 800435c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3304      	adds	r3, #4
 8004366:	0019      	movs	r1, r3
 8004368:	0010      	movs	r0, r2
 800436a:	f000 fe13 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2246      	movs	r2, #70	; 0x46
 8004372:	2101      	movs	r1, #1
 8004374:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	223e      	movs	r2, #62	; 0x3e
 800437a:	2101      	movs	r1, #1
 800437c:	5499      	strb	r1, [r3, r2]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	223f      	movs	r2, #63	; 0x3f
 8004382:	2101      	movs	r1, #1
 8004384:	5499      	strb	r1, [r3, r2]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2240      	movs	r2, #64	; 0x40
 800438a:	2101      	movs	r1, #1
 800438c:	5499      	strb	r1, [r3, r2]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2241      	movs	r2, #65	; 0x41
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2242      	movs	r2, #66	; 0x42
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2243      	movs	r2, #67	; 0x43
 80043a2:	2101      	movs	r1, #1
 80043a4:	5499      	strb	r1, [r3, r2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2244      	movs	r2, #68	; 0x44
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2245      	movs	r2, #69	; 0x45
 80043b2:	2101      	movs	r1, #1
 80043b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	223d      	movs	r2, #61	; 0x3d
 80043ba:	2101      	movs	r1, #1
 80043bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <HAL_TIM_PWM_Start+0x22>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	223e      	movs	r2, #62	; 0x3e
 80043ec:	5c9b      	ldrb	r3, [r3, r2]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	1e5a      	subs	r2, r3, #1
 80043f4:	4193      	sbcs	r3, r2
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	e01f      	b.n	800443a <HAL_TIM_PWM_Start+0x62>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d108      	bne.n	8004412 <HAL_TIM_PWM_Start+0x3a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	223f      	movs	r2, #63	; 0x3f
 8004404:	5c9b      	ldrb	r3, [r3, r2]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	1e5a      	subs	r2, r3, #1
 800440c:	4193      	sbcs	r3, r2
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e013      	b.n	800443a <HAL_TIM_PWM_Start+0x62>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d108      	bne.n	800442a <HAL_TIM_PWM_Start+0x52>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2240      	movs	r2, #64	; 0x40
 800441c:	5c9b      	ldrb	r3, [r3, r2]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	1e5a      	subs	r2, r3, #1
 8004424:	4193      	sbcs	r3, r2
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e007      	b.n	800443a <HAL_TIM_PWM_Start+0x62>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2241      	movs	r2, #65	; 0x41
 800442e:	5c9b      	ldrb	r3, [r3, r2]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	4193      	sbcs	r3, r2
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e074      	b.n	800452c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0x7a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	223e      	movs	r2, #62	; 0x3e
 800444c:	2102      	movs	r1, #2
 800444e:	5499      	strb	r1, [r3, r2]
 8004450:	e013      	b.n	800447a <HAL_TIM_PWM_Start+0xa2>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x8a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	223f      	movs	r2, #63	; 0x3f
 800445c:	2102      	movs	r1, #2
 800445e:	5499      	strb	r1, [r3, r2]
 8004460:	e00b      	b.n	800447a <HAL_TIM_PWM_Start+0xa2>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0x9a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2240      	movs	r2, #64	; 0x40
 800446c:	2102      	movs	r1, #2
 800446e:	5499      	strb	r1, [r3, r2]
 8004470:	e003      	b.n	800447a <HAL_TIM_PWM_Start+0xa2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2241      	movs	r2, #65	; 0x41
 8004476:	2102      	movs	r1, #2
 8004478:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6839      	ldr	r1, [r7, #0]
 8004480:	2201      	movs	r2, #1
 8004482:	0018      	movs	r0, r3
 8004484:	f001 f9ce 	bl	8005824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a29      	ldr	r2, [pc, #164]	; (8004534 <HAL_TIM_PWM_Start+0x15c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_PWM_Start+0xd8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a28      	ldr	r2, [pc, #160]	; (8004538 <HAL_TIM_PWM_Start+0x160>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_PWM_Start+0xd8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a26      	ldr	r2, [pc, #152]	; (800453c <HAL_TIM_PWM_Start+0x164>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_PWM_Start+0xd8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a25      	ldr	r2, [pc, #148]	; (8004540 <HAL_TIM_PWM_Start+0x168>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_TIM_PWM_Start+0xdc>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_TIM_PWM_Start+0xde>
 80044b4:	2300      	movs	r3, #0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	0209      	lsls	r1, r1, #8
 80044c8:	430a      	orrs	r2, r1
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_TIM_PWM_Start+0x15c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x11e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	05db      	lsls	r3, r3, #23
 80044de:	429a      	cmp	r2, r3
 80044e0:	d009      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x11e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_TIM_PWM_Start+0x16c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x11e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HAL_TIM_PWM_Start+0x160>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d111      	bne.n	800451a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2207      	movs	r2, #7
 80044fe:	4013      	ands	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d010      	beq.n	800452a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2101      	movs	r1, #1
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004518:	e007      	b.n	800452a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2101      	movs	r1, #1
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b004      	add	sp, #16
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800
 8004544:	40000400 	.word	0x40000400

08004548 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	2200      	movs	r2, #0
 800455a:	0018      	movs	r0, r3
 800455c:	f001 f962 	bl	8005824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2f      	ldr	r2, [pc, #188]	; (8004624 <HAL_TIM_PWM_Stop+0xdc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_PWM_Stop+0x40>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2e      	ldr	r2, [pc, #184]	; (8004628 <HAL_TIM_PWM_Stop+0xe0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_PWM_Stop+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a2c      	ldr	r2, [pc, #176]	; (800462c <HAL_TIM_PWM_Stop+0xe4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_PWM_Stop+0x40>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a2b      	ldr	r2, [pc, #172]	; (8004630 <HAL_TIM_PWM_Stop+0xe8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_TIM_PWM_Stop+0x44>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_TIM_PWM_Stop+0x46>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d013      	beq.n	80045ba <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4a26      	ldr	r2, [pc, #152]	; (8004634 <HAL_TIM_PWM_Stop+0xec>)
 800459a:	4013      	ands	r3, r2
 800459c:	d10d      	bne.n	80045ba <HAL_TIM_PWM_Stop+0x72>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4a24      	ldr	r2, [pc, #144]	; (8004638 <HAL_TIM_PWM_Stop+0xf0>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	d107      	bne.n	80045ba <HAL_TIM_PWM_Stop+0x72>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4921      	ldr	r1, [pc, #132]	; (800463c <HAL_TIM_PWM_Stop+0xf4>)
 80045b6:	400a      	ands	r2, r1
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <HAL_TIM_PWM_Stop+0xec>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	d10d      	bne.n	80045e2 <HAL_TIM_PWM_Stop+0x9a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4a1a      	ldr	r2, [pc, #104]	; (8004638 <HAL_TIM_PWM_Stop+0xf0>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_PWM_Stop+0x9a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2101      	movs	r1, #1
 80045de:	438a      	bics	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Stop+0xaa>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	223e      	movs	r2, #62	; 0x3e
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]
 80045f0:	e013      	b.n	800461a <HAL_TIM_PWM_Stop+0xd2>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Stop+0xba>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	223f      	movs	r2, #63	; 0x3f
 80045fc:	2101      	movs	r1, #1
 80045fe:	5499      	strb	r1, [r3, r2]
 8004600:	e00b      	b.n	800461a <HAL_TIM_PWM_Stop+0xd2>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Stop+0xca>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	2101      	movs	r1, #1
 800460e:	5499      	strb	r1, [r3, r2]
 8004610:	e003      	b.n	800461a <HAL_TIM_PWM_Stop+0xd2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2241      	movs	r2, #65	; 0x41
 8004616:	2101      	movs	r1, #1
 8004618:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800
 8004634:	00001111 	.word	0x00001111
 8004638:	00000444 	.word	0x00000444
 800463c:	ffff7fff 	.word	0xffff7fff

08004640 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e042      	b.n	80046d8 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	223d      	movs	r2, #61	; 0x3d
 8004656:	5c9b      	ldrb	r3, [r3, r2]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d107      	bne.n	800466e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	223c      	movs	r2, #60	; 0x3c
 8004662:	2100      	movs	r1, #0
 8004664:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0018      	movs	r0, r3
 800466a:	f000 f839 	bl	80046e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	223d      	movs	r2, #61	; 0x3d
 8004672:	2102      	movs	r1, #2
 8004674:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	0019      	movs	r1, r3
 8004680:	0010      	movs	r0, r2
 8004682:	f000 fc87 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2246      	movs	r2, #70	; 0x46
 800468a:	2101      	movs	r1, #1
 800468c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	223e      	movs	r2, #62	; 0x3e
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	223f      	movs	r2, #63	; 0x3f
 800469a:	2101      	movs	r1, #1
 800469c:	5499      	strb	r1, [r3, r2]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2240      	movs	r2, #64	; 0x40
 80046a2:	2101      	movs	r1, #1
 80046a4:	5499      	strb	r1, [r3, r2]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2241      	movs	r2, #65	; 0x41
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2242      	movs	r2, #66	; 0x42
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2243      	movs	r2, #67	; 0x43
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2244      	movs	r2, #68	; 0x44
 80046c2:	2101      	movs	r1, #1
 80046c4:	5499      	strb	r1, [r3, r2]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2245      	movs	r2, #69	; 0x45
 80046ca:	2101      	movs	r1, #1
 80046cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	223d      	movs	r2, #61	; 0x3d
 80046d2:	2101      	movs	r1, #1
 80046d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	230f      	movs	r3, #15
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <HAL_TIM_IC_Start_IT+0x22>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	223e      	movs	r2, #62	; 0x3e
 800470c:	5c9b      	ldrb	r3, [r3, r2]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	e013      	b.n	800473a <HAL_TIM_IC_Start_IT+0x4a>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d104      	bne.n	8004722 <HAL_TIM_IC_Start_IT+0x32>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	223f      	movs	r2, #63	; 0x3f
 800471c:	5c9b      	ldrb	r3, [r3, r2]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	e00b      	b.n	800473a <HAL_TIM_IC_Start_IT+0x4a>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d104      	bne.n	8004732 <HAL_TIM_IC_Start_IT+0x42>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2240      	movs	r2, #64	; 0x40
 800472c:	5c9b      	ldrb	r3, [r3, r2]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e003      	b.n	800473a <HAL_TIM_IC_Start_IT+0x4a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2241      	movs	r2, #65	; 0x41
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	220e      	movs	r2, #14
 800473c:	18ba      	adds	r2, r7, r2
 800473e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <HAL_TIM_IC_Start_IT+0x60>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2242      	movs	r2, #66	; 0x42
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e013      	b.n	8004778 <HAL_TIM_IC_Start_IT+0x88>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b04      	cmp	r3, #4
 8004754:	d104      	bne.n	8004760 <HAL_TIM_IC_Start_IT+0x70>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2243      	movs	r2, #67	; 0x43
 800475a:	5c9b      	ldrb	r3, [r3, r2]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e00b      	b.n	8004778 <HAL_TIM_IC_Start_IT+0x88>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b08      	cmp	r3, #8
 8004764:	d104      	bne.n	8004770 <HAL_TIM_IC_Start_IT+0x80>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2244      	movs	r2, #68	; 0x44
 800476a:	5c9b      	ldrb	r3, [r3, r2]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e003      	b.n	8004778 <HAL_TIM_IC_Start_IT+0x88>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2245      	movs	r2, #69	; 0x45
 8004774:	5c9b      	ldrb	r3, [r3, r2]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	210d      	movs	r1, #13
 800477a:	187a      	adds	r2, r7, r1
 800477c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800477e:	230e      	movs	r3, #14
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d103      	bne.n	8004790 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004788:	187b      	adds	r3, r7, r1
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d001      	beq.n	8004794 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0b1      	b.n	80048f8 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <HAL_TIM_IC_Start_IT+0xb4>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	223e      	movs	r2, #62	; 0x3e
 800479e:	2102      	movs	r1, #2
 80047a0:	5499      	strb	r1, [r3, r2]
 80047a2:	e013      	b.n	80047cc <HAL_TIM_IC_Start_IT+0xdc>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d104      	bne.n	80047b4 <HAL_TIM_IC_Start_IT+0xc4>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	223f      	movs	r2, #63	; 0x3f
 80047ae:	2102      	movs	r1, #2
 80047b0:	5499      	strb	r1, [r3, r2]
 80047b2:	e00b      	b.n	80047cc <HAL_TIM_IC_Start_IT+0xdc>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d104      	bne.n	80047c4 <HAL_TIM_IC_Start_IT+0xd4>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2240      	movs	r2, #64	; 0x40
 80047be:	2102      	movs	r1, #2
 80047c0:	5499      	strb	r1, [r3, r2]
 80047c2:	e003      	b.n	80047cc <HAL_TIM_IC_Start_IT+0xdc>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2241      	movs	r2, #65	; 0x41
 80047c8:	2102      	movs	r1, #2
 80047ca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_TIM_IC_Start_IT+0xec>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2242      	movs	r2, #66	; 0x42
 80047d6:	2102      	movs	r1, #2
 80047d8:	5499      	strb	r1, [r3, r2]
 80047da:	e013      	b.n	8004804 <HAL_TIM_IC_Start_IT+0x114>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d104      	bne.n	80047ec <HAL_TIM_IC_Start_IT+0xfc>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2243      	movs	r2, #67	; 0x43
 80047e6:	2102      	movs	r1, #2
 80047e8:	5499      	strb	r1, [r3, r2]
 80047ea:	e00b      	b.n	8004804 <HAL_TIM_IC_Start_IT+0x114>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d104      	bne.n	80047fc <HAL_TIM_IC_Start_IT+0x10c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2244      	movs	r2, #68	; 0x44
 80047f6:	2102      	movs	r1, #2
 80047f8:	5499      	strb	r1, [r3, r2]
 80047fa:	e003      	b.n	8004804 <HAL_TIM_IC_Start_IT+0x114>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2245      	movs	r2, #69	; 0x45
 8004800:	2102      	movs	r1, #2
 8004802:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b0c      	cmp	r3, #12
 8004808:	d02a      	beq.n	8004860 <HAL_TIM_IC_Start_IT+0x170>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d830      	bhi.n	8004872 <HAL_TIM_IC_Start_IT+0x182>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b08      	cmp	r3, #8
 8004814:	d01b      	beq.n	800484e <HAL_TIM_IC_Start_IT+0x15e>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d82a      	bhi.n	8004872 <HAL_TIM_IC_Start_IT+0x182>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IC_Start_IT+0x13a>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d009      	beq.n	800483c <HAL_TIM_IC_Start_IT+0x14c>
 8004828:	e023      	b.n	8004872 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2102      	movs	r1, #2
 8004836:	430a      	orrs	r2, r1
 8004838:	60da      	str	r2, [r3, #12]
      break;
 800483a:	e01f      	b.n	800487c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2104      	movs	r1, #4
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]
      break;
 800484c:	e016      	b.n	800487c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2108      	movs	r1, #8
 800485a:	430a      	orrs	r2, r1
 800485c:	60da      	str	r2, [r3, #12]
      break;
 800485e:	e00d      	b.n	800487c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2110      	movs	r1, #16
 800486c:	430a      	orrs	r2, r1
 800486e:	60da      	str	r2, [r3, #12]
      break;
 8004870:	e004      	b.n	800487c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8004872:	230f      	movs	r3, #15
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
      break;
 800487a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800487c:	230f      	movs	r3, #15
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d135      	bne.n	80048f2 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	0018      	movs	r0, r3
 8004890:	f000 ffc8 	bl	8005824 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a19      	ldr	r2, [pc, #100]	; (8004900 <HAL_TIM_IC_Start_IT+0x210>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00f      	beq.n	80048be <HAL_TIM_IC_Start_IT+0x1ce>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	05db      	lsls	r3, r3, #23
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d009      	beq.n	80048be <HAL_TIM_IC_Start_IT+0x1ce>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <HAL_TIM_IC_Start_IT+0x214>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_TIM_IC_Start_IT+0x1ce>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a13      	ldr	r2, [pc, #76]	; (8004908 <HAL_TIM_IC_Start_IT+0x218>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d111      	bne.n	80048e2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2207      	movs	r2, #7
 80048c6:	4013      	ands	r3, r2
 80048c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d010      	beq.n	80048f2 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2101      	movs	r1, #1
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	e007      	b.n	80048f2 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2101      	movs	r1, #1
 80048ee:	430a      	orrs	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80048f2:	230f      	movs	r3, #15
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	781b      	ldrb	r3, [r3, #0]
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b004      	add	sp, #16
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40000400 	.word	0x40000400
 8004908:	40014000 	.word	0x40014000

0800490c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2202      	movs	r2, #2
 8004928:	4013      	ands	r3, r2
 800492a:	d021      	beq.n	8004970 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2202      	movs	r2, #2
 8004930:	4013      	ands	r3, r2
 8004932:	d01d      	beq.n	8004970 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2203      	movs	r2, #3
 800493a:	4252      	negs	r2, r2
 800493c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2203      	movs	r2, #3
 800494c:	4013      	ands	r3, r2
 800494e:	d004      	beq.n	800495a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	0018      	movs	r0, r3
 8004954:	f7fe f8e4 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 8004958:	e007      	b.n	800496a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0018      	movs	r0, r3
 800495e:	f000 fb01 	bl	8004f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f000 fb05 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2204      	movs	r2, #4
 8004974:	4013      	ands	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2204      	movs	r2, #4
 800497c:	4013      	ands	r3, r2
 800497e:	d01e      	beq.n	80049be <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2205      	movs	r2, #5
 8004986:	4252      	negs	r2, r2
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	23c0      	movs	r3, #192	; 0xc0
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4013      	ands	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fe f8bd 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 80049a6:	e007      	b.n	80049b8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 fada 	bl	8004f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 fade 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2208      	movs	r2, #8
 80049c2:	4013      	ands	r3, r2
 80049c4:	d021      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2208      	movs	r2, #8
 80049ca:	4013      	ands	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2209      	movs	r2, #9
 80049d4:	4252      	negs	r2, r2
 80049d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2204      	movs	r2, #4
 80049dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	2203      	movs	r2, #3
 80049e6:	4013      	ands	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fe f897 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 80049f2:	e007      	b.n	8004a04 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 fab4 	bl	8004f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0018      	movs	r0, r3
 8004a00:	f000 fab8 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d022      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2210      	movs	r2, #16
 8004a16:	4013      	ands	r3, r2
 8004a18:	d01e      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2211      	movs	r2, #17
 8004a20:	4252      	negs	r2, r2
 8004a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2208      	movs	r2, #8
 8004a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	23c0      	movs	r3, #192	; 0xc0
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4013      	ands	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7fe f870 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 8004a40:	e007      	b.n	8004a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f000 fa8d 	bl	8004f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 fa91 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d00c      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	4013      	ands	r3, r2
 8004a66:	d008      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	4252      	negs	r2, r2
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7fe f805 	bl	8002a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00c      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2280      	movs	r2, #128	; 0x80
 8004a86:	4013      	ands	r3, r2
 8004a88:	d008      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2281      	movs	r2, #129	; 0x81
 8004a90:	4252      	negs	r2, r2
 8004a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 ffac 	bl	80059f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2240      	movs	r2, #64	; 0x40
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d00c      	beq.n	8004abe <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2240      	movs	r2, #64	; 0x40
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d008      	beq.n	8004abe <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2241      	movs	r2, #65	; 0x41
 8004ab2:	4252      	negs	r2, r2
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 fa63 	bl	8004f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	4013      	ands	r3, r2
 8004acc:	d008      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2221      	movs	r2, #33	; 0x21
 8004ad4:	4252      	negs	r2, r2
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f000 ff82 	bl	80059e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b004      	add	sp, #16
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2317      	movs	r3, #23
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	223c      	movs	r2, #60	; 0x3c
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_IC_ConfigChannel+0x22>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e08c      	b.n	8004c24 <HAL_TIM_IC_ConfigChannel+0x13c>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	223c      	movs	r2, #60	; 0x3c
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f000 fcbe 	bl	80054a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	210c      	movs	r1, #12
 8004b38:	438a      	bics	r2, r1
 8004b3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6999      	ldr	r1, [r3, #24]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	619a      	str	r2, [r3, #24]
 8004b4e:	e062      	b.n	8004c16 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d11c      	bne.n	8004b90 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f000 fd29 	bl	80055bc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	492d      	ldr	r1, [pc, #180]	; (8004c2c <HAL_TIM_IC_ConfigChannel+0x144>)
 8004b76:	400a      	ands	r2, r1
 8004b78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6999      	ldr	r1, [r3, #24]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	619a      	str	r2, [r3, #24]
 8004b8e:	e042      	b.n	8004c16 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11b      	bne.n	8004bce <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f000 fd7d 	bl	80056a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	210c      	movs	r1, #12
 8004bb6:	438a      	bics	r2, r1
 8004bb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	61da      	str	r2, [r3, #28]
 8004bcc:	e023      	b.n	8004c16 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d11c      	bne.n	8004c0e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f000 fd9e 	bl	8005724 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	490e      	ldr	r1, [pc, #56]	; (8004c2c <HAL_TIM_IC_ConfigChannel+0x144>)
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69d9      	ldr	r1, [r3, #28]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	61da      	str	r2, [r3, #28]
 8004c0c:	e003      	b.n	8004c16 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004c0e:	2317      	movs	r3, #23
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	2201      	movs	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	223c      	movs	r2, #60	; 0x3c
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	5499      	strb	r1, [r3, r2]

  return status;
 8004c1e:	2317      	movs	r3, #23
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	781b      	ldrb	r3, [r3, #0]
}
 8004c24:	0018      	movs	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b006      	add	sp, #24
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	fffff3ff 	.word	0xfffff3ff

08004c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2317      	movs	r3, #23
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	223c      	movs	r2, #60	; 0x3c
 8004c48:	5c9b      	ldrb	r3, [r3, r2]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e0ad      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	223c      	movs	r2, #60	; 0x3c
 8004c56:	2101      	movs	r1, #1
 8004c58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d100      	bne.n	8004c62 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004c60:	e076      	b.n	8004d50 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b0c      	cmp	r3, #12
 8004c66:	d900      	bls.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004c68:	e095      	b.n	8004d96 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d04e      	beq.n	8004d0e <HAL_TIM_PWM_ConfigChannel+0xde>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d900      	bls.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004c76:	e08e      	b.n	8004d96 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d021      	beq.n	8004cc8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004c84:	e087      	b.n	8004d96 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	0011      	movs	r1, r2
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f000 fa0e 	bl	80050b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2108      	movs	r1, #8
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2104      	movs	r1, #4
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6999      	ldr	r1, [r3, #24]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	619a      	str	r2, [r3, #24]
      break;
 8004cc6:	e06b      	b.n	8004da0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	0011      	movs	r1, r2
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 fa75 	bl	80051c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2180      	movs	r1, #128	; 0x80
 8004ce2:	0109      	lsls	r1, r1, #4
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4931      	ldr	r1, [pc, #196]	; (8004db8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004cf4:	400a      	ands	r2, r1
 8004cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6999      	ldr	r1, [r3, #24]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	021a      	lsls	r2, r3, #8
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	619a      	str	r2, [r3, #24]
      break;
 8004d0c:	e048      	b.n	8004da0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	0011      	movs	r1, r2
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 fad6 	bl	80052c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2108      	movs	r1, #8
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2104      	movs	r1, #4
 8004d38:	438a      	bics	r2, r1
 8004d3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69d9      	ldr	r1, [r3, #28]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	61da      	str	r2, [r3, #28]
      break;
 8004d4e:	e027      	b.n	8004da0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	0011      	movs	r1, r2
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f000 fb3b 	bl	80053d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2180      	movs	r1, #128	; 0x80
 8004d6a:	0109      	lsls	r1, r1, #4
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	490f      	ldr	r1, [pc, #60]	; (8004db8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004d7c:	400a      	ands	r2, r1
 8004d7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69d9      	ldr	r1, [r3, #28]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	021a      	lsls	r2, r3, #8
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	61da      	str	r2, [r3, #28]
      break;
 8004d94:	e004      	b.n	8004da0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004d96:	2317      	movs	r3, #23
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
      break;
 8004d9e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	223c      	movs	r2, #60	; 0x3c
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]

  return status;
 8004da8:	2317      	movs	r3, #23
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	781b      	ldrb	r3, [r3, #0]
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b006      	add	sp, #24
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	fffffbff 	.word	0xfffffbff

08004dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	230f      	movs	r3, #15
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	223c      	movs	r2, #60	; 0x3c
 8004dd2:	5c9b      	ldrb	r3, [r3, r2]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIM_ConfigClockSource+0x20>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e0bc      	b.n	8004f56 <HAL_TIM_ConfigClockSource+0x19a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	223c      	movs	r2, #60	; 0x3c
 8004de0:	2101      	movs	r1, #1
 8004de2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	223d      	movs	r2, #61	; 0x3d
 8004de8:	2102      	movs	r1, #2
 8004dea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2277      	movs	r2, #119	; 0x77
 8004df8:	4393      	bics	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a58      	ldr	r2, [pc, #352]	; (8004f60 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2280      	movs	r2, #128	; 0x80
 8004e12:	0192      	lsls	r2, r2, #6
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d040      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0xde>
 8004e18:	2280      	movs	r2, #128	; 0x80
 8004e1a:	0192      	lsls	r2, r2, #6
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d900      	bls.n	8004e22 <HAL_TIM_ConfigClockSource+0x66>
 8004e20:	e088      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
 8004e22:	2280      	movs	r2, #128	; 0x80
 8004e24:	0152      	lsls	r2, r2, #5
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d100      	bne.n	8004e2c <HAL_TIM_ConfigClockSource+0x70>
 8004e2a:	e088      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x182>
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	0152      	lsls	r2, r2, #5
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d900      	bls.n	8004e36 <HAL_TIM_ConfigClockSource+0x7a>
 8004e34:	e07e      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
 8004e36:	2b70      	cmp	r3, #112	; 0x70
 8004e38:	d018      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xb0>
 8004e3a:	d900      	bls.n	8004e3e <HAL_TIM_ConfigClockSource+0x82>
 8004e3c:	e07a      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
 8004e3e:	2b60      	cmp	r3, #96	; 0x60
 8004e40:	d04f      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x126>
 8004e42:	d900      	bls.n	8004e46 <HAL_TIM_ConfigClockSource+0x8a>
 8004e44:	e076      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
 8004e46:	2b50      	cmp	r3, #80	; 0x50
 8004e48:	d03b      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x106>
 8004e4a:	d900      	bls.n	8004e4e <HAL_TIM_ConfigClockSource+0x92>
 8004e4c:	e072      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d057      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x146>
 8004e52:	d900      	bls.n	8004e56 <HAL_TIM_ConfigClockSource+0x9a>
 8004e54:	e06e      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
 8004e56:	2b30      	cmp	r3, #48	; 0x30
 8004e58:	d063      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x166>
 8004e5a:	d86b      	bhi.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d060      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x166>
 8004e60:	d868      	bhi.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d05d      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x166>
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d05b      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x166>
 8004e6a:	e063      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f000 fcb2 	bl	80057e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2277      	movs	r2, #119	; 0x77
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	609a      	str	r2, [r3, #8]
      break;
 8004e98:	e052      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6899      	ldr	r1, [r3, #8]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f000 fc9b 	bl	80057e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	01c9      	lsls	r1, r1, #7
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
      break;
 8004ec0:	e03e      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	001a      	movs	r2, r3
 8004ed0:	f000 fb46 	bl	8005560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2150      	movs	r1, #80	; 0x50
 8004eda:	0018      	movs	r0, r3
 8004edc:	f000 fc68 	bl	80057b0 <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e02e      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	001a      	movs	r2, r3
 8004ef0:	f000 fba6 	bl	8005640 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2160      	movs	r1, #96	; 0x60
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 fc58 	bl	80057b0 <TIM_ITRx_SetConfig>
      break;
 8004f00:	e01e      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	001a      	movs	r2, r3
 8004f10:	f000 fb26 	bl	8005560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2140      	movs	r1, #64	; 0x40
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 fc48 	bl	80057b0 <TIM_ITRx_SetConfig>
      break;
 8004f20:	e00e      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	0010      	movs	r0, r2
 8004f2e:	f000 fc3f 	bl	80057b0 <TIM_ITRx_SetConfig>
      break;
 8004f32:	e005      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004f34:	230f      	movs	r3, #15
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]
      break;
 8004f3c:	e000      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004f3e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	223d      	movs	r2, #61	; 0x3d
 8004f44:	2101      	movs	r1, #1
 8004f46:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	223c      	movs	r2, #60	; 0x3c
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	5499      	strb	r1, [r3, r2]

  return status;
 8004f50:	230f      	movs	r3, #15
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	781b      	ldrb	r3, [r3, #0]
}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	ffff00ff 	.word	0xffff00ff

08004f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b002      	add	sp, #8
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3b      	ldr	r2, [pc, #236]	; (8005094 <TIM_Base_SetConfig+0x100>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d008      	beq.n	8004fbe <TIM_Base_SetConfig+0x2a>
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	05db      	lsls	r3, r3, #23
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d003      	beq.n	8004fbe <TIM_Base_SetConfig+0x2a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a37      	ldr	r2, [pc, #220]	; (8005098 <TIM_Base_SetConfig+0x104>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2270      	movs	r2, #112	; 0x70
 8004fc2:	4393      	bics	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a30      	ldr	r2, [pc, #192]	; (8005094 <TIM_Base_SetConfig+0x100>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d018      	beq.n	800500a <TIM_Base_SetConfig+0x76>
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	05db      	lsls	r3, r3, #23
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d013      	beq.n	800500a <TIM_Base_SetConfig+0x76>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	; (8005098 <TIM_Base_SetConfig+0x104>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00f      	beq.n	800500a <TIM_Base_SetConfig+0x76>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2b      	ldr	r2, [pc, #172]	; (800509c <TIM_Base_SetConfig+0x108>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00b      	beq.n	800500a <TIM_Base_SetConfig+0x76>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <TIM_Base_SetConfig+0x10c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_Base_SetConfig+0x76>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <TIM_Base_SetConfig+0x110>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_Base_SetConfig+0x76>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d108      	bne.n	800501c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <TIM_Base_SetConfig+0x118>)
 800500e:	4013      	ands	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	4393      	bics	r3, r2
 8005022:	001a      	movs	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a13      	ldr	r2, [pc, #76]	; (8005094 <TIM_Base_SetConfig+0x100>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_Base_SetConfig+0xce>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <TIM_Base_SetConfig+0x10c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_Base_SetConfig+0xce>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <TIM_Base_SetConfig+0x110>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_Base_SetConfig+0xce>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d103      	bne.n	800506a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2201      	movs	r2, #1
 8005076:	4013      	ands	r3, r2
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2201      	movs	r2, #1
 8005082:	4393      	bics	r3, r2
 8005084:	001a      	movs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]
  }
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b004      	add	sp, #16
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40000400 	.word	0x40000400
 800509c:	40002000 	.word	0x40002000
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800
 80050ac:	fffffcff 	.word	0xfffffcff

080050b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	2201      	movs	r2, #1
 80050c6:	4393      	bics	r3, r2
 80050c8:	001a      	movs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2270      	movs	r2, #112	; 0x70
 80050de:	4393      	bics	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2203      	movs	r2, #3
 80050e6:	4393      	bics	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2202      	movs	r2, #2
 80050f8:	4393      	bics	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <TIM_OC1_SetConfig+0xf8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_OC1_SetConfig+0x76>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a26      	ldr	r2, [pc, #152]	; (80051ac <TIM_OC1_SetConfig+0xfc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_OC1_SetConfig+0x76>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <TIM_OC1_SetConfig+0x100>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_OC1_SetConfig+0x76>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a24      	ldr	r2, [pc, #144]	; (80051b4 <TIM_OC1_SetConfig+0x104>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10c      	bne.n	8005140 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2208      	movs	r2, #8
 800512a:	4393      	bics	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2204      	movs	r2, #4
 800513c:	4393      	bics	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a19      	ldr	r2, [pc, #100]	; (80051a8 <TIM_OC1_SetConfig+0xf8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00b      	beq.n	8005160 <TIM_OC1_SetConfig+0xb0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <TIM_OC1_SetConfig+0xfc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_OC1_SetConfig+0xb0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <TIM_OC1_SetConfig+0x100>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC1_SetConfig+0xb0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <TIM_OC1_SetConfig+0x104>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d111      	bne.n	8005184 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <TIM_OC1_SetConfig+0x108>)
 8005164:	4013      	ands	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4a14      	ldr	r2, [pc, #80]	; (80051bc <TIM_OC1_SetConfig+0x10c>)
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b006      	add	sp, #24
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40014400 	.word	0x40014400
 80051b4:	40014800 	.word	0x40014800
 80051b8:	fffffeff 	.word	0xfffffeff
 80051bc:	fffffdff 	.word	0xfffffdff

080051c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	2210      	movs	r2, #16
 80051d6:	4393      	bics	r3, r2
 80051d8:	001a      	movs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a2e      	ldr	r2, [pc, #184]	; (80052a8 <TIM_OC2_SetConfig+0xe8>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	; (80052ac <TIM_OC2_SetConfig+0xec>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2220      	movs	r2, #32
 800520a:	4393      	bics	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <TIM_OC2_SetConfig+0xf0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10d      	bne.n	800523e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2280      	movs	r2, #128	; 0x80
 8005226:	4393      	bics	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2240      	movs	r2, #64	; 0x40
 800523a:	4393      	bics	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <TIM_OC2_SetConfig+0xf0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_OC2_SetConfig+0x9e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1a      	ldr	r2, [pc, #104]	; (80052b4 <TIM_OC2_SetConfig+0xf4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_OC2_SetConfig+0x9e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <TIM_OC2_SetConfig+0xf8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_OC2_SetConfig+0x9e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a18      	ldr	r2, [pc, #96]	; (80052bc <TIM_OC2_SetConfig+0xfc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d113      	bne.n	8005286 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <TIM_OC2_SetConfig+0x100>)
 8005262:	4013      	ands	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <TIM_OC2_SetConfig+0x104>)
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b006      	add	sp, #24
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	ffff8fff 	.word	0xffff8fff
 80052ac:	fffffcff 	.word	0xfffffcff
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800
 80052c0:	fffffbff 	.word	0xfffffbff
 80052c4:	fffff7ff 	.word	0xfffff7ff

080052c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	4a33      	ldr	r2, [pc, #204]	; (80053ac <TIM_OC3_SetConfig+0xe4>)
 80052de:	401a      	ands	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2270      	movs	r2, #112	; 0x70
 80052f4:	4393      	bics	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2203      	movs	r2, #3
 80052fc:	4393      	bics	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4a28      	ldr	r2, [pc, #160]	; (80053b0 <TIM_OC3_SetConfig+0xe8>)
 800530e:	4013      	ands	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <TIM_OC3_SetConfig+0xec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10d      	bne.n	8005342 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <TIM_OC3_SetConfig+0xf0>)
 800532a:	4013      	ands	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <TIM_OC3_SetConfig+0xf4>)
 800533e:	4013      	ands	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a1b      	ldr	r2, [pc, #108]	; (80053b4 <TIM_OC3_SetConfig+0xec>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00b      	beq.n	8005362 <TIM_OC3_SetConfig+0x9a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a1c      	ldr	r2, [pc, #112]	; (80053c0 <TIM_OC3_SetConfig+0xf8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d007      	beq.n	8005362 <TIM_OC3_SetConfig+0x9a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a1b      	ldr	r2, [pc, #108]	; (80053c4 <TIM_OC3_SetConfig+0xfc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d003      	beq.n	8005362 <TIM_OC3_SetConfig+0x9a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1a      	ldr	r2, [pc, #104]	; (80053c8 <TIM_OC3_SetConfig+0x100>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d113      	bne.n	800538a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4a19      	ldr	r2, [pc, #100]	; (80053cc <TIM_OC3_SetConfig+0x104>)
 8005366:	4013      	ands	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4a18      	ldr	r2, [pc, #96]	; (80053d0 <TIM_OC3_SetConfig+0x108>)
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	621a      	str	r2, [r3, #32]
}
 80053a4:	46c0      	nop			; (mov r8, r8)
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b006      	add	sp, #24
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	fffffeff 	.word	0xfffffeff
 80053b0:	fffffdff 	.word	0xfffffdff
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	fffff7ff 	.word	0xfffff7ff
 80053bc:	fffffbff 	.word	0xfffffbff
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800
 80053cc:	ffffefff 	.word	0xffffefff
 80053d0:	ffffdfff 	.word	0xffffdfff

080053d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	4a26      	ldr	r2, [pc, #152]	; (8005484 <TIM_OC4_SetConfig+0xb0>)
 80053ea:	401a      	ands	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4a22      	ldr	r2, [pc, #136]	; (8005488 <TIM_OC4_SetConfig+0xb4>)
 8005400:	4013      	ands	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a21      	ldr	r2, [pc, #132]	; (800548c <TIM_OC4_SetConfig+0xb8>)
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <TIM_OC4_SetConfig+0xbc>)
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	031b      	lsls	r3, r3, #12
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a19      	ldr	r2, [pc, #100]	; (8005494 <TIM_OC4_SetConfig+0xc0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00b      	beq.n	800544c <TIM_OC4_SetConfig+0x78>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a18      	ldr	r2, [pc, #96]	; (8005498 <TIM_OC4_SetConfig+0xc4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_OC4_SetConfig+0x78>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a17      	ldr	r2, [pc, #92]	; (800549c <TIM_OC4_SetConfig+0xc8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_OC4_SetConfig+0x78>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <TIM_OC4_SetConfig+0xcc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d109      	bne.n	8005460 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <TIM_OC4_SetConfig+0xd0>)
 8005450:	4013      	ands	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	46bd      	mov	sp, r7
 800547e:	b006      	add	sp, #24
 8005480:	bd80      	pop	{r7, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	ffffefff 	.word	0xffffefff
 8005488:	ffff8fff 	.word	0xffff8fff
 800548c:	fffffcff 	.word	0xfffffcff
 8005490:	ffffdfff 	.word	0xffffdfff
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800
 80054a4:	ffffbfff 	.word	0xffffbfff

080054a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	2201      	movs	r2, #1
 80054c2:	4393      	bics	r3, r2
 80054c4:	001a      	movs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a20      	ldr	r2, [pc, #128]	; (8005554 <TIM_TI1_SetConfig+0xac>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00c      	beq.n	80054f2 <TIM_TI1_SetConfig+0x4a>
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	05db      	lsls	r3, r3, #23
 80054de:	429a      	cmp	r2, r3
 80054e0:	d007      	beq.n	80054f2 <TIM_TI1_SetConfig+0x4a>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <TIM_TI1_SetConfig+0xb0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_TI1_SetConfig+0x4a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a1b      	ldr	r2, [pc, #108]	; (800555c <TIM_TI1_SetConfig+0xb4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d101      	bne.n	80054f6 <TIM_TI1_SetConfig+0x4e>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <TIM_TI1_SetConfig+0x50>
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2203      	movs	r2, #3
 8005500:	4393      	bics	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e003      	b.n	8005516 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2201      	movs	r2, #1
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	22f0      	movs	r2, #240	; 0xf0
 800551a:	4393      	bics	r3, r2
 800551c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	22ff      	movs	r2, #255	; 0xff
 8005524:	4013      	ands	r3, r2
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	220a      	movs	r2, #10
 8005530:	4393      	bics	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	220a      	movs	r2, #10
 8005538:	4013      	ands	r3, r2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	b006      	add	sp, #24
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40000400 	.word	0x40000400
 800555c:	40014000 	.word	0x40014000

08005560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	2201      	movs	r2, #1
 8005578:	4393      	bics	r3, r2
 800557a:	001a      	movs	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	22f0      	movs	r2, #240	; 0xf0
 800558a:	4393      	bics	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	220a      	movs	r2, #10
 800559c:	4393      	bics	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	46c0      	nop			; (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b006      	add	sp, #24
 80055ba:	bd80      	pop	{r7, pc}

080055bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	2210      	movs	r2, #16
 80055d6:	4393      	bics	r3, r2
 80055d8:	001a      	movs	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4a14      	ldr	r2, [pc, #80]	; (8005638 <TIM_TI2_SetConfig+0x7c>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	4a10      	ldr	r2, [pc, #64]	; (800563c <TIM_TI2_SetConfig+0x80>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	031b      	lsls	r3, r3, #12
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	22a0      	movs	r2, #160	; 0xa0
 8005610:	4393      	bics	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	22a0      	movs	r2, #160	; 0xa0
 800561a:	4013      	ands	r3, r2
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	46bd      	mov	sp, r7
 8005632:	b006      	add	sp, #24
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	fffffcff 	.word	0xfffffcff
 800563c:	ffff0fff 	.word	0xffff0fff

08005640 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	2210      	movs	r2, #16
 8005658:	4393      	bics	r3, r2
 800565a:	001a      	movs	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <TIM_TI2_ConfigInputStage+0x60>)
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	22a0      	movs	r2, #160	; 0xa0
 800567c:	4393      	bics	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b006      	add	sp, #24
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	ffff0fff 	.word	0xffff0fff

080056a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	4a17      	ldr	r2, [pc, #92]	; (800571c <TIM_TI3_SetConfig+0x78>)
 80056be:	401a      	ands	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2203      	movs	r2, #3
 80056ce:	4393      	bics	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	22f0      	movs	r2, #240	; 0xf0
 80056de:	4393      	bics	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	22ff      	movs	r2, #255	; 0xff
 80056e8:	4013      	ands	r3, r2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4a0b      	ldr	r2, [pc, #44]	; (8005720 <TIM_TI3_SetConfig+0x7c>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	021a      	lsls	r2, r3, #8
 80056fc:	23a0      	movs	r3, #160	; 0xa0
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	4013      	ands	r3, r2
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	621a      	str	r2, [r3, #32]
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b006      	add	sp, #24
 800571a:	bd80      	pop	{r7, pc}
 800571c:	fffffeff 	.word	0xfffffeff
 8005720:	fffff5ff 	.word	0xfffff5ff

08005724 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <TIM_TI4_SetConfig+0x7c>)
 800573e:	401a      	ands	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4a15      	ldr	r2, [pc, #84]	; (80057a4 <TIM_TI4_SetConfig+0x80>)
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <TIM_TI4_SetConfig+0x84>)
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	031b      	lsls	r3, r3, #12
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <TIM_TI4_SetConfig+0x88>)
 8005776:	4013      	ands	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	031a      	lsls	r2, r3, #12
 800577e:	23a0      	movs	r3, #160	; 0xa0
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	4013      	ands	r3, r2
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b006      	add	sp, #24
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	ffffefff 	.word	0xffffefff
 80057a4:	fffffcff 	.word	0xfffffcff
 80057a8:	ffff0fff 	.word	0xffff0fff
 80057ac:	ffff5fff 	.word	0xffff5fff

080057b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2270      	movs	r2, #112	; 0x70
 80057c4:	4393      	bics	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	2207      	movs	r2, #7
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	609a      	str	r2, [r3, #8]
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	4a09      	ldr	r2, [pc, #36]	; (8005820 <TIM_ETR_SetConfig+0x3c>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	021a      	lsls	r2, r3, #8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	431a      	orrs	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4313      	orrs	r3, r2
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	46c0      	nop			; (mov r8, r8)
 800581a:	46bd      	mov	sp, r7
 800581c:	b006      	add	sp, #24
 800581e:	bd80      	pop	{r7, pc}
 8005820:	ffff00ff 	.word	0xffff00ff

08005824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	221f      	movs	r2, #31
 8005834:	4013      	ands	r3, r2
 8005836:	2201      	movs	r2, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	0013      	movs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	43d2      	mvns	r2, r2
 8005846:	401a      	ands	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	211f      	movs	r1, #31
 8005854:	400b      	ands	r3, r1
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4099      	lsls	r1, r3
 800585a:	000b      	movs	r3, r1
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	46bd      	mov	sp, r7
 8005866:	b006      	add	sp, #24
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	223c      	movs	r2, #60	; 0x3c
 800587a:	5c9b      	ldrb	r3, [r3, r2]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e047      	b.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	223c      	movs	r2, #60	; 0x3c
 8005888:	2101      	movs	r1, #1
 800588a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	223d      	movs	r2, #61	; 0x3d
 8005890:	2102      	movs	r1, #2
 8005892:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2270      	movs	r2, #112	; 0x70
 80058a8:	4393      	bics	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	05db      	lsls	r3, r3, #23
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d009      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a10      	ldr	r2, [pc, #64]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10c      	bne.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	4393      	bics	r3, r2
 80058ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	223d      	movs	r2, #61	; 0x3d
 8005906:	2101      	movs	r1, #1
 8005908:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	223c      	movs	r2, #60	; 0x3c
 800590e:	2100      	movs	r1, #0
 8005910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	0018      	movs	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	b004      	add	sp, #16
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40000400 	.word	0x40000400
 8005924:	40014000 	.word	0x40014000

08005928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	223c      	movs	r2, #60	; 0x3c
 800593a:	5c9b      	ldrb	r3, [r3, r2]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005940:	2302      	movs	r3, #2
 8005942:	e03e      	b.n	80059c2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	223c      	movs	r2, #60	; 0x3c
 8005948:	2101      	movs	r1, #1
 800594a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	22ff      	movs	r2, #255	; 0xff
 8005950:	4393      	bics	r3, r2
 8005952:	001a      	movs	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005960:	401a      	ands	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800596e:	401a      	ands	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800597c:	401a      	ands	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800598a:	401a      	ands	r2, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a11      	ldr	r2, [pc, #68]	; (80059dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005998:	401a      	ands	r2, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a0e      	ldr	r2, [pc, #56]	; (80059e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80059a6:	401a      	ands	r2, r3
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	223c      	movs	r2, #60	; 0x3c
 80059bc:	2100      	movs	r1, #0
 80059be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	0018      	movs	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b004      	add	sp, #16
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	fffffcff 	.word	0xfffffcff
 80059d0:	fffffbff 	.word	0xfffffbff
 80059d4:	fffff7ff 	.word	0xfffff7ff
 80059d8:	ffffefff 	.word	0xffffefff
 80059dc:	ffffdfff 	.word	0xffffdfff
 80059e0:	ffffbfff 	.word	0xffffbfff

080059e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b002      	add	sp, #8
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e044      	b.n	8005aa0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d107      	bne.n	8005a2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2278      	movs	r2, #120	; 0x78
 8005a22:	2100      	movs	r1, #0
 8005a24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7fd fa1d 	bl	8002e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2224      	movs	r2, #36	; 0x24
 8005a32:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2101      	movs	r1, #1
 8005a40:	438a      	bics	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f000 fcd8 	bl	8006404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 fb94 	bl	8006184 <UART_SetConfig>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e01c      	b.n	8005aa0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	490d      	ldr	r1, [pc, #52]	; (8005aa8 <HAL_UART_Init+0xa4>)
 8005a72:	400a      	ands	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	212a      	movs	r1, #42	; 0x2a
 8005a82:	438a      	bics	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2101      	movs	r1, #1
 8005a92:	430a      	orrs	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f000 fd67 	bl	800656c <UART_CheckIdleState>
 8005a9e:	0003      	movs	r3, r0
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	ffffb7ff 	.word	0xffffb7ff

08005aac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	1dbb      	adds	r3, r7, #6
 8005ab8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d15b      	bne.n	8005b7a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_UART_Transmit_IT+0x24>
 8005ac8:	1dbb      	adds	r3, r7, #6
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e053      	b.n	8005b7c <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	015b      	lsls	r3, r3, #5
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d109      	bne.n	8005af4 <HAL_UART_Transmit_IT+0x48>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2201      	movs	r2, #1
 8005aec:	4013      	ands	r3, r2
 8005aee:	d001      	beq.n	8005af4 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e043      	b.n	8005b7c <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1dba      	adds	r2, r7, #6
 8005afe:	2150      	movs	r1, #80	; 0x50
 8005b00:	8812      	ldrh	r2, [r2, #0]
 8005b02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	1dba      	adds	r2, r7, #6
 8005b08:	2152      	movs	r1, #82	; 0x52
 8005b0a:	8812      	ldrh	r2, [r2, #0]
 8005b0c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2284      	movs	r2, #132	; 0x84
 8005b18:	2100      	movs	r1, #0
 8005b1a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2221      	movs	r2, #33	; 0x21
 8005b20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	015b      	lsls	r3, r3, #5
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d107      	bne.n	8005b3e <HAL_UART_Transmit_IT+0x92>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <HAL_UART_Transmit_IT+0xd8>)
 8005b3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b3c:	e002      	b.n	8005b44 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a11      	ldr	r2, [pc, #68]	; (8005b88 <HAL_UART_Transmit_IT+0xdc>)
 8005b42:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b44:	f3ef 8310 	mrs	r3, PRIMASK
 8005b48:	613b      	str	r3, [r7, #16]
  return(result);
 8005b4a:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	2301      	movs	r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			; (mov r8, r8)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	430a      	orrs	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f383 8810 	msr	PRIMASK, r3
}
 8005b74:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b008      	add	sp, #32
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	08006947 	.word	0x08006947
 8005b88:	08006893 	.word	0x08006893

08005b8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b0ab      	sub	sp, #172	; 0xac
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	22a4      	movs	r2, #164	; 0xa4
 8005b9c:	18b9      	adds	r1, r7, r2
 8005b9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	20a0      	movs	r0, #160	; 0xa0
 8005ba8:	1839      	adds	r1, r7, r0
 8005baa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	219c      	movs	r1, #156	; 0x9c
 8005bb4:	1879      	adds	r1, r7, r1
 8005bb6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bb8:	0011      	movs	r1, r2
 8005bba:	18bb      	adds	r3, r7, r2
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a99      	ldr	r2, [pc, #612]	; (8005e24 <HAL_UART_IRQHandler+0x298>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2298      	movs	r2, #152	; 0x98
 8005bc4:	18bc      	adds	r4, r7, r2
 8005bc6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005bc8:	18bb      	adds	r3, r7, r2
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d114      	bne.n	8005bfa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bd0:	187b      	adds	r3, r7, r1
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d00f      	beq.n	8005bfa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bda:	183b      	adds	r3, r7, r0
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2220      	movs	r2, #32
 8005be0:	4013      	ands	r3, r2
 8005be2:	d00a      	beq.n	8005bfa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d100      	bne.n	8005bee <HAL_UART_IRQHandler+0x62>
 8005bec:	e29e      	b.n	800612c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	0010      	movs	r0, r2
 8005bf6:	4798      	blx	r3
      }
      return;
 8005bf8:	e298      	b.n	800612c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bfa:	2398      	movs	r3, #152	; 0x98
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d100      	bne.n	8005c06 <HAL_UART_IRQHandler+0x7a>
 8005c04:	e114      	b.n	8005e30 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c06:	239c      	movs	r3, #156	; 0x9c
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d106      	bne.n	8005c20 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c12:	23a0      	movs	r3, #160	; 0xa0
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a83      	ldr	r2, [pc, #524]	; (8005e28 <HAL_UART_IRQHandler+0x29c>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d100      	bne.n	8005c20 <HAL_UART_IRQHandler+0x94>
 8005c1e:	e107      	b.n	8005e30 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c20:	23a4      	movs	r3, #164	; 0xa4
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2201      	movs	r2, #1
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d012      	beq.n	8005c52 <HAL_UART_IRQHandler+0xc6>
 8005c2c:	23a0      	movs	r3, #160	; 0xa0
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4013      	ands	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2284      	movs	r2, #132	; 0x84
 8005c46:	589b      	ldr	r3, [r3, r2]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2184      	movs	r1, #132	; 0x84
 8005c50:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c52:	23a4      	movs	r3, #164	; 0xa4
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d011      	beq.n	8005c82 <HAL_UART_IRQHandler+0xf6>
 8005c5e:	239c      	movs	r3, #156	; 0x9c
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	4013      	ands	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2284      	movs	r2, #132	; 0x84
 8005c76:	589b      	ldr	r3, [r3, r2]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2184      	movs	r1, #132	; 0x84
 8005c80:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c82:	23a4      	movs	r3, #164	; 0xa4
 8005c84:	18fb      	adds	r3, r7, r3
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d011      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x126>
 8005c8e:	239c      	movs	r3, #156	; 0x9c
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2201      	movs	r2, #1
 8005c96:	4013      	ands	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2284      	movs	r2, #132	; 0x84
 8005ca6:	589b      	ldr	r3, [r3, r2]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2184      	movs	r1, #132	; 0x84
 8005cb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cb2:	23a4      	movs	r3, #164	; 0xa4
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d017      	beq.n	8005cee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cbe:	23a0      	movs	r3, #160	; 0xa0
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d105      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cca:	239c      	movs	r3, #156	; 0x9c
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cd4:	d00b      	beq.n	8005cee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2208      	movs	r2, #8
 8005cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2284      	movs	r2, #132	; 0x84
 8005ce2:	589b      	ldr	r3, [r3, r2]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2184      	movs	r1, #132	; 0x84
 8005cec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cee:	23a4      	movs	r3, #164	; 0xa4
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	2380      	movs	r3, #128	; 0x80
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <HAL_UART_IRQHandler+0x198>
 8005cfc:	23a0      	movs	r3, #160	; 0xa0
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	04db      	lsls	r3, r3, #19
 8005d06:	4013      	ands	r3, r2
 8005d08:	d00c      	beq.n	8005d24 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2280      	movs	r2, #128	; 0x80
 8005d10:	0112      	lsls	r2, r2, #4
 8005d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2284      	movs	r2, #132	; 0x84
 8005d18:	589b      	ldr	r3, [r3, r2]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2184      	movs	r1, #132	; 0x84
 8005d22:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2284      	movs	r2, #132	; 0x84
 8005d28:	589b      	ldr	r3, [r3, r2]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d100      	bne.n	8005d30 <HAL_UART_IRQHandler+0x1a4>
 8005d2e:	e1ff      	b.n	8006130 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d30:	23a4      	movs	r3, #164	; 0xa4
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2220      	movs	r2, #32
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d3c:	23a0      	movs	r3, #160	; 0xa0
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2220      	movs	r2, #32
 8005d44:	4013      	ands	r3, r2
 8005d46:	d008      	beq.n	8005d5a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	0010      	movs	r0, r2
 8005d58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2284      	movs	r2, #132	; 0x84
 8005d5e:	589b      	ldr	r3, [r3, r2]
 8005d60:	2194      	movs	r1, #148	; 0x94
 8005d62:	187a      	adds	r2, r7, r1
 8005d64:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2240      	movs	r2, #64	; 0x40
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d004      	beq.n	8005d7e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d74:	187b      	adds	r3, r7, r1
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2228      	movs	r2, #40	; 0x28
 8005d7a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d7c:	d047      	beq.n	8005e0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f000 fd0b 	bl	800679c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2240      	movs	r2, #64	; 0x40
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d137      	bne.n	8005e04 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d94:	f3ef 8310 	mrs	r3, PRIMASK
 8005d98:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9c:	2090      	movs	r0, #144	; 0x90
 8005d9e:	183a      	adds	r2, r7, r0
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	2301      	movs	r3, #1
 8005da4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da8:	f383 8810 	msr	PRIMASK, r3
}
 8005dac:	46c0      	nop			; (mov r8, r8)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2140      	movs	r1, #64	; 0x40
 8005dba:	438a      	bics	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]
 8005dbe:	183b      	adds	r3, r7, r0
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d012      	beq.n	8005dfa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd8:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <HAL_UART_IRQHandler+0x2a0>)
 8005dda:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7fd fa89 	bl	80032f8 <HAL_DMA_Abort_IT>
 8005de6:	1e03      	subs	r3, r0, #0
 8005de8:	d01a      	beq.n	8005e20 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df4:	0018      	movs	r0, r3
 8005df6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	e012      	b.n	8005e20 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f000 f9ad 	bl	800615c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e02:	e00d      	b.n	8005e20 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	0018      	movs	r0, r3
 8005e08:	f000 f9a8 	bl	800615c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	e008      	b.n	8005e20 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0018      	movs	r0, r3
 8005e12:	f000 f9a3 	bl	800615c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2284      	movs	r2, #132	; 0x84
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005e1e:	e187      	b.n	8006130 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e20:	46c0      	nop			; (mov r8, r8)
    return;
 8005e22:	e185      	b.n	8006130 <HAL_UART_IRQHandler+0x5a4>
 8005e24:	0000080f 	.word	0x0000080f
 8005e28:	04000120 	.word	0x04000120
 8005e2c:	08006865 	.word	0x08006865

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d000      	beq.n	8005e3a <HAL_UART_IRQHandler+0x2ae>
 8005e38:	e139      	b.n	80060ae <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e3a:	23a4      	movs	r3, #164	; 0xa4
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2210      	movs	r2, #16
 8005e42:	4013      	ands	r3, r2
 8005e44:	d100      	bne.n	8005e48 <HAL_UART_IRQHandler+0x2bc>
 8005e46:	e132      	b.n	80060ae <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e48:	23a0      	movs	r3, #160	; 0xa0
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2210      	movs	r2, #16
 8005e50:	4013      	ands	r3, r2
 8005e52:	d100      	bne.n	8005e56 <HAL_UART_IRQHandler+0x2ca>
 8005e54:	e12b      	b.n	80060ae <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2240      	movs	r2, #64	; 0x40
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d000      	beq.n	8005e6e <HAL_UART_IRQHandler+0x2e2>
 8005e6c:	e09f      	b.n	8005fae <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	217e      	movs	r1, #126	; 0x7e
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d100      	bne.n	8005e86 <HAL_UART_IRQHandler+0x2fa>
 8005e84:	e156      	b.n	8006134 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2258      	movs	r2, #88	; 0x58
 8005e8a:	5a9b      	ldrh	r3, [r3, r2]
 8005e8c:	187a      	adds	r2, r7, r1
 8005e8e:	8812      	ldrh	r2, [r2, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d300      	bcc.n	8005e96 <HAL_UART_IRQHandler+0x30a>
 8005e94:	e14e      	b.n	8006134 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	187a      	adds	r2, r7, r1
 8005e9a:	215a      	movs	r1, #90	; 0x5a
 8005e9c:	8812      	ldrh	r2, [r2, #0]
 8005e9e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d06f      	beq.n	8005f8a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005eae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	f383 8810 	msr	PRIMASK, r3
}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	499e      	ldr	r1, [pc, #632]	; (8006144 <HAL_UART_IRQHandler+0x5b8>)
 8005ecc:	400a      	ands	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f383 8810 	msr	PRIMASK, r3
}
 8005eda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005edc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee4:	677b      	str	r3, [r7, #116]	; 0x74
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eec:	f383 8810 	msr	PRIMASK, r3
}
 8005ef0:	46c0      	nop			; (mov r8, r8)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2101      	movs	r1, #1
 8005efe:	438a      	bics	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f08:	f383 8810 	msr	PRIMASK, r3
}
 8005f0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f12:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f16:	673b      	str	r3, [r7, #112]	; 0x70
 8005f18:	2301      	movs	r3, #1
 8005f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1e:	f383 8810 	msr	PRIMASK, r3
}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2140      	movs	r1, #64	; 0x40
 8005f30:	438a      	bics	r2, r1
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f36:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3a:	f383 8810 	msr	PRIMASK, r3
}
 8005f3e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	2120      	movs	r1, #32
 8005f46:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f52:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f58:	2301      	movs	r3, #1
 8005f5a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f5e:	f383 8810 	msr	PRIMASK, r3
}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2110      	movs	r1, #16
 8005f70:	438a      	bics	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f76:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f7a:	f383 8810 	msr	PRIMASK, r3
}
 8005f7e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7fd f97f 	bl	8003288 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2258      	movs	r2, #88	; 0x58
 8005f94:	5a9a      	ldrh	r2, [r3, r2]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	215a      	movs	r1, #90	; 0x5a
 8005f9a:	5a5b      	ldrh	r3, [r3, r1]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0011      	movs	r1, r2
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 f8e0 	bl	800616c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fac:	e0c2      	b.n	8006134 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2258      	movs	r2, #88	; 0x58
 8005fb2:	5a99      	ldrh	r1, [r3, r2]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	225a      	movs	r2, #90	; 0x5a
 8005fb8:	5a9b      	ldrh	r3, [r3, r2]
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	208e      	movs	r0, #142	; 0x8e
 8005fbe:	183b      	adds	r3, r7, r0
 8005fc0:	1a8a      	subs	r2, r1, r2
 8005fc2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	225a      	movs	r2, #90	; 0x5a
 8005fc8:	5a9b      	ldrh	r3, [r3, r2]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d100      	bne.n	8005fd2 <HAL_UART_IRQHandler+0x446>
 8005fd0:	e0b2      	b.n	8006138 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005fd2:	183b      	adds	r3, r7, r0
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d100      	bne.n	8005fdc <HAL_UART_IRQHandler+0x450>
 8005fda:	e0ad      	b.n	8006138 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe4:	2488      	movs	r4, #136	; 0x88
 8005fe6:	193a      	adds	r2, r7, r4
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	2301      	movs	r3, #1
 8005fec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f383 8810 	msr	PRIMASK, r3
}
 8005ff4:	46c0      	nop			; (mov r8, r8)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4951      	ldr	r1, [pc, #324]	; (8006148 <HAL_UART_IRQHandler+0x5bc>)
 8006002:	400a      	ands	r2, r1
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	193b      	adds	r3, r7, r4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006014:	f3ef 8310 	mrs	r3, PRIMASK
 8006018:	61bb      	str	r3, [r7, #24]
  return(result);
 800601a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601c:	2484      	movs	r4, #132	; 0x84
 800601e:	193a      	adds	r2, r7, r4
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	2301      	movs	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f383 8810 	msr	PRIMASK, r3
}
 800602c:	46c0      	nop			; (mov r8, r8)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2101      	movs	r1, #1
 800603a:	438a      	bics	r2, r1
 800603c:	609a      	str	r2, [r3, #8]
 800603e:	193b      	adds	r3, r7, r4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	f383 8810 	msr	PRIMASK, r3
}
 800604a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2280      	movs	r2, #128	; 0x80
 8006050:	2120      	movs	r1, #32
 8006052:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006060:	f3ef 8310 	mrs	r3, PRIMASK
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006068:	2480      	movs	r4, #128	; 0x80
 800606a:	193a      	adds	r2, r7, r4
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	2301      	movs	r3, #1
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	f383 8810 	msr	PRIMASK, r3
}
 8006078:	46c0      	nop			; (mov r8, r8)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2110      	movs	r1, #16
 8006086:	438a      	bics	r2, r1
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	193b      	adds	r3, r7, r4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	f383 8810 	msr	PRIMASK, r3
}
 8006096:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800609e:	183b      	adds	r3, r7, r0
 80060a0:	881a      	ldrh	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	0011      	movs	r1, r2
 80060a6:	0018      	movs	r0, r3
 80060a8:	f000 f860 	bl	800616c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060ac:	e044      	b.n	8006138 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060ae:	23a4      	movs	r3, #164	; 0xa4
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	035b      	lsls	r3, r3, #13
 80060b8:	4013      	ands	r3, r2
 80060ba:	d010      	beq.n	80060de <HAL_UART_IRQHandler+0x552>
 80060bc:	239c      	movs	r3, #156	; 0x9c
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	03db      	lsls	r3, r3, #15
 80060c6:	4013      	ands	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2280      	movs	r2, #128	; 0x80
 80060d0:	0352      	lsls	r2, r2, #13
 80060d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	0018      	movs	r0, r3
 80060d8:	f000 fcbe 	bl	8006a58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060dc:	e02f      	b.n	800613e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060de:	23a4      	movs	r3, #164	; 0xa4
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	4013      	ands	r3, r2
 80060e8:	d00f      	beq.n	800610a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060ea:	23a0      	movs	r3, #160	; 0xa0
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2280      	movs	r2, #128	; 0x80
 80060f2:	4013      	ands	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d01e      	beq.n	800613c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	0010      	movs	r0, r2
 8006106:	4798      	blx	r3
    }
    return;
 8006108:	e018      	b.n	800613c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800610a:	23a4      	movs	r3, #164	; 0xa4
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2240      	movs	r2, #64	; 0x40
 8006112:	4013      	ands	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_UART_IRQHandler+0x5b2>
 8006116:	23a0      	movs	r3, #160	; 0xa0
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2240      	movs	r2, #64	; 0x40
 800611e:	4013      	ands	r3, r2
 8006120:	d00d      	beq.n	800613e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 fc6c 	bl	8006a02 <UART_EndTransmit_IT>
    return;
 800612a:	e008      	b.n	800613e <HAL_UART_IRQHandler+0x5b2>
      return;
 800612c:	46c0      	nop			; (mov r8, r8)
 800612e:	e006      	b.n	800613e <HAL_UART_IRQHandler+0x5b2>
    return;
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	e004      	b.n	800613e <HAL_UART_IRQHandler+0x5b2>
      return;
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	e002      	b.n	800613e <HAL_UART_IRQHandler+0x5b2>
      return;
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	e000      	b.n	800613e <HAL_UART_IRQHandler+0x5b2>
    return;
 800613c:	46c0      	nop			; (mov r8, r8)
  }

}
 800613e:	46bd      	mov	sp, r7
 8006140:	b02b      	add	sp, #172	; 0xac
 8006142:	bd90      	pop	{r4, r7, pc}
 8006144:	fffffeff 	.word	0xfffffeff
 8006148:	fffffedf 	.word	0xfffffedf

0800614c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006154:	46c0      	nop			; (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	b002      	add	sp, #8
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006164:	46c0      	nop			; (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	b002      	add	sp, #8
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	000a      	movs	r2, r1
 8006176:	1cbb      	adds	r3, r7, #2
 8006178:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	46bd      	mov	sp, r7
 800617e:	b002      	add	sp, #8
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800618c:	231e      	movs	r3, #30
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2200      	movs	r2, #0
 8006192:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a8d      	ldr	r2, [pc, #564]	; (80063e8 <UART_SetConfig+0x264>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	0019      	movs	r1, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	4a88      	ldr	r2, [pc, #544]	; (80063ec <UART_SetConfig+0x268>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	0019      	movs	r1, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4a7f      	ldr	r2, [pc, #508]	; (80063f0 <UART_SetConfig+0x26c>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	0019      	movs	r1, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a7b      	ldr	r2, [pc, #492]	; (80063f4 <UART_SetConfig+0x270>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d127      	bne.n	800625a <UART_SetConfig+0xd6>
 800620a:	4b7b      	ldr	r3, [pc, #492]	; (80063f8 <UART_SetConfig+0x274>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	2203      	movs	r2, #3
 8006210:	4013      	ands	r3, r2
 8006212:	2b03      	cmp	r3, #3
 8006214:	d00d      	beq.n	8006232 <UART_SetConfig+0xae>
 8006216:	d81b      	bhi.n	8006250 <UART_SetConfig+0xcc>
 8006218:	2b02      	cmp	r3, #2
 800621a:	d014      	beq.n	8006246 <UART_SetConfig+0xc2>
 800621c:	d818      	bhi.n	8006250 <UART_SetConfig+0xcc>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <UART_SetConfig+0xa4>
 8006222:	2b01      	cmp	r3, #1
 8006224:	d00a      	beq.n	800623c <UART_SetConfig+0xb8>
 8006226:	e013      	b.n	8006250 <UART_SetConfig+0xcc>
 8006228:	231f      	movs	r3, #31
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e021      	b.n	8006276 <UART_SetConfig+0xf2>
 8006232:	231f      	movs	r3, #31
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	2202      	movs	r2, #2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e01c      	b.n	8006276 <UART_SetConfig+0xf2>
 800623c:	231f      	movs	r3, #31
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	2204      	movs	r2, #4
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e017      	b.n	8006276 <UART_SetConfig+0xf2>
 8006246:	231f      	movs	r3, #31
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	2208      	movs	r2, #8
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e012      	b.n	8006276 <UART_SetConfig+0xf2>
 8006250:	231f      	movs	r3, #31
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	2210      	movs	r2, #16
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e00d      	b.n	8006276 <UART_SetConfig+0xf2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a67      	ldr	r2, [pc, #412]	; (80063fc <UART_SetConfig+0x278>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d104      	bne.n	800626e <UART_SetConfig+0xea>
 8006264:	231f      	movs	r3, #31
 8006266:	18fb      	adds	r3, r7, r3
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	e003      	b.n	8006276 <UART_SetConfig+0xf2>
 800626e:	231f      	movs	r3, #31
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	2210      	movs	r2, #16
 8006274:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	429a      	cmp	r2, r3
 8006280:	d15c      	bne.n	800633c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8006282:	231f      	movs	r3, #31
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d015      	beq.n	80062b8 <UART_SetConfig+0x134>
 800628c:	dc18      	bgt.n	80062c0 <UART_SetConfig+0x13c>
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00d      	beq.n	80062ae <UART_SetConfig+0x12a>
 8006292:	dc15      	bgt.n	80062c0 <UART_SetConfig+0x13c>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <UART_SetConfig+0x11a>
 8006298:	2b02      	cmp	r3, #2
 800629a:	d005      	beq.n	80062a8 <UART_SetConfig+0x124>
 800629c:	e010      	b.n	80062c0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800629e:	f7fd fe7f 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 80062a2:	0003      	movs	r3, r0
 80062a4:	61bb      	str	r3, [r7, #24]
        break;
 80062a6:	e012      	b.n	80062ce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a8:	4b55      	ldr	r3, [pc, #340]	; (8006400 <UART_SetConfig+0x27c>)
 80062aa:	61bb      	str	r3, [r7, #24]
        break;
 80062ac:	e00f      	b.n	80062ce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fd fe17 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 80062b2:	0003      	movs	r3, r0
 80062b4:	61bb      	str	r3, [r7, #24]
        break;
 80062b6:	e00a      	b.n	80062ce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b8:	2380      	movs	r3, #128	; 0x80
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	61bb      	str	r3, [r7, #24]
        break;
 80062be:	e006      	b.n	80062ce <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062c4:	231e      	movs	r3, #30
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
        break;
 80062cc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d100      	bne.n	80062d6 <UART_SetConfig+0x152>
 80062d4:	e07a      	b.n	80063cc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	005a      	lsls	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	18d2      	adds	r2, r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	0019      	movs	r1, r3
 80062e8:	0010      	movs	r0, r2
 80062ea:	f7f9 ff0d 	bl	8000108 <__udivsi3>
 80062ee:	0003      	movs	r3, r0
 80062f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d91c      	bls.n	8006332 <UART_SetConfig+0x1ae>
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	2380      	movs	r3, #128	; 0x80
 80062fc:	025b      	lsls	r3, r3, #9
 80062fe:	429a      	cmp	r2, r3
 8006300:	d217      	bcs.n	8006332 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	b29a      	uxth	r2, r3
 8006306:	200e      	movs	r0, #14
 8006308:	183b      	adds	r3, r7, r0
 800630a:	210f      	movs	r1, #15
 800630c:	438a      	bics	r2, r1
 800630e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	b29b      	uxth	r3, r3
 8006316:	2207      	movs	r2, #7
 8006318:	4013      	ands	r3, r2
 800631a:	b299      	uxth	r1, r3
 800631c:	183b      	adds	r3, r7, r0
 800631e:	183a      	adds	r2, r7, r0
 8006320:	8812      	ldrh	r2, [r2, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	183a      	adds	r2, r7, r0
 800632c:	8812      	ldrh	r2, [r2, #0]
 800632e:	60da      	str	r2, [r3, #12]
 8006330:	e04c      	b.n	80063cc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8006332:	231e      	movs	r3, #30
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e047      	b.n	80063cc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800633c:	231f      	movs	r3, #31
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b08      	cmp	r3, #8
 8006344:	d015      	beq.n	8006372 <UART_SetConfig+0x1ee>
 8006346:	dc18      	bgt.n	800637a <UART_SetConfig+0x1f6>
 8006348:	2b04      	cmp	r3, #4
 800634a:	d00d      	beq.n	8006368 <UART_SetConfig+0x1e4>
 800634c:	dc15      	bgt.n	800637a <UART_SetConfig+0x1f6>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <UART_SetConfig+0x1d4>
 8006352:	2b02      	cmp	r3, #2
 8006354:	d005      	beq.n	8006362 <UART_SetConfig+0x1de>
 8006356:	e010      	b.n	800637a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006358:	f7fd fe22 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 800635c:	0003      	movs	r3, r0
 800635e:	61bb      	str	r3, [r7, #24]
        break;
 8006360:	e012      	b.n	8006388 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006362:	4b27      	ldr	r3, [pc, #156]	; (8006400 <UART_SetConfig+0x27c>)
 8006364:	61bb      	str	r3, [r7, #24]
        break;
 8006366:	e00f      	b.n	8006388 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006368:	f7fd fdba 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 800636c:	0003      	movs	r3, r0
 800636e:	61bb      	str	r3, [r7, #24]
        break;
 8006370:	e00a      	b.n	8006388 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	61bb      	str	r3, [r7, #24]
        break;
 8006378:	e006      	b.n	8006388 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800637e:	231e      	movs	r3, #30
 8006380:	18fb      	adds	r3, r7, r3
 8006382:	2201      	movs	r2, #1
 8006384:	701a      	strb	r2, [r3, #0]
        break;
 8006386:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01e      	beq.n	80063cc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	085a      	lsrs	r2, r3, #1
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	18d2      	adds	r2, r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	0019      	movs	r1, r3
 800639e:	0010      	movs	r0, r2
 80063a0:	f7f9 feb2 	bl	8000108 <__udivsi3>
 80063a4:	0003      	movs	r3, r0
 80063a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b0f      	cmp	r3, #15
 80063ac:	d90a      	bls.n	80063c4 <UART_SetConfig+0x240>
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	025b      	lsls	r3, r3, #9
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d205      	bcs.n	80063c4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e003      	b.n	80063cc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80063c4:	231e      	movs	r3, #30
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063d8:	231e      	movs	r3, #30
 80063da:	18fb      	adds	r3, r7, r3
 80063dc:	781b      	ldrb	r3, [r3, #0]
}
 80063de:	0018      	movs	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	b008      	add	sp, #32
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	ffff69f3 	.word	0xffff69f3
 80063ec:	ffffcfff 	.word	0xffffcfff
 80063f0:	fffff4ff 	.word	0xfffff4ff
 80063f4:	40013800 	.word	0x40013800
 80063f8:	40021000 	.word	0x40021000
 80063fc:	40004400 	.word	0x40004400
 8006400:	007a1200 	.word	0x007a1200

08006404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	2208      	movs	r2, #8
 8006412:	4013      	ands	r3, r2
 8006414:	d00b      	beq.n	800642e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4a4a      	ldr	r2, [pc, #296]	; (8006548 <UART_AdvFeatureConfig+0x144>)
 800641e:	4013      	ands	r3, r2
 8006420:	0019      	movs	r1, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	2201      	movs	r2, #1
 8006434:	4013      	ands	r3, r2
 8006436:	d00b      	beq.n	8006450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4a43      	ldr	r2, [pc, #268]	; (800654c <UART_AdvFeatureConfig+0x148>)
 8006440:	4013      	ands	r3, r2
 8006442:	0019      	movs	r1, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	2202      	movs	r2, #2
 8006456:	4013      	ands	r3, r2
 8006458:	d00b      	beq.n	8006472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4a3b      	ldr	r2, [pc, #236]	; (8006550 <UART_AdvFeatureConfig+0x14c>)
 8006462:	4013      	ands	r3, r2
 8006464:	0019      	movs	r1, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	2204      	movs	r2, #4
 8006478:	4013      	ands	r3, r2
 800647a:	d00b      	beq.n	8006494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4a34      	ldr	r2, [pc, #208]	; (8006554 <UART_AdvFeatureConfig+0x150>)
 8006484:	4013      	ands	r3, r2
 8006486:	0019      	movs	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	2210      	movs	r2, #16
 800649a:	4013      	ands	r3, r2
 800649c:	d00b      	beq.n	80064b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a2c      	ldr	r2, [pc, #176]	; (8006558 <UART_AdvFeatureConfig+0x154>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	0019      	movs	r1, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2220      	movs	r2, #32
 80064bc:	4013      	ands	r3, r2
 80064be:	d00b      	beq.n	80064d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4a25      	ldr	r2, [pc, #148]	; (800655c <UART_AdvFeatureConfig+0x158>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	0019      	movs	r1, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2240      	movs	r2, #64	; 0x40
 80064de:	4013      	ands	r3, r2
 80064e0:	d01d      	beq.n	800651e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <UART_AdvFeatureConfig+0x15c>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	0019      	movs	r1, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	035b      	lsls	r3, r3, #13
 8006502:	429a      	cmp	r2, r3
 8006504:	d10b      	bne.n	800651e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <UART_AdvFeatureConfig+0x160>)
 800650e:	4013      	ands	r3, r2
 8006510:	0019      	movs	r1, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	2280      	movs	r2, #128	; 0x80
 8006524:	4013      	ands	r3, r2
 8006526:	d00b      	beq.n	8006540 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4a0e      	ldr	r2, [pc, #56]	; (8006568 <UART_AdvFeatureConfig+0x164>)
 8006530:	4013      	ands	r3, r2
 8006532:	0019      	movs	r1, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
  }
}
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	b002      	add	sp, #8
 8006546:	bd80      	pop	{r7, pc}
 8006548:	ffff7fff 	.word	0xffff7fff
 800654c:	fffdffff 	.word	0xfffdffff
 8006550:	fffeffff 	.word	0xfffeffff
 8006554:	fffbffff 	.word	0xfffbffff
 8006558:	ffffefff 	.word	0xffffefff
 800655c:	ffffdfff 	.word	0xffffdfff
 8006560:	ffefffff 	.word	0xffefffff
 8006564:	ff9fffff 	.word	0xff9fffff
 8006568:	fff7ffff 	.word	0xfff7ffff

0800656c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b092      	sub	sp, #72	; 0x48
 8006570:	af02      	add	r7, sp, #8
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2284      	movs	r2, #132	; 0x84
 8006578:	2100      	movs	r1, #0
 800657a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800657c:	f7fc fd9c 	bl	80030b8 <HAL_GetTick>
 8006580:	0003      	movs	r3, r0
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2208      	movs	r2, #8
 800658c:	4013      	ands	r3, r2
 800658e:	2b08      	cmp	r3, #8
 8006590:	d12c      	bne.n	80065ec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006594:	2280      	movs	r2, #128	; 0x80
 8006596:	0391      	lsls	r1, r2, #14
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4a46      	ldr	r2, [pc, #280]	; (80066b4 <UART_CheckIdleState+0x148>)
 800659c:	9200      	str	r2, [sp, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	f000 f88c 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 80065a4:	1e03      	subs	r3, r0, #0
 80065a6:	d021      	beq.n	80065ec <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a8:	f3ef 8310 	mrs	r3, PRIMASK
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065b2:	2301      	movs	r3, #1
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	f383 8810 	msr	PRIMASK, r3
}
 80065bc:	46c0      	nop			; (mov r8, r8)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	438a      	bics	r2, r1
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	f383 8810 	msr	PRIMASK, r3
}
 80065d8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2278      	movs	r2, #120	; 0x78
 80065e4:	2100      	movs	r1, #0
 80065e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e05f      	b.n	80066ac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2204      	movs	r2, #4
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d146      	bne.n	8006688 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fc:	2280      	movs	r2, #128	; 0x80
 80065fe:	03d1      	lsls	r1, r2, #15
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4a2c      	ldr	r2, [pc, #176]	; (80066b4 <UART_CheckIdleState+0x148>)
 8006604:	9200      	str	r2, [sp, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	f000 f858 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 800660c:	1e03      	subs	r3, r0, #0
 800660e:	d03b      	beq.n	8006688 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006610:	f3ef 8310 	mrs	r3, PRIMASK
 8006614:	60fb      	str	r3, [r7, #12]
  return(result);
 8006616:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
 800661a:	2301      	movs	r3, #1
 800661c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f383 8810 	msr	PRIMASK, r3
}
 8006624:	46c0      	nop			; (mov r8, r8)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4921      	ldr	r1, [pc, #132]	; (80066b8 <UART_CheckIdleState+0x14c>)
 8006632:	400a      	ands	r2, r1
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f383 8810 	msr	PRIMASK, r3
}
 8006640:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006642:	f3ef 8310 	mrs	r3, PRIMASK
 8006646:	61bb      	str	r3, [r7, #24]
  return(result);
 8006648:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	633b      	str	r3, [r7, #48]	; 0x30
 800664c:	2301      	movs	r3, #1
 800664e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f383 8810 	msr	PRIMASK, r3
}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2101      	movs	r1, #1
 8006664:	438a      	bics	r2, r1
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	f383 8810 	msr	PRIMASK, r3
}
 8006672:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	2120      	movs	r1, #32
 800667a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2278      	movs	r2, #120	; 0x78
 8006680:	2100      	movs	r1, #0
 8006682:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e011      	b.n	80066ac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2280      	movs	r2, #128	; 0x80
 8006692:	2120      	movs	r1, #32
 8006694:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2278      	movs	r2, #120	; 0x78
 80066a6:	2100      	movs	r1, #0
 80066a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	0018      	movs	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b010      	add	sp, #64	; 0x40
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	01ffffff 	.word	0x01ffffff
 80066b8:	fffffedf 	.word	0xfffffedf

080066bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	1dfb      	adds	r3, r7, #7
 80066ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066cc:	e051      	b.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3301      	adds	r3, #1
 80066d2:	d04e      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d4:	f7fc fcf0 	bl	80030b8 <HAL_GetTick>
 80066d8:	0002      	movs	r2, r0
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e051      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2204      	movs	r2, #4
 80066f6:	4013      	ands	r3, r2
 80066f8:	d03b      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb6>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	d038      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d035      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	2208      	movs	r2, #8
 800670e:	4013      	ands	r3, r2
 8006710:	2b08      	cmp	r3, #8
 8006712:	d111      	bne.n	8006738 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2208      	movs	r2, #8
 800671a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	0018      	movs	r0, r3
 8006720:	f000 f83c 	bl	800679c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2284      	movs	r2, #132	; 0x84
 8006728:	2108      	movs	r1, #8
 800672a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2278      	movs	r2, #120	; 0x78
 8006730:	2100      	movs	r1, #0
 8006732:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e02c      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69da      	ldr	r2, [r3, #28]
 800673e:	2380      	movs	r3, #128	; 0x80
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	401a      	ands	r2, r3
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	429a      	cmp	r2, r3
 800674a:	d112      	bne.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	0112      	lsls	r2, r2, #4
 8006754:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	0018      	movs	r0, r3
 800675a:	f000 f81f 	bl	800679c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2284      	movs	r2, #132	; 0x84
 8006762:	2120      	movs	r1, #32
 8006764:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2278      	movs	r2, #120	; 0x78
 800676a:	2100      	movs	r1, #0
 800676c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e00f      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	4013      	ands	r3, r2
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	425a      	negs	r2, r3
 8006782:	4153      	adcs	r3, r2
 8006784:	b2db      	uxtb	r3, r3
 8006786:	001a      	movs	r2, r3
 8006788:	1dfb      	adds	r3, r7, #7
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d09e      	beq.n	80066ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	0018      	movs	r0, r3
 8006794:	46bd      	mov	sp, r7
 8006796:	b004      	add	sp, #16
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08e      	sub	sp, #56	; 0x38
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067a4:	f3ef 8310 	mrs	r3, PRIMASK
 80067a8:	617b      	str	r3, [r7, #20]
  return(result);
 80067aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
 80067ae:	2301      	movs	r3, #1
 80067b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	f383 8810 	msr	PRIMASK, r3
}
 80067b8:	46c0      	nop			; (mov r8, r8)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4926      	ldr	r1, [pc, #152]	; (8006860 <UART_EndRxTransfer+0xc4>)
 80067c6:	400a      	ands	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	f383 8810 	msr	PRIMASK, r3
}
 80067d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d6:	f3ef 8310 	mrs	r3, PRIMASK
 80067da:	623b      	str	r3, [r7, #32]
  return(result);
 80067dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
 80067e0:	2301      	movs	r3, #1
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	f383 8810 	msr	PRIMASK, r3
}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2101      	movs	r1, #1
 80067f8:	438a      	bics	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	f383 8810 	msr	PRIMASK, r3
}
 8006806:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680c:	2b01      	cmp	r3, #1
 800680e:	d118      	bne.n	8006842 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006810:	f3ef 8310 	mrs	r3, PRIMASK
 8006814:	60bb      	str	r3, [r7, #8]
  return(result);
 8006816:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800681a:	2301      	movs	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f383 8810 	msr	PRIMASK, r3
}
 8006824:	46c0      	nop			; (mov r8, r8)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2110      	movs	r1, #16
 8006832:	438a      	bics	r2, r1
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f383 8810 	msr	PRIMASK, r3
}
 8006840:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2280      	movs	r2, #128	; 0x80
 8006846:	2120      	movs	r1, #32
 8006848:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	46bd      	mov	sp, r7
 800685a:	b00e      	add	sp, #56	; 0x38
 800685c:	bd80      	pop	{r7, pc}
 800685e:	46c0      	nop			; (mov r8, r8)
 8006860:	fffffedf 	.word	0xfffffedf

08006864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	225a      	movs	r2, #90	; 0x5a
 8006876:	2100      	movs	r1, #0
 8006878:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2252      	movs	r2, #82	; 0x52
 800687e:	2100      	movs	r1, #0
 8006880:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	0018      	movs	r0, r3
 8006886:	f7ff fc69 	bl	800615c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	46bd      	mov	sp, r7
 800688e:	b004      	add	sp, #16
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b08a      	sub	sp, #40	; 0x28
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800689e:	2b21      	cmp	r3, #33	; 0x21
 80068a0:	d14d      	bne.n	800693e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2252      	movs	r2, #82	; 0x52
 80068a6:	5a9b      	ldrh	r3, [r3, r2]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d132      	bne.n	8006914 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ae:	f3ef 8310 	mrs	r3, PRIMASK
 80068b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068b4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
 80068b8:	2301      	movs	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f383 8810 	msr	PRIMASK, r3
}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2180      	movs	r1, #128	; 0x80
 80068d0:	438a      	bics	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f383 8810 	msr	PRIMASK, r3
}
 80068de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e0:	f3ef 8310 	mrs	r3, PRIMASK
 80068e4:	617b      	str	r3, [r7, #20]
  return(result);
 80068e6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068e8:	623b      	str	r3, [r7, #32]
 80068ea:	2301      	movs	r3, #1
 80068ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	f383 8810 	msr	PRIMASK, r3
}
 80068f4:	46c0      	nop			; (mov r8, r8)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2140      	movs	r1, #64	; 0x40
 8006902:	430a      	orrs	r2, r1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	f383 8810 	msr	PRIMASK, r3
}
 8006910:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006912:	e014      	b.n	800693e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006918:	781a      	ldrb	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	b292      	uxth	r2, r2
 8006920:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2252      	movs	r2, #82	; 0x52
 8006930:	5a9b      	ldrh	r3, [r3, r2]
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b299      	uxth	r1, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2252      	movs	r2, #82	; 0x52
 800693c:	5299      	strh	r1, [r3, r2]
}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	46bd      	mov	sp, r7
 8006942:	b00a      	add	sp, #40	; 0x28
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b08c      	sub	sp, #48	; 0x30
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006952:	2b21      	cmp	r3, #33	; 0x21
 8006954:	d151      	bne.n	80069fa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2252      	movs	r2, #82	; 0x52
 800695a:	5a9b      	ldrh	r3, [r3, r2]
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d132      	bne.n	80069c8 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006962:	f3ef 8310 	mrs	r3, PRIMASK
 8006966:	60fb      	str	r3, [r7, #12]
  return(result);
 8006968:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
 800696c:	2301      	movs	r3, #1
 800696e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f383 8810 	msr	PRIMASK, r3
}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2180      	movs	r1, #128	; 0x80
 8006984:	438a      	bics	r2, r1
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f383 8810 	msr	PRIMASK, r3
}
 8006992:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006994:	f3ef 8310 	mrs	r3, PRIMASK
 8006998:	61bb      	str	r3, [r7, #24]
  return(result);
 800699a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
 800699e:	2301      	movs	r3, #1
 80069a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	f383 8810 	msr	PRIMASK, r3
}
 80069a8:	46c0      	nop			; (mov r8, r8)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2140      	movs	r1, #64	; 0x40
 80069b6:	430a      	orrs	r2, r1
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	f383 8810 	msr	PRIMASK, r3
}
 80069c4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80069c6:	e018      	b.n	80069fa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	881a      	ldrh	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	05d2      	lsls	r2, r2, #23
 80069d8:	0dd2      	lsrs	r2, r2, #23
 80069da:	b292      	uxth	r2, r2
 80069dc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e2:	1c9a      	adds	r2, r3, #2
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2252      	movs	r2, #82	; 0x52
 80069ec:	5a9b      	ldrh	r3, [r3, r2]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b299      	uxth	r1, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2252      	movs	r2, #82	; 0x52
 80069f8:	5299      	strh	r1, [r3, r2]
}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	46bd      	mov	sp, r7
 80069fe:	b00c      	add	sp, #48	; 0x30
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b086      	sub	sp, #24
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a10:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	2301      	movs	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f383 8810 	msr	PRIMASK, r3
}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2140      	movs	r1, #64	; 0x40
 8006a2c:	438a      	bics	r2, r1
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f383 8810 	msr	PRIMASK, r3
}
 8006a3a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7ff fb7e 	bl	800614c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a50:	46c0      	nop			; (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b006      	add	sp, #24
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a60:	46c0      	nop			; (mov r8, r8)
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b002      	add	sp, #8
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <__libc_init_array>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	4d0c      	ldr	r5, [pc, #48]	; (8006aa0 <__libc_init_array+0x38>)
 8006a6e:	4c0d      	ldr	r4, [pc, #52]	; (8006aa4 <__libc_init_array+0x3c>)
 8006a70:	1b64      	subs	r4, r4, r5
 8006a72:	10a4      	asrs	r4, r4, #2
 8006a74:	42a6      	cmp	r6, r4
 8006a76:	d109      	bne.n	8006a8c <__libc_init_array+0x24>
 8006a78:	2600      	movs	r6, #0
 8006a7a:	f000 f821 	bl	8006ac0 <_init>
 8006a7e:	4d0a      	ldr	r5, [pc, #40]	; (8006aa8 <__libc_init_array+0x40>)
 8006a80:	4c0a      	ldr	r4, [pc, #40]	; (8006aac <__libc_init_array+0x44>)
 8006a82:	1b64      	subs	r4, r4, r5
 8006a84:	10a4      	asrs	r4, r4, #2
 8006a86:	42a6      	cmp	r6, r4
 8006a88:	d105      	bne.n	8006a96 <__libc_init_array+0x2e>
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	00b3      	lsls	r3, r6, #2
 8006a8e:	58eb      	ldr	r3, [r5, r3]
 8006a90:	4798      	blx	r3
 8006a92:	3601      	adds	r6, #1
 8006a94:	e7ee      	b.n	8006a74 <__libc_init_array+0xc>
 8006a96:	00b3      	lsls	r3, r6, #2
 8006a98:	58eb      	ldr	r3, [r5, r3]
 8006a9a:	4798      	blx	r3
 8006a9c:	3601      	adds	r6, #1
 8006a9e:	e7f2      	b.n	8006a86 <__libc_init_array+0x1e>
 8006aa0:	08006c30 	.word	0x08006c30
 8006aa4:	08006c30 	.word	0x08006c30
 8006aa8:	08006c30 	.word	0x08006c30
 8006aac:	08006c34 	.word	0x08006c34

08006ab0 <memset>:
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	1882      	adds	r2, r0, r2
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d100      	bne.n	8006aba <memset+0xa>
 8006ab8:	4770      	bx	lr
 8006aba:	7019      	strb	r1, [r3, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	e7f9      	b.n	8006ab4 <memset+0x4>

08006ac0 <_init>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr

08006acc <_fini>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr
